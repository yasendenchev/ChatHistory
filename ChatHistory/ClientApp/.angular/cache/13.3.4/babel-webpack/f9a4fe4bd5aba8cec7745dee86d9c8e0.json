{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Dev\\\\Personal\\\\ChatHistory\\\\ChatHistory\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs';\nimport { ChatEventService } from 'src/app/services/chat-event.service';\nimport { ChatStatisticsByHourComponent } from './hourly-chat-history.component';\ndescribe('ChatStatisticsByHourComponent', () => {\n  let component;\n  let fixture; // let mockService = {getChatStatisticsByHour: () => {}};\n\n  let chatEventService;\n  let fakeHourlyEvent;\n  let httpClient;\n\n  function setupChatStatistics() {\n    return Object.values(CHATSTATISTICSDATA);\n  }\n\n  const CHATSTATISTICSDATA = [{\n    utcTimeStamp: new Date(),\n    joinedCount: 1,\n    leftCount: 1,\n    highFiveRecipientsCount: 1,\n    highFiveInitiatorsCount: 1,\n    commentCount: 1\n  }];\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const chatEventServiceSpy = jasmine.createSpyObj('ChatEventService', ['getChatStatisticsByHour']);\n    yield TestBed.configureTestingModule({\n      declarations: [ChatStatisticsByHourComponent],\n      providers: [{\n        provide: ChatEventService,\n        useValue: chatEventServiceSpy\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ChatStatisticsByHourComponent);\n    component = fixture.componentInstance;\n    chatEventService = TestBed.get(ChatEventService);\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    chatEventService.getChatStatisticsByHour.and.returnValue(of(CHATSTATISTICSDATA));\n    expect(component).toBeTruthy();\n  });\n});","map":{"version":3,"sources":["C:/Dev/Personal/ChatHistory/ChatHistory/ClientApp/src/app/chat-history/hourly-chat-history/hourly-chat-history.component.spec.ts"],"names":["TestBed","of","ChatEventService","ChatStatisticsByHourComponent","describe","component","fixture","chatEventService","fakeHourlyEvent","httpClient","setupChatStatistics","Object","values","CHATSTATISTICSDATA","utcTimeStamp","Date","joinedCount","leftCount","highFiveRecipientsCount","highFiveInitiatorsCount","commentCount","beforeEach","chatEventServiceSpy","jasmine","createSpyObj","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","get","detectChanges","it","getChatStatisticsByHour","and","returnValue","expect","toBeTruthy"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AACAC,QAAQ,CAAC,4BAAD,EAA+B,MAAM;AACzC,MAAIC,SAAJ;AACA,MAAIC,OAAJ,CAFyC,CAGzC;;AACA,MAAIC,gBAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,UAAJ;;AACA,WAASC,mBAAT,GAA+B;AAC3B,WAAOC,MAAM,CAACC,MAAP,CAAcC,kBAAd,CAAP;AACH;;AACD,QAAMA,kBAAkB,GAAG,CAAC;AACpBC,IAAAA,YAAY,EAAE,IAAIC,IAAJ,EADM;AAEpBC,IAAAA,WAAW,EAAE,CAFO;AAGpBC,IAAAA,SAAS,EAAE,CAHS;AAIpBC,IAAAA,uBAAuB,EAAE,CAJL;AAKpBC,IAAAA,uBAAuB,EAAE,CALL;AAMpBC,IAAAA,YAAY,EAAE;AANM,GAAD,CAA3B;AASAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMC,mBAAmB,GAAGC,OAAO,CAACC,YAAR,CAAqB,kBAArB,EAAyC,CAAC,WAAD,CAAzC,CAA5B;AACA,UAAMxB,OAAO,CAACyB,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACvB,0BAAD,CADmB;AAEjCwB,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,OAAO,EAAE1B,gBAAX;AAA6B2B,QAAAA,QAAQ,EAAEP;AAAvC,OAAD;AAFsB,KAA/B,EAIDQ,iBAJC,EAAN;AAKH,GAPS,EAAV;AAQAT,EAAAA,UAAU,CAAC,MAAM;AACbf,IAAAA,OAAO,GAAGN,OAAO,CAAC+B,eAAR,CAAwB5B,0BAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAAC0B,iBAApB;AACAzB,IAAAA,gBAAgB,GAAGP,OAAO,CAACiC,GAAR,CAAY/B,gBAAZ,CAAnB;AACAI,IAAAA,OAAO,CAAC4B,aAAR;AACH,GALS,CAAV;AAMAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtB5B,IAAAA,gBAAgB,CAAC6B,SAAjB,CAA2BC,GAA3B,CAA+BC,WAA/B,CAA2CrC,EAAE,CAACY,kBAAD,CAA7C;AACA0B,IAAAA,MAAM,CAAClC,SAAD,CAAN,CAAkBmC,UAAlB;AACH,GAHC,CAAF;AAIH,CArCO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { of } from 'rxjs';\r\nimport { ChatEventService } from 'src/app/services/chat-event.service';\r\nimport { ChatStatisticsByHourComponent } from './hourly-chat-history.component';\r\ndescribe('ChatStatisticsByHourComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    // let mockService = {getChatStatisticsByHour: () => {}};\r\n    let chatEventService;\r\n    let fakeHourlyEvent;\r\n    let httpClient;\r\n    function setupChatStatistics() {\r\n        return Object.values(CHATSTATISTICSDATA);\r\n    }\r\n    const CHATSTATISTICSDATA = [{\r\n            utcTimeStamp: new Date(),\r\n            joinedCount: 1,\r\n            leftCount: 1,\r\n            highFiveRecipientsCount: 1,\r\n            highFiveInitiatorsCount: 1,\r\n            commentCount: 1,\r\n        }\r\n    ];\r\n    beforeEach(async () => {\r\n        const chatEventServiceSpy = jasmine.createSpyObj('ChatEventService', ['getChatStatisticsByHour']);\r\n        await TestBed.configureTestingModule({\r\n            declarations: [ChatStatisticsByHourComponent],\r\n            providers: [{ provide: ChatEventService, useValue: chatEventServiceSpy }]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(ChatStatisticsByHourComponent);\r\n        component = fixture.componentInstance;\r\n        chatEventService = TestBed.get(ChatEventService);\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        chatEventService.getChatStatisticsByHour.and.returnValue(of(CHATSTATISTICSDATA));\r\n        expect(component).toBeTruthy();\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}