{"ast":null,"code":"\"use strict\";\n\nmodule.exports = HTMLParser;\n\nvar Document = require('./Document');\n\nvar DocumentType = require('./DocumentType');\n\nvar Node = require('./Node');\n\nvar NAMESPACE = require('./utils').NAMESPACE;\n\nvar html = require('./htmlelts');\n\nvar impl = html.elements;\nvar pushAll = Function.prototype.apply.bind(Array.prototype.push);\n/*\n * This file contains an implementation of the HTML parsing algorithm.\n * The algorithm and the implementation are complex because HTML\n * explicitly defines how the parser should behave for all possible\n * valid and invalid inputs.\n *\n * Usage:\n *\n * The file defines a single HTMLParser() function, which dom.js exposes\n * publicly as document.implementation.mozHTMLParser(). This is a\n * factory function, not a constructor.\n *\n * When you call document.implementation.mozHTMLParser(), it returns\n * an object that has parse() and document() methods. To parse HTML text,\n * pass the text (in one or more chunks) to the parse() method.  When\n * you've passed all the text (on the last chunk, or afterward) pass\n * true as the second argument to parse() to tell the parser that there\n * is no more coming. Call document() to get the document object that\n * the parser is parsing into.  You can call this at any time, before\n * or after calling parse().\n *\n * The first argument to mozHTMLParser is the absolute URL of the document.\n *\n * The second argument is optional and is for internal use only.  Pass an\n * element as the fragmentContext to do innerHTML parsing for the\n * element.  To do innerHTML parsing on a document, pass null. Otherwise,\n * omit the 2nd argument. See HTMLElement.innerHTML for an example.  Note\n * that if you pass a context element, the end() method will return an\n * unwrapped document instead of a wrapped one.\n *\n * Implementation details:\n *\n * This is a long file of almost 7000 lines. It is structured as one\n * big function nested within another big function.  The outer\n * function defines a bunch of constant data, utility functions\n * that use that data, and a couple of classes used by the parser.\n * The outer function also defines and returns the\n * inner function. This inner function is the HTMLParser factory\n * function that implements the parser and holds all the parser state\n * as local variables.  The HTMLParser function is quite big because\n * it defines many nested functions that use those local variables.\n *\n * There are three tightly coupled parser stages: a scanner, a\n * tokenizer and a tree builder. In a (possibly misguided) attempt at\n * efficiency, the stages are not implemented as separate classes:\n * everything shares state and is (mostly) implemented in imperative\n * (rather than OO) style.\n *\n * The stages of the parser work like this: When the client code calls\n * the parser's parse() method, the specified string is passed to\n * scanChars(). The scanner loops through that string and passes characters\n * (sometimes one at a time, sometimes in chunks) to the tokenizer stage.\n * The tokenizer groups the characters into tokens: tags, endtags, runs\n * of text, comments, doctype declarations, and the end-of-file (EOF)\n * token.  These tokens are then passed to the tree building stage via\n * the insertToken() function.  The tree building stage builds up the\n * document tree.\n *\n * The tokenizer stage is a finite state machine.  Each state is\n * implemented as a function with a name that ends in \"_state\".  The\n * initial state is data_state(). The current tokenizer state is stored\n * in the variable 'tokenizer'.  Most state functions expect a single\n * integer argument which represents a single UTF-16 codepoint.  Some\n * states want more characters and set a lookahead property on\n * themselves.  The scanChars() function in the scanner checks for this\n * lookahead property.  If it doesn't exist, then scanChars() just passes\n * the next input character to the current tokenizer state function.\n * Otherwise, scanChars() looks ahead (a given # of characters, or for a\n * matching string, or for a matching regexp) and passes a string of\n * characters to the current tokenizer state function.\n *\n * As a shortcut, certain states of the tokenizer use regular expressions\n * to look ahead in the scanner's input buffer for runs of text, simple\n * tags and attributes.  For well-formed input, these shortcuts skip a\n * lot of state transitions and speed things up a bit.\n *\n * When a tokenizer state function has consumed a complete token, it\n * emits that token, by calling insertToken(), or by calling a utility\n * function that itself calls insertToken().  These tokens are passed to\n * the tree building stage, which is also a state machine.  Like the\n * tokenizer, the tree building states are implemented as functions, and\n * these functions have names that end with _mode (because the HTML spec\n * refers to them as insertion modes). The current insertion mode is held\n * by the 'parser' variable.  Each insertion mode function takes up to 4\n * arguments.  The first is a token type, represented by the constants\n * TAG, ENDTAG, TEXT, COMMENT, DOCTYPE and EOF.  The second argument is\n * the value of the token: the text or comment data, or tagname or\n * doctype.  For tags, the 3rd argument is an array of attributes.  For\n * DOCTYPES it is the optional public id.  For tags, the 4th argument is\n * true if the tag is self-closing. For doctypes, the 4th argument is the\n * optional system id.\n *\n * Search for \"***\" to find the major sub-divisions in the code.\n */\n\n/***\n * Data prolog.  Lots of constants declared here, including some\n * very large objects.  They're used throughout the code that follows\n */\n// Token types for the tree builder.\n\nvar EOF = -1;\nvar TEXT = 1;\nvar TAG = 2;\nvar ENDTAG = 3;\nvar COMMENT = 4;\nvar DOCTYPE = 5; // A re-usable empty array\n\nvar NOATTRS = []; // These DTD public ids put the browser in quirks mode\n\nvar quirkyPublicIds = /^HTML$|^-\\/\\/W3O\\/\\/DTD W3 HTML Strict 3\\.0\\/\\/EN\\/\\/$|^-\\/W3C\\/DTD HTML 4\\.0 Transitional\\/EN$|^\\+\\/\\/Silmaril\\/\\/dtd html Pro v0r11 19970101\\/\\/|^-\\/\\/AdvaSoft Ltd\\/\\/DTD HTML 3\\.0 asWedit \\+ extensions\\/\\/|^-\\/\\/AS\\/\\/DTD HTML 3\\.0 asWedit \\+ extensions\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.1E\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.2 Final\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML\\/\\/|^-\\/\\/Metrius\\/\\/DTD Metrius Presentational\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 HTML Strict\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 HTML\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 Tables\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 HTML Strict\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 HTML\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 Tables\\/\\/|^-\\/\\/Netscape Comm\\. Corp\\.\\/\\/DTD HTML\\/\\/|^-\\/\\/Netscape Comm\\. Corp\\.\\/\\/DTD Strict HTML\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML 2\\.0\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML Extended 1\\.0\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML Extended Relaxed 1\\.0\\/\\/|^-\\/\\/SoftQuad Software\\/\\/DTD HoTMetaL PRO 6\\.0::19990601::extensions to HTML 4\\.0\\/\\/|^-\\/\\/SoftQuad\\/\\/DTD HoTMetaL PRO 4\\.0::19971010::extensions to HTML 4\\.0\\/\\/|^-\\/\\/Spyglass\\/\\/DTD HTML 2\\.0 Extended\\/\\/|^-\\/\\/SQ\\/\\/DTD HTML 2\\.0 HoTMetaL \\+ extensions\\/\\/|^-\\/\\/Sun Microsystems Corp\\.\\/\\/DTD HotJava HTML\\/\\/|^-\\/\\/Sun Microsystems Corp\\.\\/\\/DTD HotJava Strict HTML\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3 1995-03-24\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2 Draft\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2 Final\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2S Draft\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.0 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.0 Transitional\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML Experimental 19960712\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML Experimental 970421\\/\\/|^-\\/\\/W3C\\/\\/DTD W3 HTML\\/\\/|^-\\/\\/W3O\\/\\/DTD W3 HTML 3\\.0\\/\\/|^-\\/\\/WebTechs\\/\\/DTD Mozilla HTML 2\\.0\\/\\/|^-\\/\\/WebTechs\\/\\/DTD Mozilla HTML\\/\\//i;\nvar quirkySystemId = \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\";\nvar conditionallyQuirkyPublicIds = /^-\\/\\/W3C\\/\\/DTD HTML 4\\.01 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.01 Transitional\\/\\//i; // These DTD public ids put the browser in limited quirks mode\n\nvar limitedQuirkyPublicIds = /^-\\/\\/W3C\\/\\/DTD XHTML 1\\.0 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD XHTML 1\\.0 Transitional\\/\\//i; // Element sets below. See the isA() function for a way to test\n// whether an element is a member of a set\n\nvar specialSet = Object.create(null);\nspecialSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"address\": true,\n  \"applet\": true,\n  \"area\": true,\n  \"article\": true,\n  \"aside\": true,\n  \"base\": true,\n  \"basefont\": true,\n  \"bgsound\": true,\n  \"blockquote\": true,\n  \"body\": true,\n  \"br\": true,\n  \"button\": true,\n  \"caption\": true,\n  \"center\": true,\n  \"col\": true,\n  \"colgroup\": true,\n  \"dd\": true,\n  \"details\": true,\n  \"dir\": true,\n  \"div\": true,\n  \"dl\": true,\n  \"dt\": true,\n  \"embed\": true,\n  \"fieldset\": true,\n  \"figcaption\": true,\n  \"figure\": true,\n  \"footer\": true,\n  \"form\": true,\n  \"frame\": true,\n  \"frameset\": true,\n  \"h1\": true,\n  \"h2\": true,\n  \"h3\": true,\n  \"h4\": true,\n  \"h5\": true,\n  \"h6\": true,\n  \"head\": true,\n  \"header\": true,\n  \"hgroup\": true,\n  \"hr\": true,\n  \"html\": true,\n  \"iframe\": true,\n  \"img\": true,\n  \"input\": true,\n  \"li\": true,\n  \"link\": true,\n  \"listing\": true,\n  \"main\": true,\n  \"marquee\": true,\n  \"menu\": true,\n  \"meta\": true,\n  \"nav\": true,\n  \"noembed\": true,\n  \"noframes\": true,\n  \"noscript\": true,\n  \"object\": true,\n  \"ol\": true,\n  \"p\": true,\n  \"param\": true,\n  \"plaintext\": true,\n  \"pre\": true,\n  \"script\": true,\n  \"section\": true,\n  \"select\": true,\n  \"source\": true,\n  \"style\": true,\n  \"summary\": true,\n  \"table\": true,\n  \"tbody\": true,\n  \"td\": true,\n  \"template\": true,\n  \"textarea\": true,\n  \"tfoot\": true,\n  \"th\": true,\n  \"thead\": true,\n  \"title\": true,\n  \"tr\": true,\n  \"track\": true,\n  // Note that \"xmp\" was removed from the \"special\" set in the latest\n  // spec, apparently by accident; see\n  // https://github.com/whatwg/html/pull/1919\n  \"ul\": true,\n  \"wbr\": true,\n  \"xmp\": true\n};\nspecialSet[NAMESPACE.SVG] = {\n  __proto__: null,\n  \"foreignObject\": true,\n  \"desc\": true,\n  \"title\": true\n};\nspecialSet[NAMESPACE.MATHML] = {\n  __proto__: null,\n  \"mi\": true,\n  \"mo\": true,\n  \"mn\": true,\n  \"ms\": true,\n  \"mtext\": true,\n  \"annotation-xml\": true\n}; // The set of address, div, and p HTML tags\n\nvar addressdivpSet = Object.create(null);\naddressdivpSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"address\": true,\n  \"div\": true,\n  \"p\": true\n};\nvar dddtSet = Object.create(null);\ndddtSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"dd\": true,\n  \"dt\": true\n};\nvar tablesectionrowSet = Object.create(null);\ntablesectionrowSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"table\": true,\n  \"thead\": true,\n  \"tbody\": true,\n  \"tfoot\": true,\n  \"tr\": true\n};\nvar impliedEndTagsSet = Object.create(null);\nimpliedEndTagsSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"dd\": true,\n  \"dt\": true,\n  \"li\": true,\n  \"menuitem\": true,\n  \"optgroup\": true,\n  \"option\": true,\n  \"p\": true,\n  \"rb\": true,\n  \"rp\": true,\n  \"rt\": true,\n  \"rtc\": true\n};\nvar thoroughImpliedEndTagsSet = Object.create(null);\nthoroughImpliedEndTagsSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"caption\": true,\n  \"colgroup\": true,\n  \"dd\": true,\n  \"dt\": true,\n  \"li\": true,\n  \"optgroup\": true,\n  \"option\": true,\n  \"p\": true,\n  \"rb\": true,\n  \"rp\": true,\n  \"rt\": true,\n  \"rtc\": true,\n  \"tbody\": true,\n  \"td\": true,\n  \"tfoot\": true,\n  \"th\": true,\n  \"thead\": true,\n  \"tr\": true\n};\nvar tableContextSet = Object.create(null);\ntableContextSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"table\": true,\n  \"template\": true,\n  \"html\": true\n};\nvar tableBodyContextSet = Object.create(null);\ntableBodyContextSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"tbody\": true,\n  \"tfoot\": true,\n  \"thead\": true,\n  \"template\": true,\n  \"html\": true\n};\nvar tableRowContextSet = Object.create(null);\ntableRowContextSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"tr\": true,\n  \"template\": true,\n  \"html\": true\n}; // See http://www.w3.org/TR/html5/forms.html#form-associated-element\n\nvar formassociatedSet = Object.create(null);\nformassociatedSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"button\": true,\n  \"fieldset\": true,\n  \"input\": true,\n  \"keygen\": true,\n  \"object\": true,\n  \"output\": true,\n  \"select\": true,\n  \"textarea\": true,\n  \"img\": true\n};\nvar inScopeSet = Object.create(null);\ninScopeSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"applet\": true,\n  \"caption\": true,\n  \"html\": true,\n  \"table\": true,\n  \"td\": true,\n  \"th\": true,\n  \"marquee\": true,\n  \"object\": true,\n  \"template\": true\n};\ninScopeSet[NAMESPACE.MATHML] = {\n  __proto__: null,\n  \"mi\": true,\n  \"mo\": true,\n  \"mn\": true,\n  \"ms\": true,\n  \"mtext\": true,\n  \"annotation-xml\": true\n};\ninScopeSet[NAMESPACE.SVG] = {\n  __proto__: null,\n  \"foreignObject\": true,\n  \"desc\": true,\n  \"title\": true\n};\nvar inListItemScopeSet = Object.create(inScopeSet);\ninListItemScopeSet[NAMESPACE.HTML] = Object.create(inScopeSet[NAMESPACE.HTML]);\ninListItemScopeSet[NAMESPACE.HTML].ol = true;\ninListItemScopeSet[NAMESPACE.HTML].ul = true;\nvar inButtonScopeSet = Object.create(inScopeSet);\ninButtonScopeSet[NAMESPACE.HTML] = Object.create(inScopeSet[NAMESPACE.HTML]);\ninButtonScopeSet[NAMESPACE.HTML].button = true;\nvar inTableScopeSet = Object.create(null);\ninTableScopeSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"html\": true,\n  \"table\": true,\n  \"template\": true\n}; // The set of elements for select scope is the everything *except* these\n\nvar invertedSelectScopeSet = Object.create(null);\ninvertedSelectScopeSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"optgroup\": true,\n  \"option\": true\n};\nvar mathmlTextIntegrationPointSet = Object.create(null);\nmathmlTextIntegrationPointSet[NAMESPACE.MATHML] = {\n  __proto__: null,\n  mi: true,\n  mo: true,\n  mn: true,\n  ms: true,\n  mtext: true\n};\nvar htmlIntegrationPointSet = Object.create(null);\nhtmlIntegrationPointSet[NAMESPACE.SVG] = {\n  __proto__: null,\n  foreignObject: true,\n  desc: true,\n  title: true\n};\nvar foreignAttributes = {\n  __proto__: null,\n  \"xlink:actuate\": NAMESPACE.XLINK,\n  \"xlink:arcrole\": NAMESPACE.XLINK,\n  \"xlink:href\": NAMESPACE.XLINK,\n  \"xlink:role\": NAMESPACE.XLINK,\n  \"xlink:show\": NAMESPACE.XLINK,\n  \"xlink:title\": NAMESPACE.XLINK,\n  \"xlink:type\": NAMESPACE.XLINK,\n  \"xml:base\": NAMESPACE.XML,\n  \"xml:lang\": NAMESPACE.XML,\n  \"xml:space\": NAMESPACE.XML,\n  \"xmlns\": NAMESPACE.XMLNS,\n  \"xmlns:xlink\": NAMESPACE.XMLNS\n}; // Lowercase to mixed case mapping for SVG attributes and tagnames\n\nvar svgAttrAdjustments = {\n  __proto__: null,\n  attributename: \"attributeName\",\n  attributetype: \"attributeType\",\n  basefrequency: \"baseFrequency\",\n  baseprofile: \"baseProfile\",\n  calcmode: \"calcMode\",\n  clippathunits: \"clipPathUnits\",\n  diffuseconstant: \"diffuseConstant\",\n  edgemode: \"edgeMode\",\n  filterunits: \"filterUnits\",\n  glyphref: \"glyphRef\",\n  gradienttransform: \"gradientTransform\",\n  gradientunits: \"gradientUnits\",\n  kernelmatrix: \"kernelMatrix\",\n  kernelunitlength: \"kernelUnitLength\",\n  keypoints: \"keyPoints\",\n  keysplines: \"keySplines\",\n  keytimes: \"keyTimes\",\n  lengthadjust: \"lengthAdjust\",\n  limitingconeangle: \"limitingConeAngle\",\n  markerheight: \"markerHeight\",\n  markerunits: \"markerUnits\",\n  markerwidth: \"markerWidth\",\n  maskcontentunits: \"maskContentUnits\",\n  maskunits: \"maskUnits\",\n  numoctaves: \"numOctaves\",\n  pathlength: \"pathLength\",\n  patterncontentunits: \"patternContentUnits\",\n  patterntransform: \"patternTransform\",\n  patternunits: \"patternUnits\",\n  pointsatx: \"pointsAtX\",\n  pointsaty: \"pointsAtY\",\n  pointsatz: \"pointsAtZ\",\n  preservealpha: \"preserveAlpha\",\n  preserveaspectratio: \"preserveAspectRatio\",\n  primitiveunits: \"primitiveUnits\",\n  refx: \"refX\",\n  refy: \"refY\",\n  repeatcount: \"repeatCount\",\n  repeatdur: \"repeatDur\",\n  requiredextensions: \"requiredExtensions\",\n  requiredfeatures: \"requiredFeatures\",\n  specularconstant: \"specularConstant\",\n  specularexponent: \"specularExponent\",\n  spreadmethod: \"spreadMethod\",\n  startoffset: \"startOffset\",\n  stddeviation: \"stdDeviation\",\n  stitchtiles: \"stitchTiles\",\n  surfacescale: \"surfaceScale\",\n  systemlanguage: \"systemLanguage\",\n  tablevalues: \"tableValues\",\n  targetx: \"targetX\",\n  targety: \"targetY\",\n  textlength: \"textLength\",\n  viewbox: \"viewBox\",\n  viewtarget: \"viewTarget\",\n  xchannelselector: \"xChannelSelector\",\n  ychannelselector: \"yChannelSelector\",\n  zoomandpan: \"zoomAndPan\"\n};\nvar svgTagNameAdjustments = {\n  __proto__: null,\n  altglyph: \"altGlyph\",\n  altglyphdef: \"altGlyphDef\",\n  altglyphitem: \"altGlyphItem\",\n  animatecolor: \"animateColor\",\n  animatemotion: \"animateMotion\",\n  animatetransform: \"animateTransform\",\n  clippath: \"clipPath\",\n  feblend: \"feBlend\",\n  fecolormatrix: \"feColorMatrix\",\n  fecomponenttransfer: \"feComponentTransfer\",\n  fecomposite: \"feComposite\",\n  feconvolvematrix: \"feConvolveMatrix\",\n  fediffuselighting: \"feDiffuseLighting\",\n  fedisplacementmap: \"feDisplacementMap\",\n  fedistantlight: \"feDistantLight\",\n  feflood: \"feFlood\",\n  fefunca: \"feFuncA\",\n  fefuncb: \"feFuncB\",\n  fefuncg: \"feFuncG\",\n  fefuncr: \"feFuncR\",\n  fegaussianblur: \"feGaussianBlur\",\n  feimage: \"feImage\",\n  femerge: \"feMerge\",\n  femergenode: \"feMergeNode\",\n  femorphology: \"feMorphology\",\n  feoffset: \"feOffset\",\n  fepointlight: \"fePointLight\",\n  fespecularlighting: \"feSpecularLighting\",\n  fespotlight: \"feSpotLight\",\n  fetile: \"feTile\",\n  feturbulence: \"feTurbulence\",\n  foreignobject: \"foreignObject\",\n  glyphref: \"glyphRef\",\n  lineargradient: \"linearGradient\",\n  radialgradient: \"radialGradient\",\n  textpath: \"textPath\"\n}; // Data for parsing numeric and named character references\n// These next 3 objects are direct translations of tables\n// in the HTML spec into JavaScript object format\n\nvar numericCharRefReplacements = {\n  __proto__: null,\n  0x00: 0xFFFD,\n  0x80: 0x20AC,\n  0x82: 0x201A,\n  0x83: 0x0192,\n  0x84: 0x201E,\n  0x85: 0x2026,\n  0x86: 0x2020,\n  0x87: 0x2021,\n  0x88: 0x02C6,\n  0x89: 0x2030,\n  0x8A: 0x0160,\n  0x8B: 0x2039,\n  0x8C: 0x0152,\n  0x8E: 0x017D,\n  0x91: 0x2018,\n  0x92: 0x2019,\n  0x93: 0x201C,\n  0x94: 0x201D,\n  0x95: 0x2022,\n  0x96: 0x2013,\n  0x97: 0x2014,\n  0x98: 0x02DC,\n  0x99: 0x2122,\n  0x9A: 0x0161,\n  0x9B: 0x203A,\n  0x9C: 0x0153,\n  0x9E: 0x017E,\n  0x9F: 0x0178\n};\n/*\n * This table is generated with test/tools/update-entities.js\n */\n\nvar namedCharRefs = {\n  __proto__: null,\n  \"AElig\": 0xc6,\n  \"AElig;\": 0xc6,\n  \"AMP\": 0x26,\n  \"AMP;\": 0x26,\n  \"Aacute\": 0xc1,\n  \"Aacute;\": 0xc1,\n  \"Abreve;\": 0x102,\n  \"Acirc\": 0xc2,\n  \"Acirc;\": 0xc2,\n  \"Acy;\": 0x410,\n  \"Afr;\": [0xd835, 0xdd04],\n  \"Agrave\": 0xc0,\n  \"Agrave;\": 0xc0,\n  \"Alpha;\": 0x391,\n  \"Amacr;\": 0x100,\n  \"And;\": 0x2a53,\n  \"Aogon;\": 0x104,\n  \"Aopf;\": [0xd835, 0xdd38],\n  \"ApplyFunction;\": 0x2061,\n  \"Aring\": 0xc5,\n  \"Aring;\": 0xc5,\n  \"Ascr;\": [0xd835, 0xdc9c],\n  \"Assign;\": 0x2254,\n  \"Atilde\": 0xc3,\n  \"Atilde;\": 0xc3,\n  \"Auml\": 0xc4,\n  \"Auml;\": 0xc4,\n  \"Backslash;\": 0x2216,\n  \"Barv;\": 0x2ae7,\n  \"Barwed;\": 0x2306,\n  \"Bcy;\": 0x411,\n  \"Because;\": 0x2235,\n  \"Bernoullis;\": 0x212c,\n  \"Beta;\": 0x392,\n  \"Bfr;\": [0xd835, 0xdd05],\n  \"Bopf;\": [0xd835, 0xdd39],\n  \"Breve;\": 0x2d8,\n  \"Bscr;\": 0x212c,\n  \"Bumpeq;\": 0x224e,\n  \"CHcy;\": 0x427,\n  \"COPY\": 0xa9,\n  \"COPY;\": 0xa9,\n  \"Cacute;\": 0x106,\n  \"Cap;\": 0x22d2,\n  \"CapitalDifferentialD;\": 0x2145,\n  \"Cayleys;\": 0x212d,\n  \"Ccaron;\": 0x10c,\n  \"Ccedil\": 0xc7,\n  \"Ccedil;\": 0xc7,\n  \"Ccirc;\": 0x108,\n  \"Cconint;\": 0x2230,\n  \"Cdot;\": 0x10a,\n  \"Cedilla;\": 0xb8,\n  \"CenterDot;\": 0xb7,\n  \"Cfr;\": 0x212d,\n  \"Chi;\": 0x3a7,\n  \"CircleDot;\": 0x2299,\n  \"CircleMinus;\": 0x2296,\n  \"CirclePlus;\": 0x2295,\n  \"CircleTimes;\": 0x2297,\n  \"ClockwiseContourIntegral;\": 0x2232,\n  \"CloseCurlyDoubleQuote;\": 0x201d,\n  \"CloseCurlyQuote;\": 0x2019,\n  \"Colon;\": 0x2237,\n  \"Colone;\": 0x2a74,\n  \"Congruent;\": 0x2261,\n  \"Conint;\": 0x222f,\n  \"ContourIntegral;\": 0x222e,\n  \"Copf;\": 0x2102,\n  \"Coproduct;\": 0x2210,\n  \"CounterClockwiseContourIntegral;\": 0x2233,\n  \"Cross;\": 0x2a2f,\n  \"Cscr;\": [0xd835, 0xdc9e],\n  \"Cup;\": 0x22d3,\n  \"CupCap;\": 0x224d,\n  \"DD;\": 0x2145,\n  \"DDotrahd;\": 0x2911,\n  \"DJcy;\": 0x402,\n  \"DScy;\": 0x405,\n  \"DZcy;\": 0x40f,\n  \"Dagger;\": 0x2021,\n  \"Darr;\": 0x21a1,\n  \"Dashv;\": 0x2ae4,\n  \"Dcaron;\": 0x10e,\n  \"Dcy;\": 0x414,\n  \"Del;\": 0x2207,\n  \"Delta;\": 0x394,\n  \"Dfr;\": [0xd835, 0xdd07],\n  \"DiacriticalAcute;\": 0xb4,\n  \"DiacriticalDot;\": 0x2d9,\n  \"DiacriticalDoubleAcute;\": 0x2dd,\n  \"DiacriticalGrave;\": 0x60,\n  \"DiacriticalTilde;\": 0x2dc,\n  \"Diamond;\": 0x22c4,\n  \"DifferentialD;\": 0x2146,\n  \"Dopf;\": [0xd835, 0xdd3b],\n  \"Dot;\": 0xa8,\n  \"DotDot;\": 0x20dc,\n  \"DotEqual;\": 0x2250,\n  \"DoubleContourIntegral;\": 0x222f,\n  \"DoubleDot;\": 0xa8,\n  \"DoubleDownArrow;\": 0x21d3,\n  \"DoubleLeftArrow;\": 0x21d0,\n  \"DoubleLeftRightArrow;\": 0x21d4,\n  \"DoubleLeftTee;\": 0x2ae4,\n  \"DoubleLongLeftArrow;\": 0x27f8,\n  \"DoubleLongLeftRightArrow;\": 0x27fa,\n  \"DoubleLongRightArrow;\": 0x27f9,\n  \"DoubleRightArrow;\": 0x21d2,\n  \"DoubleRightTee;\": 0x22a8,\n  \"DoubleUpArrow;\": 0x21d1,\n  \"DoubleUpDownArrow;\": 0x21d5,\n  \"DoubleVerticalBar;\": 0x2225,\n  \"DownArrow;\": 0x2193,\n  \"DownArrowBar;\": 0x2913,\n  \"DownArrowUpArrow;\": 0x21f5,\n  \"DownBreve;\": 0x311,\n  \"DownLeftRightVector;\": 0x2950,\n  \"DownLeftTeeVector;\": 0x295e,\n  \"DownLeftVector;\": 0x21bd,\n  \"DownLeftVectorBar;\": 0x2956,\n  \"DownRightTeeVector;\": 0x295f,\n  \"DownRightVector;\": 0x21c1,\n  \"DownRightVectorBar;\": 0x2957,\n  \"DownTee;\": 0x22a4,\n  \"DownTeeArrow;\": 0x21a7,\n  \"Downarrow;\": 0x21d3,\n  \"Dscr;\": [0xd835, 0xdc9f],\n  \"Dstrok;\": 0x110,\n  \"ENG;\": 0x14a,\n  \"ETH\": 0xd0,\n  \"ETH;\": 0xd0,\n  \"Eacute\": 0xc9,\n  \"Eacute;\": 0xc9,\n  \"Ecaron;\": 0x11a,\n  \"Ecirc\": 0xca,\n  \"Ecirc;\": 0xca,\n  \"Ecy;\": 0x42d,\n  \"Edot;\": 0x116,\n  \"Efr;\": [0xd835, 0xdd08],\n  \"Egrave\": 0xc8,\n  \"Egrave;\": 0xc8,\n  \"Element;\": 0x2208,\n  \"Emacr;\": 0x112,\n  \"EmptySmallSquare;\": 0x25fb,\n  \"EmptyVerySmallSquare;\": 0x25ab,\n  \"Eogon;\": 0x118,\n  \"Eopf;\": [0xd835, 0xdd3c],\n  \"Epsilon;\": 0x395,\n  \"Equal;\": 0x2a75,\n  \"EqualTilde;\": 0x2242,\n  \"Equilibrium;\": 0x21cc,\n  \"Escr;\": 0x2130,\n  \"Esim;\": 0x2a73,\n  \"Eta;\": 0x397,\n  \"Euml\": 0xcb,\n  \"Euml;\": 0xcb,\n  \"Exists;\": 0x2203,\n  \"ExponentialE;\": 0x2147,\n  \"Fcy;\": 0x424,\n  \"Ffr;\": [0xd835, 0xdd09],\n  \"FilledSmallSquare;\": 0x25fc,\n  \"FilledVerySmallSquare;\": 0x25aa,\n  \"Fopf;\": [0xd835, 0xdd3d],\n  \"ForAll;\": 0x2200,\n  \"Fouriertrf;\": 0x2131,\n  \"Fscr;\": 0x2131,\n  \"GJcy;\": 0x403,\n  \"GT\": 0x3e,\n  \"GT;\": 0x3e,\n  \"Gamma;\": 0x393,\n  \"Gammad;\": 0x3dc,\n  \"Gbreve;\": 0x11e,\n  \"Gcedil;\": 0x122,\n  \"Gcirc;\": 0x11c,\n  \"Gcy;\": 0x413,\n  \"Gdot;\": 0x120,\n  \"Gfr;\": [0xd835, 0xdd0a],\n  \"Gg;\": 0x22d9,\n  \"Gopf;\": [0xd835, 0xdd3e],\n  \"GreaterEqual;\": 0x2265,\n  \"GreaterEqualLess;\": 0x22db,\n  \"GreaterFullEqual;\": 0x2267,\n  \"GreaterGreater;\": 0x2aa2,\n  \"GreaterLess;\": 0x2277,\n  \"GreaterSlantEqual;\": 0x2a7e,\n  \"GreaterTilde;\": 0x2273,\n  \"Gscr;\": [0xd835, 0xdca2],\n  \"Gt;\": 0x226b,\n  \"HARDcy;\": 0x42a,\n  \"Hacek;\": 0x2c7,\n  \"Hat;\": 0x5e,\n  \"Hcirc;\": 0x124,\n  \"Hfr;\": 0x210c,\n  \"HilbertSpace;\": 0x210b,\n  \"Hopf;\": 0x210d,\n  \"HorizontalLine;\": 0x2500,\n  \"Hscr;\": 0x210b,\n  \"Hstrok;\": 0x126,\n  \"HumpDownHump;\": 0x224e,\n  \"HumpEqual;\": 0x224f,\n  \"IEcy;\": 0x415,\n  \"IJlig;\": 0x132,\n  \"IOcy;\": 0x401,\n  \"Iacute\": 0xcd,\n  \"Iacute;\": 0xcd,\n  \"Icirc\": 0xce,\n  \"Icirc;\": 0xce,\n  \"Icy;\": 0x418,\n  \"Idot;\": 0x130,\n  \"Ifr;\": 0x2111,\n  \"Igrave\": 0xcc,\n  \"Igrave;\": 0xcc,\n  \"Im;\": 0x2111,\n  \"Imacr;\": 0x12a,\n  \"ImaginaryI;\": 0x2148,\n  \"Implies;\": 0x21d2,\n  \"Int;\": 0x222c,\n  \"Integral;\": 0x222b,\n  \"Intersection;\": 0x22c2,\n  \"InvisibleComma;\": 0x2063,\n  \"InvisibleTimes;\": 0x2062,\n  \"Iogon;\": 0x12e,\n  \"Iopf;\": [0xd835, 0xdd40],\n  \"Iota;\": 0x399,\n  \"Iscr;\": 0x2110,\n  \"Itilde;\": 0x128,\n  \"Iukcy;\": 0x406,\n  \"Iuml\": 0xcf,\n  \"Iuml;\": 0xcf,\n  \"Jcirc;\": 0x134,\n  \"Jcy;\": 0x419,\n  \"Jfr;\": [0xd835, 0xdd0d],\n  \"Jopf;\": [0xd835, 0xdd41],\n  \"Jscr;\": [0xd835, 0xdca5],\n  \"Jsercy;\": 0x408,\n  \"Jukcy;\": 0x404,\n  \"KHcy;\": 0x425,\n  \"KJcy;\": 0x40c,\n  \"Kappa;\": 0x39a,\n  \"Kcedil;\": 0x136,\n  \"Kcy;\": 0x41a,\n  \"Kfr;\": [0xd835, 0xdd0e],\n  \"Kopf;\": [0xd835, 0xdd42],\n  \"Kscr;\": [0xd835, 0xdca6],\n  \"LJcy;\": 0x409,\n  \"LT\": 0x3c,\n  \"LT;\": 0x3c,\n  \"Lacute;\": 0x139,\n  \"Lambda;\": 0x39b,\n  \"Lang;\": 0x27ea,\n  \"Laplacetrf;\": 0x2112,\n  \"Larr;\": 0x219e,\n  \"Lcaron;\": 0x13d,\n  \"Lcedil;\": 0x13b,\n  \"Lcy;\": 0x41b,\n  \"LeftAngleBracket;\": 0x27e8,\n  \"LeftArrow;\": 0x2190,\n  \"LeftArrowBar;\": 0x21e4,\n  \"LeftArrowRightArrow;\": 0x21c6,\n  \"LeftCeiling;\": 0x2308,\n  \"LeftDoubleBracket;\": 0x27e6,\n  \"LeftDownTeeVector;\": 0x2961,\n  \"LeftDownVector;\": 0x21c3,\n  \"LeftDownVectorBar;\": 0x2959,\n  \"LeftFloor;\": 0x230a,\n  \"LeftRightArrow;\": 0x2194,\n  \"LeftRightVector;\": 0x294e,\n  \"LeftTee;\": 0x22a3,\n  \"LeftTeeArrow;\": 0x21a4,\n  \"LeftTeeVector;\": 0x295a,\n  \"LeftTriangle;\": 0x22b2,\n  \"LeftTriangleBar;\": 0x29cf,\n  \"LeftTriangleEqual;\": 0x22b4,\n  \"LeftUpDownVector;\": 0x2951,\n  \"LeftUpTeeVector;\": 0x2960,\n  \"LeftUpVector;\": 0x21bf,\n  \"LeftUpVectorBar;\": 0x2958,\n  \"LeftVector;\": 0x21bc,\n  \"LeftVectorBar;\": 0x2952,\n  \"Leftarrow;\": 0x21d0,\n  \"Leftrightarrow;\": 0x21d4,\n  \"LessEqualGreater;\": 0x22da,\n  \"LessFullEqual;\": 0x2266,\n  \"LessGreater;\": 0x2276,\n  \"LessLess;\": 0x2aa1,\n  \"LessSlantEqual;\": 0x2a7d,\n  \"LessTilde;\": 0x2272,\n  \"Lfr;\": [0xd835, 0xdd0f],\n  \"Ll;\": 0x22d8,\n  \"Lleftarrow;\": 0x21da,\n  \"Lmidot;\": 0x13f,\n  \"LongLeftArrow;\": 0x27f5,\n  \"LongLeftRightArrow;\": 0x27f7,\n  \"LongRightArrow;\": 0x27f6,\n  \"Longleftarrow;\": 0x27f8,\n  \"Longleftrightarrow;\": 0x27fa,\n  \"Longrightarrow;\": 0x27f9,\n  \"Lopf;\": [0xd835, 0xdd43],\n  \"LowerLeftArrow;\": 0x2199,\n  \"LowerRightArrow;\": 0x2198,\n  \"Lscr;\": 0x2112,\n  \"Lsh;\": 0x21b0,\n  \"Lstrok;\": 0x141,\n  \"Lt;\": 0x226a,\n  \"Map;\": 0x2905,\n  \"Mcy;\": 0x41c,\n  \"MediumSpace;\": 0x205f,\n  \"Mellintrf;\": 0x2133,\n  \"Mfr;\": [0xd835, 0xdd10],\n  \"MinusPlus;\": 0x2213,\n  \"Mopf;\": [0xd835, 0xdd44],\n  \"Mscr;\": 0x2133,\n  \"Mu;\": 0x39c,\n  \"NJcy;\": 0x40a,\n  \"Nacute;\": 0x143,\n  \"Ncaron;\": 0x147,\n  \"Ncedil;\": 0x145,\n  \"Ncy;\": 0x41d,\n  \"NegativeMediumSpace;\": 0x200b,\n  \"NegativeThickSpace;\": 0x200b,\n  \"NegativeThinSpace;\": 0x200b,\n  \"NegativeVeryThinSpace;\": 0x200b,\n  \"NestedGreaterGreater;\": 0x226b,\n  \"NestedLessLess;\": 0x226a,\n  \"NewLine;\": 0xa,\n  \"Nfr;\": [0xd835, 0xdd11],\n  \"NoBreak;\": 0x2060,\n  \"NonBreakingSpace;\": 0xa0,\n  \"Nopf;\": 0x2115,\n  \"Not;\": 0x2aec,\n  \"NotCongruent;\": 0x2262,\n  \"NotCupCap;\": 0x226d,\n  \"NotDoubleVerticalBar;\": 0x2226,\n  \"NotElement;\": 0x2209,\n  \"NotEqual;\": 0x2260,\n  \"NotEqualTilde;\": [0x2242, 0x338],\n  \"NotExists;\": 0x2204,\n  \"NotGreater;\": 0x226f,\n  \"NotGreaterEqual;\": 0x2271,\n  \"NotGreaterFullEqual;\": [0x2267, 0x338],\n  \"NotGreaterGreater;\": [0x226b, 0x338],\n  \"NotGreaterLess;\": 0x2279,\n  \"NotGreaterSlantEqual;\": [0x2a7e, 0x338],\n  \"NotGreaterTilde;\": 0x2275,\n  \"NotHumpDownHump;\": [0x224e, 0x338],\n  \"NotHumpEqual;\": [0x224f, 0x338],\n  \"NotLeftTriangle;\": 0x22ea,\n  \"NotLeftTriangleBar;\": [0x29cf, 0x338],\n  \"NotLeftTriangleEqual;\": 0x22ec,\n  \"NotLess;\": 0x226e,\n  \"NotLessEqual;\": 0x2270,\n  \"NotLessGreater;\": 0x2278,\n  \"NotLessLess;\": [0x226a, 0x338],\n  \"NotLessSlantEqual;\": [0x2a7d, 0x338],\n  \"NotLessTilde;\": 0x2274,\n  \"NotNestedGreaterGreater;\": [0x2aa2, 0x338],\n  \"NotNestedLessLess;\": [0x2aa1, 0x338],\n  \"NotPrecedes;\": 0x2280,\n  \"NotPrecedesEqual;\": [0x2aaf, 0x338],\n  \"NotPrecedesSlantEqual;\": 0x22e0,\n  \"NotReverseElement;\": 0x220c,\n  \"NotRightTriangle;\": 0x22eb,\n  \"NotRightTriangleBar;\": [0x29d0, 0x338],\n  \"NotRightTriangleEqual;\": 0x22ed,\n  \"NotSquareSubset;\": [0x228f, 0x338],\n  \"NotSquareSubsetEqual;\": 0x22e2,\n  \"NotSquareSuperset;\": [0x2290, 0x338],\n  \"NotSquareSupersetEqual;\": 0x22e3,\n  \"NotSubset;\": [0x2282, 0x20d2],\n  \"NotSubsetEqual;\": 0x2288,\n  \"NotSucceeds;\": 0x2281,\n  \"NotSucceedsEqual;\": [0x2ab0, 0x338],\n  \"NotSucceedsSlantEqual;\": 0x22e1,\n  \"NotSucceedsTilde;\": [0x227f, 0x338],\n  \"NotSuperset;\": [0x2283, 0x20d2],\n  \"NotSupersetEqual;\": 0x2289,\n  \"NotTilde;\": 0x2241,\n  \"NotTildeEqual;\": 0x2244,\n  \"NotTildeFullEqual;\": 0x2247,\n  \"NotTildeTilde;\": 0x2249,\n  \"NotVerticalBar;\": 0x2224,\n  \"Nscr;\": [0xd835, 0xdca9],\n  \"Ntilde\": 0xd1,\n  \"Ntilde;\": 0xd1,\n  \"Nu;\": 0x39d,\n  \"OElig;\": 0x152,\n  \"Oacute\": 0xd3,\n  \"Oacute;\": 0xd3,\n  \"Ocirc\": 0xd4,\n  \"Ocirc;\": 0xd4,\n  \"Ocy;\": 0x41e,\n  \"Odblac;\": 0x150,\n  \"Ofr;\": [0xd835, 0xdd12],\n  \"Ograve\": 0xd2,\n  \"Ograve;\": 0xd2,\n  \"Omacr;\": 0x14c,\n  \"Omega;\": 0x3a9,\n  \"Omicron;\": 0x39f,\n  \"Oopf;\": [0xd835, 0xdd46],\n  \"OpenCurlyDoubleQuote;\": 0x201c,\n  \"OpenCurlyQuote;\": 0x2018,\n  \"Or;\": 0x2a54,\n  \"Oscr;\": [0xd835, 0xdcaa],\n  \"Oslash\": 0xd8,\n  \"Oslash;\": 0xd8,\n  \"Otilde\": 0xd5,\n  \"Otilde;\": 0xd5,\n  \"Otimes;\": 0x2a37,\n  \"Ouml\": 0xd6,\n  \"Ouml;\": 0xd6,\n  \"OverBar;\": 0x203e,\n  \"OverBrace;\": 0x23de,\n  \"OverBracket;\": 0x23b4,\n  \"OverParenthesis;\": 0x23dc,\n  \"PartialD;\": 0x2202,\n  \"Pcy;\": 0x41f,\n  \"Pfr;\": [0xd835, 0xdd13],\n  \"Phi;\": 0x3a6,\n  \"Pi;\": 0x3a0,\n  \"PlusMinus;\": 0xb1,\n  \"Poincareplane;\": 0x210c,\n  \"Popf;\": 0x2119,\n  \"Pr;\": 0x2abb,\n  \"Precedes;\": 0x227a,\n  \"PrecedesEqual;\": 0x2aaf,\n  \"PrecedesSlantEqual;\": 0x227c,\n  \"PrecedesTilde;\": 0x227e,\n  \"Prime;\": 0x2033,\n  \"Product;\": 0x220f,\n  \"Proportion;\": 0x2237,\n  \"Proportional;\": 0x221d,\n  \"Pscr;\": [0xd835, 0xdcab],\n  \"Psi;\": 0x3a8,\n  \"QUOT\": 0x22,\n  \"QUOT;\": 0x22,\n  \"Qfr;\": [0xd835, 0xdd14],\n  \"Qopf;\": 0x211a,\n  \"Qscr;\": [0xd835, 0xdcac],\n  \"RBarr;\": 0x2910,\n  \"REG\": 0xae,\n  \"REG;\": 0xae,\n  \"Racute;\": 0x154,\n  \"Rang;\": 0x27eb,\n  \"Rarr;\": 0x21a0,\n  \"Rarrtl;\": 0x2916,\n  \"Rcaron;\": 0x158,\n  \"Rcedil;\": 0x156,\n  \"Rcy;\": 0x420,\n  \"Re;\": 0x211c,\n  \"ReverseElement;\": 0x220b,\n  \"ReverseEquilibrium;\": 0x21cb,\n  \"ReverseUpEquilibrium;\": 0x296f,\n  \"Rfr;\": 0x211c,\n  \"Rho;\": 0x3a1,\n  \"RightAngleBracket;\": 0x27e9,\n  \"RightArrow;\": 0x2192,\n  \"RightArrowBar;\": 0x21e5,\n  \"RightArrowLeftArrow;\": 0x21c4,\n  \"RightCeiling;\": 0x2309,\n  \"RightDoubleBracket;\": 0x27e7,\n  \"RightDownTeeVector;\": 0x295d,\n  \"RightDownVector;\": 0x21c2,\n  \"RightDownVectorBar;\": 0x2955,\n  \"RightFloor;\": 0x230b,\n  \"RightTee;\": 0x22a2,\n  \"RightTeeArrow;\": 0x21a6,\n  \"RightTeeVector;\": 0x295b,\n  \"RightTriangle;\": 0x22b3,\n  \"RightTriangleBar;\": 0x29d0,\n  \"RightTriangleEqual;\": 0x22b5,\n  \"RightUpDownVector;\": 0x294f,\n  \"RightUpTeeVector;\": 0x295c,\n  \"RightUpVector;\": 0x21be,\n  \"RightUpVectorBar;\": 0x2954,\n  \"RightVector;\": 0x21c0,\n  \"RightVectorBar;\": 0x2953,\n  \"Rightarrow;\": 0x21d2,\n  \"Ropf;\": 0x211d,\n  \"RoundImplies;\": 0x2970,\n  \"Rrightarrow;\": 0x21db,\n  \"Rscr;\": 0x211b,\n  \"Rsh;\": 0x21b1,\n  \"RuleDelayed;\": 0x29f4,\n  \"SHCHcy;\": 0x429,\n  \"SHcy;\": 0x428,\n  \"SOFTcy;\": 0x42c,\n  \"Sacute;\": 0x15a,\n  \"Sc;\": 0x2abc,\n  \"Scaron;\": 0x160,\n  \"Scedil;\": 0x15e,\n  \"Scirc;\": 0x15c,\n  \"Scy;\": 0x421,\n  \"Sfr;\": [0xd835, 0xdd16],\n  \"ShortDownArrow;\": 0x2193,\n  \"ShortLeftArrow;\": 0x2190,\n  \"ShortRightArrow;\": 0x2192,\n  \"ShortUpArrow;\": 0x2191,\n  \"Sigma;\": 0x3a3,\n  \"SmallCircle;\": 0x2218,\n  \"Sopf;\": [0xd835, 0xdd4a],\n  \"Sqrt;\": 0x221a,\n  \"Square;\": 0x25a1,\n  \"SquareIntersection;\": 0x2293,\n  \"SquareSubset;\": 0x228f,\n  \"SquareSubsetEqual;\": 0x2291,\n  \"SquareSuperset;\": 0x2290,\n  \"SquareSupersetEqual;\": 0x2292,\n  \"SquareUnion;\": 0x2294,\n  \"Sscr;\": [0xd835, 0xdcae],\n  \"Star;\": 0x22c6,\n  \"Sub;\": 0x22d0,\n  \"Subset;\": 0x22d0,\n  \"SubsetEqual;\": 0x2286,\n  \"Succeeds;\": 0x227b,\n  \"SucceedsEqual;\": 0x2ab0,\n  \"SucceedsSlantEqual;\": 0x227d,\n  \"SucceedsTilde;\": 0x227f,\n  \"SuchThat;\": 0x220b,\n  \"Sum;\": 0x2211,\n  \"Sup;\": 0x22d1,\n  \"Superset;\": 0x2283,\n  \"SupersetEqual;\": 0x2287,\n  \"Supset;\": 0x22d1,\n  \"THORN\": 0xde,\n  \"THORN;\": 0xde,\n  \"TRADE;\": 0x2122,\n  \"TSHcy;\": 0x40b,\n  \"TScy;\": 0x426,\n  \"Tab;\": 0x9,\n  \"Tau;\": 0x3a4,\n  \"Tcaron;\": 0x164,\n  \"Tcedil;\": 0x162,\n  \"Tcy;\": 0x422,\n  \"Tfr;\": [0xd835, 0xdd17],\n  \"Therefore;\": 0x2234,\n  \"Theta;\": 0x398,\n  \"ThickSpace;\": [0x205f, 0x200a],\n  \"ThinSpace;\": 0x2009,\n  \"Tilde;\": 0x223c,\n  \"TildeEqual;\": 0x2243,\n  \"TildeFullEqual;\": 0x2245,\n  \"TildeTilde;\": 0x2248,\n  \"Topf;\": [0xd835, 0xdd4b],\n  \"TripleDot;\": 0x20db,\n  \"Tscr;\": [0xd835, 0xdcaf],\n  \"Tstrok;\": 0x166,\n  \"Uacute\": 0xda,\n  \"Uacute;\": 0xda,\n  \"Uarr;\": 0x219f,\n  \"Uarrocir;\": 0x2949,\n  \"Ubrcy;\": 0x40e,\n  \"Ubreve;\": 0x16c,\n  \"Ucirc\": 0xdb,\n  \"Ucirc;\": 0xdb,\n  \"Ucy;\": 0x423,\n  \"Udblac;\": 0x170,\n  \"Ufr;\": [0xd835, 0xdd18],\n  \"Ugrave\": 0xd9,\n  \"Ugrave;\": 0xd9,\n  \"Umacr;\": 0x16a,\n  \"UnderBar;\": 0x5f,\n  \"UnderBrace;\": 0x23df,\n  \"UnderBracket;\": 0x23b5,\n  \"UnderParenthesis;\": 0x23dd,\n  \"Union;\": 0x22c3,\n  \"UnionPlus;\": 0x228e,\n  \"Uogon;\": 0x172,\n  \"Uopf;\": [0xd835, 0xdd4c],\n  \"UpArrow;\": 0x2191,\n  \"UpArrowBar;\": 0x2912,\n  \"UpArrowDownArrow;\": 0x21c5,\n  \"UpDownArrow;\": 0x2195,\n  \"UpEquilibrium;\": 0x296e,\n  \"UpTee;\": 0x22a5,\n  \"UpTeeArrow;\": 0x21a5,\n  \"Uparrow;\": 0x21d1,\n  \"Updownarrow;\": 0x21d5,\n  \"UpperLeftArrow;\": 0x2196,\n  \"UpperRightArrow;\": 0x2197,\n  \"Upsi;\": 0x3d2,\n  \"Upsilon;\": 0x3a5,\n  \"Uring;\": 0x16e,\n  \"Uscr;\": [0xd835, 0xdcb0],\n  \"Utilde;\": 0x168,\n  \"Uuml\": 0xdc,\n  \"Uuml;\": 0xdc,\n  \"VDash;\": 0x22ab,\n  \"Vbar;\": 0x2aeb,\n  \"Vcy;\": 0x412,\n  \"Vdash;\": 0x22a9,\n  \"Vdashl;\": 0x2ae6,\n  \"Vee;\": 0x22c1,\n  \"Verbar;\": 0x2016,\n  \"Vert;\": 0x2016,\n  \"VerticalBar;\": 0x2223,\n  \"VerticalLine;\": 0x7c,\n  \"VerticalSeparator;\": 0x2758,\n  \"VerticalTilde;\": 0x2240,\n  \"VeryThinSpace;\": 0x200a,\n  \"Vfr;\": [0xd835, 0xdd19],\n  \"Vopf;\": [0xd835, 0xdd4d],\n  \"Vscr;\": [0xd835, 0xdcb1],\n  \"Vvdash;\": 0x22aa,\n  \"Wcirc;\": 0x174,\n  \"Wedge;\": 0x22c0,\n  \"Wfr;\": [0xd835, 0xdd1a],\n  \"Wopf;\": [0xd835, 0xdd4e],\n  \"Wscr;\": [0xd835, 0xdcb2],\n  \"Xfr;\": [0xd835, 0xdd1b],\n  \"Xi;\": 0x39e,\n  \"Xopf;\": [0xd835, 0xdd4f],\n  \"Xscr;\": [0xd835, 0xdcb3],\n  \"YAcy;\": 0x42f,\n  \"YIcy;\": 0x407,\n  \"YUcy;\": 0x42e,\n  \"Yacute\": 0xdd,\n  \"Yacute;\": 0xdd,\n  \"Ycirc;\": 0x176,\n  \"Ycy;\": 0x42b,\n  \"Yfr;\": [0xd835, 0xdd1c],\n  \"Yopf;\": [0xd835, 0xdd50],\n  \"Yscr;\": [0xd835, 0xdcb4],\n  \"Yuml;\": 0x178,\n  \"ZHcy;\": 0x416,\n  \"Zacute;\": 0x179,\n  \"Zcaron;\": 0x17d,\n  \"Zcy;\": 0x417,\n  \"Zdot;\": 0x17b,\n  \"ZeroWidthSpace;\": 0x200b,\n  \"Zeta;\": 0x396,\n  \"Zfr;\": 0x2128,\n  \"Zopf;\": 0x2124,\n  \"Zscr;\": [0xd835, 0xdcb5],\n  \"aacute\": 0xe1,\n  \"aacute;\": 0xe1,\n  \"abreve;\": 0x103,\n  \"ac;\": 0x223e,\n  \"acE;\": [0x223e, 0x333],\n  \"acd;\": 0x223f,\n  \"acirc\": 0xe2,\n  \"acirc;\": 0xe2,\n  \"acute\": 0xb4,\n  \"acute;\": 0xb4,\n  \"acy;\": 0x430,\n  \"aelig\": 0xe6,\n  \"aelig;\": 0xe6,\n  \"af;\": 0x2061,\n  \"afr;\": [0xd835, 0xdd1e],\n  \"agrave\": 0xe0,\n  \"agrave;\": 0xe0,\n  \"alefsym;\": 0x2135,\n  \"aleph;\": 0x2135,\n  \"alpha;\": 0x3b1,\n  \"amacr;\": 0x101,\n  \"amalg;\": 0x2a3f,\n  \"amp\": 0x26,\n  \"amp;\": 0x26,\n  \"and;\": 0x2227,\n  \"andand;\": 0x2a55,\n  \"andd;\": 0x2a5c,\n  \"andslope;\": 0x2a58,\n  \"andv;\": 0x2a5a,\n  \"ang;\": 0x2220,\n  \"ange;\": 0x29a4,\n  \"angle;\": 0x2220,\n  \"angmsd;\": 0x2221,\n  \"angmsdaa;\": 0x29a8,\n  \"angmsdab;\": 0x29a9,\n  \"angmsdac;\": 0x29aa,\n  \"angmsdad;\": 0x29ab,\n  \"angmsdae;\": 0x29ac,\n  \"angmsdaf;\": 0x29ad,\n  \"angmsdag;\": 0x29ae,\n  \"angmsdah;\": 0x29af,\n  \"angrt;\": 0x221f,\n  \"angrtvb;\": 0x22be,\n  \"angrtvbd;\": 0x299d,\n  \"angsph;\": 0x2222,\n  \"angst;\": 0xc5,\n  \"angzarr;\": 0x237c,\n  \"aogon;\": 0x105,\n  \"aopf;\": [0xd835, 0xdd52],\n  \"ap;\": 0x2248,\n  \"apE;\": 0x2a70,\n  \"apacir;\": 0x2a6f,\n  \"ape;\": 0x224a,\n  \"apid;\": 0x224b,\n  \"apos;\": 0x27,\n  \"approx;\": 0x2248,\n  \"approxeq;\": 0x224a,\n  \"aring\": 0xe5,\n  \"aring;\": 0xe5,\n  \"ascr;\": [0xd835, 0xdcb6],\n  \"ast;\": 0x2a,\n  \"asymp;\": 0x2248,\n  \"asympeq;\": 0x224d,\n  \"atilde\": 0xe3,\n  \"atilde;\": 0xe3,\n  \"auml\": 0xe4,\n  \"auml;\": 0xe4,\n  \"awconint;\": 0x2233,\n  \"awint;\": 0x2a11,\n  \"bNot;\": 0x2aed,\n  \"backcong;\": 0x224c,\n  \"backepsilon;\": 0x3f6,\n  \"backprime;\": 0x2035,\n  \"backsim;\": 0x223d,\n  \"backsimeq;\": 0x22cd,\n  \"barvee;\": 0x22bd,\n  \"barwed;\": 0x2305,\n  \"barwedge;\": 0x2305,\n  \"bbrk;\": 0x23b5,\n  \"bbrktbrk;\": 0x23b6,\n  \"bcong;\": 0x224c,\n  \"bcy;\": 0x431,\n  \"bdquo;\": 0x201e,\n  \"becaus;\": 0x2235,\n  \"because;\": 0x2235,\n  \"bemptyv;\": 0x29b0,\n  \"bepsi;\": 0x3f6,\n  \"bernou;\": 0x212c,\n  \"beta;\": 0x3b2,\n  \"beth;\": 0x2136,\n  \"between;\": 0x226c,\n  \"bfr;\": [0xd835, 0xdd1f],\n  \"bigcap;\": 0x22c2,\n  \"bigcirc;\": 0x25ef,\n  \"bigcup;\": 0x22c3,\n  \"bigodot;\": 0x2a00,\n  \"bigoplus;\": 0x2a01,\n  \"bigotimes;\": 0x2a02,\n  \"bigsqcup;\": 0x2a06,\n  \"bigstar;\": 0x2605,\n  \"bigtriangledown;\": 0x25bd,\n  \"bigtriangleup;\": 0x25b3,\n  \"biguplus;\": 0x2a04,\n  \"bigvee;\": 0x22c1,\n  \"bigwedge;\": 0x22c0,\n  \"bkarow;\": 0x290d,\n  \"blacklozenge;\": 0x29eb,\n  \"blacksquare;\": 0x25aa,\n  \"blacktriangle;\": 0x25b4,\n  \"blacktriangledown;\": 0x25be,\n  \"blacktriangleleft;\": 0x25c2,\n  \"blacktriangleright;\": 0x25b8,\n  \"blank;\": 0x2423,\n  \"blk12;\": 0x2592,\n  \"blk14;\": 0x2591,\n  \"blk34;\": 0x2593,\n  \"block;\": 0x2588,\n  \"bne;\": [0x3d, 0x20e5],\n  \"bnequiv;\": [0x2261, 0x20e5],\n  \"bnot;\": 0x2310,\n  \"bopf;\": [0xd835, 0xdd53],\n  \"bot;\": 0x22a5,\n  \"bottom;\": 0x22a5,\n  \"bowtie;\": 0x22c8,\n  \"boxDL;\": 0x2557,\n  \"boxDR;\": 0x2554,\n  \"boxDl;\": 0x2556,\n  \"boxDr;\": 0x2553,\n  \"boxH;\": 0x2550,\n  \"boxHD;\": 0x2566,\n  \"boxHU;\": 0x2569,\n  \"boxHd;\": 0x2564,\n  \"boxHu;\": 0x2567,\n  \"boxUL;\": 0x255d,\n  \"boxUR;\": 0x255a,\n  \"boxUl;\": 0x255c,\n  \"boxUr;\": 0x2559,\n  \"boxV;\": 0x2551,\n  \"boxVH;\": 0x256c,\n  \"boxVL;\": 0x2563,\n  \"boxVR;\": 0x2560,\n  \"boxVh;\": 0x256b,\n  \"boxVl;\": 0x2562,\n  \"boxVr;\": 0x255f,\n  \"boxbox;\": 0x29c9,\n  \"boxdL;\": 0x2555,\n  \"boxdR;\": 0x2552,\n  \"boxdl;\": 0x2510,\n  \"boxdr;\": 0x250c,\n  \"boxh;\": 0x2500,\n  \"boxhD;\": 0x2565,\n  \"boxhU;\": 0x2568,\n  \"boxhd;\": 0x252c,\n  \"boxhu;\": 0x2534,\n  \"boxminus;\": 0x229f,\n  \"boxplus;\": 0x229e,\n  \"boxtimes;\": 0x22a0,\n  \"boxuL;\": 0x255b,\n  \"boxuR;\": 0x2558,\n  \"boxul;\": 0x2518,\n  \"boxur;\": 0x2514,\n  \"boxv;\": 0x2502,\n  \"boxvH;\": 0x256a,\n  \"boxvL;\": 0x2561,\n  \"boxvR;\": 0x255e,\n  \"boxvh;\": 0x253c,\n  \"boxvl;\": 0x2524,\n  \"boxvr;\": 0x251c,\n  \"bprime;\": 0x2035,\n  \"breve;\": 0x2d8,\n  \"brvbar\": 0xa6,\n  \"brvbar;\": 0xa6,\n  \"bscr;\": [0xd835, 0xdcb7],\n  \"bsemi;\": 0x204f,\n  \"bsim;\": 0x223d,\n  \"bsime;\": 0x22cd,\n  \"bsol;\": 0x5c,\n  \"bsolb;\": 0x29c5,\n  \"bsolhsub;\": 0x27c8,\n  \"bull;\": 0x2022,\n  \"bullet;\": 0x2022,\n  \"bump;\": 0x224e,\n  \"bumpE;\": 0x2aae,\n  \"bumpe;\": 0x224f,\n  \"bumpeq;\": 0x224f,\n  \"cacute;\": 0x107,\n  \"cap;\": 0x2229,\n  \"capand;\": 0x2a44,\n  \"capbrcup;\": 0x2a49,\n  \"capcap;\": 0x2a4b,\n  \"capcup;\": 0x2a47,\n  \"capdot;\": 0x2a40,\n  \"caps;\": [0x2229, 0xfe00],\n  \"caret;\": 0x2041,\n  \"caron;\": 0x2c7,\n  \"ccaps;\": 0x2a4d,\n  \"ccaron;\": 0x10d,\n  \"ccedil\": 0xe7,\n  \"ccedil;\": 0xe7,\n  \"ccirc;\": 0x109,\n  \"ccups;\": 0x2a4c,\n  \"ccupssm;\": 0x2a50,\n  \"cdot;\": 0x10b,\n  \"cedil\": 0xb8,\n  \"cedil;\": 0xb8,\n  \"cemptyv;\": 0x29b2,\n  \"cent\": 0xa2,\n  \"cent;\": 0xa2,\n  \"centerdot;\": 0xb7,\n  \"cfr;\": [0xd835, 0xdd20],\n  \"chcy;\": 0x447,\n  \"check;\": 0x2713,\n  \"checkmark;\": 0x2713,\n  \"chi;\": 0x3c7,\n  \"cir;\": 0x25cb,\n  \"cirE;\": 0x29c3,\n  \"circ;\": 0x2c6,\n  \"circeq;\": 0x2257,\n  \"circlearrowleft;\": 0x21ba,\n  \"circlearrowright;\": 0x21bb,\n  \"circledR;\": 0xae,\n  \"circledS;\": 0x24c8,\n  \"circledast;\": 0x229b,\n  \"circledcirc;\": 0x229a,\n  \"circleddash;\": 0x229d,\n  \"cire;\": 0x2257,\n  \"cirfnint;\": 0x2a10,\n  \"cirmid;\": 0x2aef,\n  \"cirscir;\": 0x29c2,\n  \"clubs;\": 0x2663,\n  \"clubsuit;\": 0x2663,\n  \"colon;\": 0x3a,\n  \"colone;\": 0x2254,\n  \"coloneq;\": 0x2254,\n  \"comma;\": 0x2c,\n  \"commat;\": 0x40,\n  \"comp;\": 0x2201,\n  \"compfn;\": 0x2218,\n  \"complement;\": 0x2201,\n  \"complexes;\": 0x2102,\n  \"cong;\": 0x2245,\n  \"congdot;\": 0x2a6d,\n  \"conint;\": 0x222e,\n  \"copf;\": [0xd835, 0xdd54],\n  \"coprod;\": 0x2210,\n  \"copy\": 0xa9,\n  \"copy;\": 0xa9,\n  \"copysr;\": 0x2117,\n  \"crarr;\": 0x21b5,\n  \"cross;\": 0x2717,\n  \"cscr;\": [0xd835, 0xdcb8],\n  \"csub;\": 0x2acf,\n  \"csube;\": 0x2ad1,\n  \"csup;\": 0x2ad0,\n  \"csupe;\": 0x2ad2,\n  \"ctdot;\": 0x22ef,\n  \"cudarrl;\": 0x2938,\n  \"cudarrr;\": 0x2935,\n  \"cuepr;\": 0x22de,\n  \"cuesc;\": 0x22df,\n  \"cularr;\": 0x21b6,\n  \"cularrp;\": 0x293d,\n  \"cup;\": 0x222a,\n  \"cupbrcap;\": 0x2a48,\n  \"cupcap;\": 0x2a46,\n  \"cupcup;\": 0x2a4a,\n  \"cupdot;\": 0x228d,\n  \"cupor;\": 0x2a45,\n  \"cups;\": [0x222a, 0xfe00],\n  \"curarr;\": 0x21b7,\n  \"curarrm;\": 0x293c,\n  \"curlyeqprec;\": 0x22de,\n  \"curlyeqsucc;\": 0x22df,\n  \"curlyvee;\": 0x22ce,\n  \"curlywedge;\": 0x22cf,\n  \"curren\": 0xa4,\n  \"curren;\": 0xa4,\n  \"curvearrowleft;\": 0x21b6,\n  \"curvearrowright;\": 0x21b7,\n  \"cuvee;\": 0x22ce,\n  \"cuwed;\": 0x22cf,\n  \"cwconint;\": 0x2232,\n  \"cwint;\": 0x2231,\n  \"cylcty;\": 0x232d,\n  \"dArr;\": 0x21d3,\n  \"dHar;\": 0x2965,\n  \"dagger;\": 0x2020,\n  \"daleth;\": 0x2138,\n  \"darr;\": 0x2193,\n  \"dash;\": 0x2010,\n  \"dashv;\": 0x22a3,\n  \"dbkarow;\": 0x290f,\n  \"dblac;\": 0x2dd,\n  \"dcaron;\": 0x10f,\n  \"dcy;\": 0x434,\n  \"dd;\": 0x2146,\n  \"ddagger;\": 0x2021,\n  \"ddarr;\": 0x21ca,\n  \"ddotseq;\": 0x2a77,\n  \"deg\": 0xb0,\n  \"deg;\": 0xb0,\n  \"delta;\": 0x3b4,\n  \"demptyv;\": 0x29b1,\n  \"dfisht;\": 0x297f,\n  \"dfr;\": [0xd835, 0xdd21],\n  \"dharl;\": 0x21c3,\n  \"dharr;\": 0x21c2,\n  \"diam;\": 0x22c4,\n  \"diamond;\": 0x22c4,\n  \"diamondsuit;\": 0x2666,\n  \"diams;\": 0x2666,\n  \"die;\": 0xa8,\n  \"digamma;\": 0x3dd,\n  \"disin;\": 0x22f2,\n  \"div;\": 0xf7,\n  \"divide\": 0xf7,\n  \"divide;\": 0xf7,\n  \"divideontimes;\": 0x22c7,\n  \"divonx;\": 0x22c7,\n  \"djcy;\": 0x452,\n  \"dlcorn;\": 0x231e,\n  \"dlcrop;\": 0x230d,\n  \"dollar;\": 0x24,\n  \"dopf;\": [0xd835, 0xdd55],\n  \"dot;\": 0x2d9,\n  \"doteq;\": 0x2250,\n  \"doteqdot;\": 0x2251,\n  \"dotminus;\": 0x2238,\n  \"dotplus;\": 0x2214,\n  \"dotsquare;\": 0x22a1,\n  \"doublebarwedge;\": 0x2306,\n  \"downarrow;\": 0x2193,\n  \"downdownarrows;\": 0x21ca,\n  \"downharpoonleft;\": 0x21c3,\n  \"downharpoonright;\": 0x21c2,\n  \"drbkarow;\": 0x2910,\n  \"drcorn;\": 0x231f,\n  \"drcrop;\": 0x230c,\n  \"dscr;\": [0xd835, 0xdcb9],\n  \"dscy;\": 0x455,\n  \"dsol;\": 0x29f6,\n  \"dstrok;\": 0x111,\n  \"dtdot;\": 0x22f1,\n  \"dtri;\": 0x25bf,\n  \"dtrif;\": 0x25be,\n  \"duarr;\": 0x21f5,\n  \"duhar;\": 0x296f,\n  \"dwangle;\": 0x29a6,\n  \"dzcy;\": 0x45f,\n  \"dzigrarr;\": 0x27ff,\n  \"eDDot;\": 0x2a77,\n  \"eDot;\": 0x2251,\n  \"eacute\": 0xe9,\n  \"eacute;\": 0xe9,\n  \"easter;\": 0x2a6e,\n  \"ecaron;\": 0x11b,\n  \"ecir;\": 0x2256,\n  \"ecirc\": 0xea,\n  \"ecirc;\": 0xea,\n  \"ecolon;\": 0x2255,\n  \"ecy;\": 0x44d,\n  \"edot;\": 0x117,\n  \"ee;\": 0x2147,\n  \"efDot;\": 0x2252,\n  \"efr;\": [0xd835, 0xdd22],\n  \"eg;\": 0x2a9a,\n  \"egrave\": 0xe8,\n  \"egrave;\": 0xe8,\n  \"egs;\": 0x2a96,\n  \"egsdot;\": 0x2a98,\n  \"el;\": 0x2a99,\n  \"elinters;\": 0x23e7,\n  \"ell;\": 0x2113,\n  \"els;\": 0x2a95,\n  \"elsdot;\": 0x2a97,\n  \"emacr;\": 0x113,\n  \"empty;\": 0x2205,\n  \"emptyset;\": 0x2205,\n  \"emptyv;\": 0x2205,\n  \"emsp13;\": 0x2004,\n  \"emsp14;\": 0x2005,\n  \"emsp;\": 0x2003,\n  \"eng;\": 0x14b,\n  \"ensp;\": 0x2002,\n  \"eogon;\": 0x119,\n  \"eopf;\": [0xd835, 0xdd56],\n  \"epar;\": 0x22d5,\n  \"eparsl;\": 0x29e3,\n  \"eplus;\": 0x2a71,\n  \"epsi;\": 0x3b5,\n  \"epsilon;\": 0x3b5,\n  \"epsiv;\": 0x3f5,\n  \"eqcirc;\": 0x2256,\n  \"eqcolon;\": 0x2255,\n  \"eqsim;\": 0x2242,\n  \"eqslantgtr;\": 0x2a96,\n  \"eqslantless;\": 0x2a95,\n  \"equals;\": 0x3d,\n  \"equest;\": 0x225f,\n  \"equiv;\": 0x2261,\n  \"equivDD;\": 0x2a78,\n  \"eqvparsl;\": 0x29e5,\n  \"erDot;\": 0x2253,\n  \"erarr;\": 0x2971,\n  \"escr;\": 0x212f,\n  \"esdot;\": 0x2250,\n  \"esim;\": 0x2242,\n  \"eta;\": 0x3b7,\n  \"eth\": 0xf0,\n  \"eth;\": 0xf0,\n  \"euml\": 0xeb,\n  \"euml;\": 0xeb,\n  \"euro;\": 0x20ac,\n  \"excl;\": 0x21,\n  \"exist;\": 0x2203,\n  \"expectation;\": 0x2130,\n  \"exponentiale;\": 0x2147,\n  \"fallingdotseq;\": 0x2252,\n  \"fcy;\": 0x444,\n  \"female;\": 0x2640,\n  \"ffilig;\": 0xfb03,\n  \"fflig;\": 0xfb00,\n  \"ffllig;\": 0xfb04,\n  \"ffr;\": [0xd835, 0xdd23],\n  \"filig;\": 0xfb01,\n  \"fjlig;\": [0x66, 0x6a],\n  \"flat;\": 0x266d,\n  \"fllig;\": 0xfb02,\n  \"fltns;\": 0x25b1,\n  \"fnof;\": 0x192,\n  \"fopf;\": [0xd835, 0xdd57],\n  \"forall;\": 0x2200,\n  \"fork;\": 0x22d4,\n  \"forkv;\": 0x2ad9,\n  \"fpartint;\": 0x2a0d,\n  \"frac12\": 0xbd,\n  \"frac12;\": 0xbd,\n  \"frac13;\": 0x2153,\n  \"frac14\": 0xbc,\n  \"frac14;\": 0xbc,\n  \"frac15;\": 0x2155,\n  \"frac16;\": 0x2159,\n  \"frac18;\": 0x215b,\n  \"frac23;\": 0x2154,\n  \"frac25;\": 0x2156,\n  \"frac34\": 0xbe,\n  \"frac34;\": 0xbe,\n  \"frac35;\": 0x2157,\n  \"frac38;\": 0x215c,\n  \"frac45;\": 0x2158,\n  \"frac56;\": 0x215a,\n  \"frac58;\": 0x215d,\n  \"frac78;\": 0x215e,\n  \"frasl;\": 0x2044,\n  \"frown;\": 0x2322,\n  \"fscr;\": [0xd835, 0xdcbb],\n  \"gE;\": 0x2267,\n  \"gEl;\": 0x2a8c,\n  \"gacute;\": 0x1f5,\n  \"gamma;\": 0x3b3,\n  \"gammad;\": 0x3dd,\n  \"gap;\": 0x2a86,\n  \"gbreve;\": 0x11f,\n  \"gcirc;\": 0x11d,\n  \"gcy;\": 0x433,\n  \"gdot;\": 0x121,\n  \"ge;\": 0x2265,\n  \"gel;\": 0x22db,\n  \"geq;\": 0x2265,\n  \"geqq;\": 0x2267,\n  \"geqslant;\": 0x2a7e,\n  \"ges;\": 0x2a7e,\n  \"gescc;\": 0x2aa9,\n  \"gesdot;\": 0x2a80,\n  \"gesdoto;\": 0x2a82,\n  \"gesdotol;\": 0x2a84,\n  \"gesl;\": [0x22db, 0xfe00],\n  \"gesles;\": 0x2a94,\n  \"gfr;\": [0xd835, 0xdd24],\n  \"gg;\": 0x226b,\n  \"ggg;\": 0x22d9,\n  \"gimel;\": 0x2137,\n  \"gjcy;\": 0x453,\n  \"gl;\": 0x2277,\n  \"glE;\": 0x2a92,\n  \"gla;\": 0x2aa5,\n  \"glj;\": 0x2aa4,\n  \"gnE;\": 0x2269,\n  \"gnap;\": 0x2a8a,\n  \"gnapprox;\": 0x2a8a,\n  \"gne;\": 0x2a88,\n  \"gneq;\": 0x2a88,\n  \"gneqq;\": 0x2269,\n  \"gnsim;\": 0x22e7,\n  \"gopf;\": [0xd835, 0xdd58],\n  \"grave;\": 0x60,\n  \"gscr;\": 0x210a,\n  \"gsim;\": 0x2273,\n  \"gsime;\": 0x2a8e,\n  \"gsiml;\": 0x2a90,\n  \"gt\": 0x3e,\n  \"gt;\": 0x3e,\n  \"gtcc;\": 0x2aa7,\n  \"gtcir;\": 0x2a7a,\n  \"gtdot;\": 0x22d7,\n  \"gtlPar;\": 0x2995,\n  \"gtquest;\": 0x2a7c,\n  \"gtrapprox;\": 0x2a86,\n  \"gtrarr;\": 0x2978,\n  \"gtrdot;\": 0x22d7,\n  \"gtreqless;\": 0x22db,\n  \"gtreqqless;\": 0x2a8c,\n  \"gtrless;\": 0x2277,\n  \"gtrsim;\": 0x2273,\n  \"gvertneqq;\": [0x2269, 0xfe00],\n  \"gvnE;\": [0x2269, 0xfe00],\n  \"hArr;\": 0x21d4,\n  \"hairsp;\": 0x200a,\n  \"half;\": 0xbd,\n  \"hamilt;\": 0x210b,\n  \"hardcy;\": 0x44a,\n  \"harr;\": 0x2194,\n  \"harrcir;\": 0x2948,\n  \"harrw;\": 0x21ad,\n  \"hbar;\": 0x210f,\n  \"hcirc;\": 0x125,\n  \"hearts;\": 0x2665,\n  \"heartsuit;\": 0x2665,\n  \"hellip;\": 0x2026,\n  \"hercon;\": 0x22b9,\n  \"hfr;\": [0xd835, 0xdd25],\n  \"hksearow;\": 0x2925,\n  \"hkswarow;\": 0x2926,\n  \"hoarr;\": 0x21ff,\n  \"homtht;\": 0x223b,\n  \"hookleftarrow;\": 0x21a9,\n  \"hookrightarrow;\": 0x21aa,\n  \"hopf;\": [0xd835, 0xdd59],\n  \"horbar;\": 0x2015,\n  \"hscr;\": [0xd835, 0xdcbd],\n  \"hslash;\": 0x210f,\n  \"hstrok;\": 0x127,\n  \"hybull;\": 0x2043,\n  \"hyphen;\": 0x2010,\n  \"iacute\": 0xed,\n  \"iacute;\": 0xed,\n  \"ic;\": 0x2063,\n  \"icirc\": 0xee,\n  \"icirc;\": 0xee,\n  \"icy;\": 0x438,\n  \"iecy;\": 0x435,\n  \"iexcl\": 0xa1,\n  \"iexcl;\": 0xa1,\n  \"iff;\": 0x21d4,\n  \"ifr;\": [0xd835, 0xdd26],\n  \"igrave\": 0xec,\n  \"igrave;\": 0xec,\n  \"ii;\": 0x2148,\n  \"iiiint;\": 0x2a0c,\n  \"iiint;\": 0x222d,\n  \"iinfin;\": 0x29dc,\n  \"iiota;\": 0x2129,\n  \"ijlig;\": 0x133,\n  \"imacr;\": 0x12b,\n  \"image;\": 0x2111,\n  \"imagline;\": 0x2110,\n  \"imagpart;\": 0x2111,\n  \"imath;\": 0x131,\n  \"imof;\": 0x22b7,\n  \"imped;\": 0x1b5,\n  \"in;\": 0x2208,\n  \"incare;\": 0x2105,\n  \"infin;\": 0x221e,\n  \"infintie;\": 0x29dd,\n  \"inodot;\": 0x131,\n  \"int;\": 0x222b,\n  \"intcal;\": 0x22ba,\n  \"integers;\": 0x2124,\n  \"intercal;\": 0x22ba,\n  \"intlarhk;\": 0x2a17,\n  \"intprod;\": 0x2a3c,\n  \"iocy;\": 0x451,\n  \"iogon;\": 0x12f,\n  \"iopf;\": [0xd835, 0xdd5a],\n  \"iota;\": 0x3b9,\n  \"iprod;\": 0x2a3c,\n  \"iquest\": 0xbf,\n  \"iquest;\": 0xbf,\n  \"iscr;\": [0xd835, 0xdcbe],\n  \"isin;\": 0x2208,\n  \"isinE;\": 0x22f9,\n  \"isindot;\": 0x22f5,\n  \"isins;\": 0x22f4,\n  \"isinsv;\": 0x22f3,\n  \"isinv;\": 0x2208,\n  \"it;\": 0x2062,\n  \"itilde;\": 0x129,\n  \"iukcy;\": 0x456,\n  \"iuml\": 0xef,\n  \"iuml;\": 0xef,\n  \"jcirc;\": 0x135,\n  \"jcy;\": 0x439,\n  \"jfr;\": [0xd835, 0xdd27],\n  \"jmath;\": 0x237,\n  \"jopf;\": [0xd835, 0xdd5b],\n  \"jscr;\": [0xd835, 0xdcbf],\n  \"jsercy;\": 0x458,\n  \"jukcy;\": 0x454,\n  \"kappa;\": 0x3ba,\n  \"kappav;\": 0x3f0,\n  \"kcedil;\": 0x137,\n  \"kcy;\": 0x43a,\n  \"kfr;\": [0xd835, 0xdd28],\n  \"kgreen;\": 0x138,\n  \"khcy;\": 0x445,\n  \"kjcy;\": 0x45c,\n  \"kopf;\": [0xd835, 0xdd5c],\n  \"kscr;\": [0xd835, 0xdcc0],\n  \"lAarr;\": 0x21da,\n  \"lArr;\": 0x21d0,\n  \"lAtail;\": 0x291b,\n  \"lBarr;\": 0x290e,\n  \"lE;\": 0x2266,\n  \"lEg;\": 0x2a8b,\n  \"lHar;\": 0x2962,\n  \"lacute;\": 0x13a,\n  \"laemptyv;\": 0x29b4,\n  \"lagran;\": 0x2112,\n  \"lambda;\": 0x3bb,\n  \"lang;\": 0x27e8,\n  \"langd;\": 0x2991,\n  \"langle;\": 0x27e8,\n  \"lap;\": 0x2a85,\n  \"laquo\": 0xab,\n  \"laquo;\": 0xab,\n  \"larr;\": 0x2190,\n  \"larrb;\": 0x21e4,\n  \"larrbfs;\": 0x291f,\n  \"larrfs;\": 0x291d,\n  \"larrhk;\": 0x21a9,\n  \"larrlp;\": 0x21ab,\n  \"larrpl;\": 0x2939,\n  \"larrsim;\": 0x2973,\n  \"larrtl;\": 0x21a2,\n  \"lat;\": 0x2aab,\n  \"latail;\": 0x2919,\n  \"late;\": 0x2aad,\n  \"lates;\": [0x2aad, 0xfe00],\n  \"lbarr;\": 0x290c,\n  \"lbbrk;\": 0x2772,\n  \"lbrace;\": 0x7b,\n  \"lbrack;\": 0x5b,\n  \"lbrke;\": 0x298b,\n  \"lbrksld;\": 0x298f,\n  \"lbrkslu;\": 0x298d,\n  \"lcaron;\": 0x13e,\n  \"lcedil;\": 0x13c,\n  \"lceil;\": 0x2308,\n  \"lcub;\": 0x7b,\n  \"lcy;\": 0x43b,\n  \"ldca;\": 0x2936,\n  \"ldquo;\": 0x201c,\n  \"ldquor;\": 0x201e,\n  \"ldrdhar;\": 0x2967,\n  \"ldrushar;\": 0x294b,\n  \"ldsh;\": 0x21b2,\n  \"le;\": 0x2264,\n  \"leftarrow;\": 0x2190,\n  \"leftarrowtail;\": 0x21a2,\n  \"leftharpoondown;\": 0x21bd,\n  \"leftharpoonup;\": 0x21bc,\n  \"leftleftarrows;\": 0x21c7,\n  \"leftrightarrow;\": 0x2194,\n  \"leftrightarrows;\": 0x21c6,\n  \"leftrightharpoons;\": 0x21cb,\n  \"leftrightsquigarrow;\": 0x21ad,\n  \"leftthreetimes;\": 0x22cb,\n  \"leg;\": 0x22da,\n  \"leq;\": 0x2264,\n  \"leqq;\": 0x2266,\n  \"leqslant;\": 0x2a7d,\n  \"les;\": 0x2a7d,\n  \"lescc;\": 0x2aa8,\n  \"lesdot;\": 0x2a7f,\n  \"lesdoto;\": 0x2a81,\n  \"lesdotor;\": 0x2a83,\n  \"lesg;\": [0x22da, 0xfe00],\n  \"lesges;\": 0x2a93,\n  \"lessapprox;\": 0x2a85,\n  \"lessdot;\": 0x22d6,\n  \"lesseqgtr;\": 0x22da,\n  \"lesseqqgtr;\": 0x2a8b,\n  \"lessgtr;\": 0x2276,\n  \"lesssim;\": 0x2272,\n  \"lfisht;\": 0x297c,\n  \"lfloor;\": 0x230a,\n  \"lfr;\": [0xd835, 0xdd29],\n  \"lg;\": 0x2276,\n  \"lgE;\": 0x2a91,\n  \"lhard;\": 0x21bd,\n  \"lharu;\": 0x21bc,\n  \"lharul;\": 0x296a,\n  \"lhblk;\": 0x2584,\n  \"ljcy;\": 0x459,\n  \"ll;\": 0x226a,\n  \"llarr;\": 0x21c7,\n  \"llcorner;\": 0x231e,\n  \"llhard;\": 0x296b,\n  \"lltri;\": 0x25fa,\n  \"lmidot;\": 0x140,\n  \"lmoust;\": 0x23b0,\n  \"lmoustache;\": 0x23b0,\n  \"lnE;\": 0x2268,\n  \"lnap;\": 0x2a89,\n  \"lnapprox;\": 0x2a89,\n  \"lne;\": 0x2a87,\n  \"lneq;\": 0x2a87,\n  \"lneqq;\": 0x2268,\n  \"lnsim;\": 0x22e6,\n  \"loang;\": 0x27ec,\n  \"loarr;\": 0x21fd,\n  \"lobrk;\": 0x27e6,\n  \"longleftarrow;\": 0x27f5,\n  \"longleftrightarrow;\": 0x27f7,\n  \"longmapsto;\": 0x27fc,\n  \"longrightarrow;\": 0x27f6,\n  \"looparrowleft;\": 0x21ab,\n  \"looparrowright;\": 0x21ac,\n  \"lopar;\": 0x2985,\n  \"lopf;\": [0xd835, 0xdd5d],\n  \"loplus;\": 0x2a2d,\n  \"lotimes;\": 0x2a34,\n  \"lowast;\": 0x2217,\n  \"lowbar;\": 0x5f,\n  \"loz;\": 0x25ca,\n  \"lozenge;\": 0x25ca,\n  \"lozf;\": 0x29eb,\n  \"lpar;\": 0x28,\n  \"lparlt;\": 0x2993,\n  \"lrarr;\": 0x21c6,\n  \"lrcorner;\": 0x231f,\n  \"lrhar;\": 0x21cb,\n  \"lrhard;\": 0x296d,\n  \"lrm;\": 0x200e,\n  \"lrtri;\": 0x22bf,\n  \"lsaquo;\": 0x2039,\n  \"lscr;\": [0xd835, 0xdcc1],\n  \"lsh;\": 0x21b0,\n  \"lsim;\": 0x2272,\n  \"lsime;\": 0x2a8d,\n  \"lsimg;\": 0x2a8f,\n  \"lsqb;\": 0x5b,\n  \"lsquo;\": 0x2018,\n  \"lsquor;\": 0x201a,\n  \"lstrok;\": 0x142,\n  \"lt\": 0x3c,\n  \"lt;\": 0x3c,\n  \"ltcc;\": 0x2aa6,\n  \"ltcir;\": 0x2a79,\n  \"ltdot;\": 0x22d6,\n  \"lthree;\": 0x22cb,\n  \"ltimes;\": 0x22c9,\n  \"ltlarr;\": 0x2976,\n  \"ltquest;\": 0x2a7b,\n  \"ltrPar;\": 0x2996,\n  \"ltri;\": 0x25c3,\n  \"ltrie;\": 0x22b4,\n  \"ltrif;\": 0x25c2,\n  \"lurdshar;\": 0x294a,\n  \"luruhar;\": 0x2966,\n  \"lvertneqq;\": [0x2268, 0xfe00],\n  \"lvnE;\": [0x2268, 0xfe00],\n  \"mDDot;\": 0x223a,\n  \"macr\": 0xaf,\n  \"macr;\": 0xaf,\n  \"male;\": 0x2642,\n  \"malt;\": 0x2720,\n  \"maltese;\": 0x2720,\n  \"map;\": 0x21a6,\n  \"mapsto;\": 0x21a6,\n  \"mapstodown;\": 0x21a7,\n  \"mapstoleft;\": 0x21a4,\n  \"mapstoup;\": 0x21a5,\n  \"marker;\": 0x25ae,\n  \"mcomma;\": 0x2a29,\n  \"mcy;\": 0x43c,\n  \"mdash;\": 0x2014,\n  \"measuredangle;\": 0x2221,\n  \"mfr;\": [0xd835, 0xdd2a],\n  \"mho;\": 0x2127,\n  \"micro\": 0xb5,\n  \"micro;\": 0xb5,\n  \"mid;\": 0x2223,\n  \"midast;\": 0x2a,\n  \"midcir;\": 0x2af0,\n  \"middot\": 0xb7,\n  \"middot;\": 0xb7,\n  \"minus;\": 0x2212,\n  \"minusb;\": 0x229f,\n  \"minusd;\": 0x2238,\n  \"minusdu;\": 0x2a2a,\n  \"mlcp;\": 0x2adb,\n  \"mldr;\": 0x2026,\n  \"mnplus;\": 0x2213,\n  \"models;\": 0x22a7,\n  \"mopf;\": [0xd835, 0xdd5e],\n  \"mp;\": 0x2213,\n  \"mscr;\": [0xd835, 0xdcc2],\n  \"mstpos;\": 0x223e,\n  \"mu;\": 0x3bc,\n  \"multimap;\": 0x22b8,\n  \"mumap;\": 0x22b8,\n  \"nGg;\": [0x22d9, 0x338],\n  \"nGt;\": [0x226b, 0x20d2],\n  \"nGtv;\": [0x226b, 0x338],\n  \"nLeftarrow;\": 0x21cd,\n  \"nLeftrightarrow;\": 0x21ce,\n  \"nLl;\": [0x22d8, 0x338],\n  \"nLt;\": [0x226a, 0x20d2],\n  \"nLtv;\": [0x226a, 0x338],\n  \"nRightarrow;\": 0x21cf,\n  \"nVDash;\": 0x22af,\n  \"nVdash;\": 0x22ae,\n  \"nabla;\": 0x2207,\n  \"nacute;\": 0x144,\n  \"nang;\": [0x2220, 0x20d2],\n  \"nap;\": 0x2249,\n  \"napE;\": [0x2a70, 0x338],\n  \"napid;\": [0x224b, 0x338],\n  \"napos;\": 0x149,\n  \"napprox;\": 0x2249,\n  \"natur;\": 0x266e,\n  \"natural;\": 0x266e,\n  \"naturals;\": 0x2115,\n  \"nbsp\": 0xa0,\n  \"nbsp;\": 0xa0,\n  \"nbump;\": [0x224e, 0x338],\n  \"nbumpe;\": [0x224f, 0x338],\n  \"ncap;\": 0x2a43,\n  \"ncaron;\": 0x148,\n  \"ncedil;\": 0x146,\n  \"ncong;\": 0x2247,\n  \"ncongdot;\": [0x2a6d, 0x338],\n  \"ncup;\": 0x2a42,\n  \"ncy;\": 0x43d,\n  \"ndash;\": 0x2013,\n  \"ne;\": 0x2260,\n  \"neArr;\": 0x21d7,\n  \"nearhk;\": 0x2924,\n  \"nearr;\": 0x2197,\n  \"nearrow;\": 0x2197,\n  \"nedot;\": [0x2250, 0x338],\n  \"nequiv;\": 0x2262,\n  \"nesear;\": 0x2928,\n  \"nesim;\": [0x2242, 0x338],\n  \"nexist;\": 0x2204,\n  \"nexists;\": 0x2204,\n  \"nfr;\": [0xd835, 0xdd2b],\n  \"ngE;\": [0x2267, 0x338],\n  \"nge;\": 0x2271,\n  \"ngeq;\": 0x2271,\n  \"ngeqq;\": [0x2267, 0x338],\n  \"ngeqslant;\": [0x2a7e, 0x338],\n  \"nges;\": [0x2a7e, 0x338],\n  \"ngsim;\": 0x2275,\n  \"ngt;\": 0x226f,\n  \"ngtr;\": 0x226f,\n  \"nhArr;\": 0x21ce,\n  \"nharr;\": 0x21ae,\n  \"nhpar;\": 0x2af2,\n  \"ni;\": 0x220b,\n  \"nis;\": 0x22fc,\n  \"nisd;\": 0x22fa,\n  \"niv;\": 0x220b,\n  \"njcy;\": 0x45a,\n  \"nlArr;\": 0x21cd,\n  \"nlE;\": [0x2266, 0x338],\n  \"nlarr;\": 0x219a,\n  \"nldr;\": 0x2025,\n  \"nle;\": 0x2270,\n  \"nleftarrow;\": 0x219a,\n  \"nleftrightarrow;\": 0x21ae,\n  \"nleq;\": 0x2270,\n  \"nleqq;\": [0x2266, 0x338],\n  \"nleqslant;\": [0x2a7d, 0x338],\n  \"nles;\": [0x2a7d, 0x338],\n  \"nless;\": 0x226e,\n  \"nlsim;\": 0x2274,\n  \"nlt;\": 0x226e,\n  \"nltri;\": 0x22ea,\n  \"nltrie;\": 0x22ec,\n  \"nmid;\": 0x2224,\n  \"nopf;\": [0xd835, 0xdd5f],\n  \"not\": 0xac,\n  \"not;\": 0xac,\n  \"notin;\": 0x2209,\n  \"notinE;\": [0x22f9, 0x338],\n  \"notindot;\": [0x22f5, 0x338],\n  \"notinva;\": 0x2209,\n  \"notinvb;\": 0x22f7,\n  \"notinvc;\": 0x22f6,\n  \"notni;\": 0x220c,\n  \"notniva;\": 0x220c,\n  \"notnivb;\": 0x22fe,\n  \"notnivc;\": 0x22fd,\n  \"npar;\": 0x2226,\n  \"nparallel;\": 0x2226,\n  \"nparsl;\": [0x2afd, 0x20e5],\n  \"npart;\": [0x2202, 0x338],\n  \"npolint;\": 0x2a14,\n  \"npr;\": 0x2280,\n  \"nprcue;\": 0x22e0,\n  \"npre;\": [0x2aaf, 0x338],\n  \"nprec;\": 0x2280,\n  \"npreceq;\": [0x2aaf, 0x338],\n  \"nrArr;\": 0x21cf,\n  \"nrarr;\": 0x219b,\n  \"nrarrc;\": [0x2933, 0x338],\n  \"nrarrw;\": [0x219d, 0x338],\n  \"nrightarrow;\": 0x219b,\n  \"nrtri;\": 0x22eb,\n  \"nrtrie;\": 0x22ed,\n  \"nsc;\": 0x2281,\n  \"nsccue;\": 0x22e1,\n  \"nsce;\": [0x2ab0, 0x338],\n  \"nscr;\": [0xd835, 0xdcc3],\n  \"nshortmid;\": 0x2224,\n  \"nshortparallel;\": 0x2226,\n  \"nsim;\": 0x2241,\n  \"nsime;\": 0x2244,\n  \"nsimeq;\": 0x2244,\n  \"nsmid;\": 0x2224,\n  \"nspar;\": 0x2226,\n  \"nsqsube;\": 0x22e2,\n  \"nsqsupe;\": 0x22e3,\n  \"nsub;\": 0x2284,\n  \"nsubE;\": [0x2ac5, 0x338],\n  \"nsube;\": 0x2288,\n  \"nsubset;\": [0x2282, 0x20d2],\n  \"nsubseteq;\": 0x2288,\n  \"nsubseteqq;\": [0x2ac5, 0x338],\n  \"nsucc;\": 0x2281,\n  \"nsucceq;\": [0x2ab0, 0x338],\n  \"nsup;\": 0x2285,\n  \"nsupE;\": [0x2ac6, 0x338],\n  \"nsupe;\": 0x2289,\n  \"nsupset;\": [0x2283, 0x20d2],\n  \"nsupseteq;\": 0x2289,\n  \"nsupseteqq;\": [0x2ac6, 0x338],\n  \"ntgl;\": 0x2279,\n  \"ntilde\": 0xf1,\n  \"ntilde;\": 0xf1,\n  \"ntlg;\": 0x2278,\n  \"ntriangleleft;\": 0x22ea,\n  \"ntrianglelefteq;\": 0x22ec,\n  \"ntriangleright;\": 0x22eb,\n  \"ntrianglerighteq;\": 0x22ed,\n  \"nu;\": 0x3bd,\n  \"num;\": 0x23,\n  \"numero;\": 0x2116,\n  \"numsp;\": 0x2007,\n  \"nvDash;\": 0x22ad,\n  \"nvHarr;\": 0x2904,\n  \"nvap;\": [0x224d, 0x20d2],\n  \"nvdash;\": 0x22ac,\n  \"nvge;\": [0x2265, 0x20d2],\n  \"nvgt;\": [0x3e, 0x20d2],\n  \"nvinfin;\": 0x29de,\n  \"nvlArr;\": 0x2902,\n  \"nvle;\": [0x2264, 0x20d2],\n  \"nvlt;\": [0x3c, 0x20d2],\n  \"nvltrie;\": [0x22b4, 0x20d2],\n  \"nvrArr;\": 0x2903,\n  \"nvrtrie;\": [0x22b5, 0x20d2],\n  \"nvsim;\": [0x223c, 0x20d2],\n  \"nwArr;\": 0x21d6,\n  \"nwarhk;\": 0x2923,\n  \"nwarr;\": 0x2196,\n  \"nwarrow;\": 0x2196,\n  \"nwnear;\": 0x2927,\n  \"oS;\": 0x24c8,\n  \"oacute\": 0xf3,\n  \"oacute;\": 0xf3,\n  \"oast;\": 0x229b,\n  \"ocir;\": 0x229a,\n  \"ocirc\": 0xf4,\n  \"ocirc;\": 0xf4,\n  \"ocy;\": 0x43e,\n  \"odash;\": 0x229d,\n  \"odblac;\": 0x151,\n  \"odiv;\": 0x2a38,\n  \"odot;\": 0x2299,\n  \"odsold;\": 0x29bc,\n  \"oelig;\": 0x153,\n  \"ofcir;\": 0x29bf,\n  \"ofr;\": [0xd835, 0xdd2c],\n  \"ogon;\": 0x2db,\n  \"ograve\": 0xf2,\n  \"ograve;\": 0xf2,\n  \"ogt;\": 0x29c1,\n  \"ohbar;\": 0x29b5,\n  \"ohm;\": 0x3a9,\n  \"oint;\": 0x222e,\n  \"olarr;\": 0x21ba,\n  \"olcir;\": 0x29be,\n  \"olcross;\": 0x29bb,\n  \"oline;\": 0x203e,\n  \"olt;\": 0x29c0,\n  \"omacr;\": 0x14d,\n  \"omega;\": 0x3c9,\n  \"omicron;\": 0x3bf,\n  \"omid;\": 0x29b6,\n  \"ominus;\": 0x2296,\n  \"oopf;\": [0xd835, 0xdd60],\n  \"opar;\": 0x29b7,\n  \"operp;\": 0x29b9,\n  \"oplus;\": 0x2295,\n  \"or;\": 0x2228,\n  \"orarr;\": 0x21bb,\n  \"ord;\": 0x2a5d,\n  \"order;\": 0x2134,\n  \"orderof;\": 0x2134,\n  \"ordf\": 0xaa,\n  \"ordf;\": 0xaa,\n  \"ordm\": 0xba,\n  \"ordm;\": 0xba,\n  \"origof;\": 0x22b6,\n  \"oror;\": 0x2a56,\n  \"orslope;\": 0x2a57,\n  \"orv;\": 0x2a5b,\n  \"oscr;\": 0x2134,\n  \"oslash\": 0xf8,\n  \"oslash;\": 0xf8,\n  \"osol;\": 0x2298,\n  \"otilde\": 0xf5,\n  \"otilde;\": 0xf5,\n  \"otimes;\": 0x2297,\n  \"otimesas;\": 0x2a36,\n  \"ouml\": 0xf6,\n  \"ouml;\": 0xf6,\n  \"ovbar;\": 0x233d,\n  \"par;\": 0x2225,\n  \"para\": 0xb6,\n  \"para;\": 0xb6,\n  \"parallel;\": 0x2225,\n  \"parsim;\": 0x2af3,\n  \"parsl;\": 0x2afd,\n  \"part;\": 0x2202,\n  \"pcy;\": 0x43f,\n  \"percnt;\": 0x25,\n  \"period;\": 0x2e,\n  \"permil;\": 0x2030,\n  \"perp;\": 0x22a5,\n  \"pertenk;\": 0x2031,\n  \"pfr;\": [0xd835, 0xdd2d],\n  \"phi;\": 0x3c6,\n  \"phiv;\": 0x3d5,\n  \"phmmat;\": 0x2133,\n  \"phone;\": 0x260e,\n  \"pi;\": 0x3c0,\n  \"pitchfork;\": 0x22d4,\n  \"piv;\": 0x3d6,\n  \"planck;\": 0x210f,\n  \"planckh;\": 0x210e,\n  \"plankv;\": 0x210f,\n  \"plus;\": 0x2b,\n  \"plusacir;\": 0x2a23,\n  \"plusb;\": 0x229e,\n  \"pluscir;\": 0x2a22,\n  \"plusdo;\": 0x2214,\n  \"plusdu;\": 0x2a25,\n  \"pluse;\": 0x2a72,\n  \"plusmn\": 0xb1,\n  \"plusmn;\": 0xb1,\n  \"plussim;\": 0x2a26,\n  \"plustwo;\": 0x2a27,\n  \"pm;\": 0xb1,\n  \"pointint;\": 0x2a15,\n  \"popf;\": [0xd835, 0xdd61],\n  \"pound\": 0xa3,\n  \"pound;\": 0xa3,\n  \"pr;\": 0x227a,\n  \"prE;\": 0x2ab3,\n  \"prap;\": 0x2ab7,\n  \"prcue;\": 0x227c,\n  \"pre;\": 0x2aaf,\n  \"prec;\": 0x227a,\n  \"precapprox;\": 0x2ab7,\n  \"preccurlyeq;\": 0x227c,\n  \"preceq;\": 0x2aaf,\n  \"precnapprox;\": 0x2ab9,\n  \"precneqq;\": 0x2ab5,\n  \"precnsim;\": 0x22e8,\n  \"precsim;\": 0x227e,\n  \"prime;\": 0x2032,\n  \"primes;\": 0x2119,\n  \"prnE;\": 0x2ab5,\n  \"prnap;\": 0x2ab9,\n  \"prnsim;\": 0x22e8,\n  \"prod;\": 0x220f,\n  \"profalar;\": 0x232e,\n  \"profline;\": 0x2312,\n  \"profsurf;\": 0x2313,\n  \"prop;\": 0x221d,\n  \"propto;\": 0x221d,\n  \"prsim;\": 0x227e,\n  \"prurel;\": 0x22b0,\n  \"pscr;\": [0xd835, 0xdcc5],\n  \"psi;\": 0x3c8,\n  \"puncsp;\": 0x2008,\n  \"qfr;\": [0xd835, 0xdd2e],\n  \"qint;\": 0x2a0c,\n  \"qopf;\": [0xd835, 0xdd62],\n  \"qprime;\": 0x2057,\n  \"qscr;\": [0xd835, 0xdcc6],\n  \"quaternions;\": 0x210d,\n  \"quatint;\": 0x2a16,\n  \"quest;\": 0x3f,\n  \"questeq;\": 0x225f,\n  \"quot\": 0x22,\n  \"quot;\": 0x22,\n  \"rAarr;\": 0x21db,\n  \"rArr;\": 0x21d2,\n  \"rAtail;\": 0x291c,\n  \"rBarr;\": 0x290f,\n  \"rHar;\": 0x2964,\n  \"race;\": [0x223d, 0x331],\n  \"racute;\": 0x155,\n  \"radic;\": 0x221a,\n  \"raemptyv;\": 0x29b3,\n  \"rang;\": 0x27e9,\n  \"rangd;\": 0x2992,\n  \"range;\": 0x29a5,\n  \"rangle;\": 0x27e9,\n  \"raquo\": 0xbb,\n  \"raquo;\": 0xbb,\n  \"rarr;\": 0x2192,\n  \"rarrap;\": 0x2975,\n  \"rarrb;\": 0x21e5,\n  \"rarrbfs;\": 0x2920,\n  \"rarrc;\": 0x2933,\n  \"rarrfs;\": 0x291e,\n  \"rarrhk;\": 0x21aa,\n  \"rarrlp;\": 0x21ac,\n  \"rarrpl;\": 0x2945,\n  \"rarrsim;\": 0x2974,\n  \"rarrtl;\": 0x21a3,\n  \"rarrw;\": 0x219d,\n  \"ratail;\": 0x291a,\n  \"ratio;\": 0x2236,\n  \"rationals;\": 0x211a,\n  \"rbarr;\": 0x290d,\n  \"rbbrk;\": 0x2773,\n  \"rbrace;\": 0x7d,\n  \"rbrack;\": 0x5d,\n  \"rbrke;\": 0x298c,\n  \"rbrksld;\": 0x298e,\n  \"rbrkslu;\": 0x2990,\n  \"rcaron;\": 0x159,\n  \"rcedil;\": 0x157,\n  \"rceil;\": 0x2309,\n  \"rcub;\": 0x7d,\n  \"rcy;\": 0x440,\n  \"rdca;\": 0x2937,\n  \"rdldhar;\": 0x2969,\n  \"rdquo;\": 0x201d,\n  \"rdquor;\": 0x201d,\n  \"rdsh;\": 0x21b3,\n  \"real;\": 0x211c,\n  \"realine;\": 0x211b,\n  \"realpart;\": 0x211c,\n  \"reals;\": 0x211d,\n  \"rect;\": 0x25ad,\n  \"reg\": 0xae,\n  \"reg;\": 0xae,\n  \"rfisht;\": 0x297d,\n  \"rfloor;\": 0x230b,\n  \"rfr;\": [0xd835, 0xdd2f],\n  \"rhard;\": 0x21c1,\n  \"rharu;\": 0x21c0,\n  \"rharul;\": 0x296c,\n  \"rho;\": 0x3c1,\n  \"rhov;\": 0x3f1,\n  \"rightarrow;\": 0x2192,\n  \"rightarrowtail;\": 0x21a3,\n  \"rightharpoondown;\": 0x21c1,\n  \"rightharpoonup;\": 0x21c0,\n  \"rightleftarrows;\": 0x21c4,\n  \"rightleftharpoons;\": 0x21cc,\n  \"rightrightarrows;\": 0x21c9,\n  \"rightsquigarrow;\": 0x219d,\n  \"rightthreetimes;\": 0x22cc,\n  \"ring;\": 0x2da,\n  \"risingdotseq;\": 0x2253,\n  \"rlarr;\": 0x21c4,\n  \"rlhar;\": 0x21cc,\n  \"rlm;\": 0x200f,\n  \"rmoust;\": 0x23b1,\n  \"rmoustache;\": 0x23b1,\n  \"rnmid;\": 0x2aee,\n  \"roang;\": 0x27ed,\n  \"roarr;\": 0x21fe,\n  \"robrk;\": 0x27e7,\n  \"ropar;\": 0x2986,\n  \"ropf;\": [0xd835, 0xdd63],\n  \"roplus;\": 0x2a2e,\n  \"rotimes;\": 0x2a35,\n  \"rpar;\": 0x29,\n  \"rpargt;\": 0x2994,\n  \"rppolint;\": 0x2a12,\n  \"rrarr;\": 0x21c9,\n  \"rsaquo;\": 0x203a,\n  \"rscr;\": [0xd835, 0xdcc7],\n  \"rsh;\": 0x21b1,\n  \"rsqb;\": 0x5d,\n  \"rsquo;\": 0x2019,\n  \"rsquor;\": 0x2019,\n  \"rthree;\": 0x22cc,\n  \"rtimes;\": 0x22ca,\n  \"rtri;\": 0x25b9,\n  \"rtrie;\": 0x22b5,\n  \"rtrif;\": 0x25b8,\n  \"rtriltri;\": 0x29ce,\n  \"ruluhar;\": 0x2968,\n  \"rx;\": 0x211e,\n  \"sacute;\": 0x15b,\n  \"sbquo;\": 0x201a,\n  \"sc;\": 0x227b,\n  \"scE;\": 0x2ab4,\n  \"scap;\": 0x2ab8,\n  \"scaron;\": 0x161,\n  \"sccue;\": 0x227d,\n  \"sce;\": 0x2ab0,\n  \"scedil;\": 0x15f,\n  \"scirc;\": 0x15d,\n  \"scnE;\": 0x2ab6,\n  \"scnap;\": 0x2aba,\n  \"scnsim;\": 0x22e9,\n  \"scpolint;\": 0x2a13,\n  \"scsim;\": 0x227f,\n  \"scy;\": 0x441,\n  \"sdot;\": 0x22c5,\n  \"sdotb;\": 0x22a1,\n  \"sdote;\": 0x2a66,\n  \"seArr;\": 0x21d8,\n  \"searhk;\": 0x2925,\n  \"searr;\": 0x2198,\n  \"searrow;\": 0x2198,\n  \"sect\": 0xa7,\n  \"sect;\": 0xa7,\n  \"semi;\": 0x3b,\n  \"seswar;\": 0x2929,\n  \"setminus;\": 0x2216,\n  \"setmn;\": 0x2216,\n  \"sext;\": 0x2736,\n  \"sfr;\": [0xd835, 0xdd30],\n  \"sfrown;\": 0x2322,\n  \"sharp;\": 0x266f,\n  \"shchcy;\": 0x449,\n  \"shcy;\": 0x448,\n  \"shortmid;\": 0x2223,\n  \"shortparallel;\": 0x2225,\n  \"shy\": 0xad,\n  \"shy;\": 0xad,\n  \"sigma;\": 0x3c3,\n  \"sigmaf;\": 0x3c2,\n  \"sigmav;\": 0x3c2,\n  \"sim;\": 0x223c,\n  \"simdot;\": 0x2a6a,\n  \"sime;\": 0x2243,\n  \"simeq;\": 0x2243,\n  \"simg;\": 0x2a9e,\n  \"simgE;\": 0x2aa0,\n  \"siml;\": 0x2a9d,\n  \"simlE;\": 0x2a9f,\n  \"simne;\": 0x2246,\n  \"simplus;\": 0x2a24,\n  \"simrarr;\": 0x2972,\n  \"slarr;\": 0x2190,\n  \"smallsetminus;\": 0x2216,\n  \"smashp;\": 0x2a33,\n  \"smeparsl;\": 0x29e4,\n  \"smid;\": 0x2223,\n  \"smile;\": 0x2323,\n  \"smt;\": 0x2aaa,\n  \"smte;\": 0x2aac,\n  \"smtes;\": [0x2aac, 0xfe00],\n  \"softcy;\": 0x44c,\n  \"sol;\": 0x2f,\n  \"solb;\": 0x29c4,\n  \"solbar;\": 0x233f,\n  \"sopf;\": [0xd835, 0xdd64],\n  \"spades;\": 0x2660,\n  \"spadesuit;\": 0x2660,\n  \"spar;\": 0x2225,\n  \"sqcap;\": 0x2293,\n  \"sqcaps;\": [0x2293, 0xfe00],\n  \"sqcup;\": 0x2294,\n  \"sqcups;\": [0x2294, 0xfe00],\n  \"sqsub;\": 0x228f,\n  \"sqsube;\": 0x2291,\n  \"sqsubset;\": 0x228f,\n  \"sqsubseteq;\": 0x2291,\n  \"sqsup;\": 0x2290,\n  \"sqsupe;\": 0x2292,\n  \"sqsupset;\": 0x2290,\n  \"sqsupseteq;\": 0x2292,\n  \"squ;\": 0x25a1,\n  \"square;\": 0x25a1,\n  \"squarf;\": 0x25aa,\n  \"squf;\": 0x25aa,\n  \"srarr;\": 0x2192,\n  \"sscr;\": [0xd835, 0xdcc8],\n  \"ssetmn;\": 0x2216,\n  \"ssmile;\": 0x2323,\n  \"sstarf;\": 0x22c6,\n  \"star;\": 0x2606,\n  \"starf;\": 0x2605,\n  \"straightepsilon;\": 0x3f5,\n  \"straightphi;\": 0x3d5,\n  \"strns;\": 0xaf,\n  \"sub;\": 0x2282,\n  \"subE;\": 0x2ac5,\n  \"subdot;\": 0x2abd,\n  \"sube;\": 0x2286,\n  \"subedot;\": 0x2ac3,\n  \"submult;\": 0x2ac1,\n  \"subnE;\": 0x2acb,\n  \"subne;\": 0x228a,\n  \"subplus;\": 0x2abf,\n  \"subrarr;\": 0x2979,\n  \"subset;\": 0x2282,\n  \"subseteq;\": 0x2286,\n  \"subseteqq;\": 0x2ac5,\n  \"subsetneq;\": 0x228a,\n  \"subsetneqq;\": 0x2acb,\n  \"subsim;\": 0x2ac7,\n  \"subsub;\": 0x2ad5,\n  \"subsup;\": 0x2ad3,\n  \"succ;\": 0x227b,\n  \"succapprox;\": 0x2ab8,\n  \"succcurlyeq;\": 0x227d,\n  \"succeq;\": 0x2ab0,\n  \"succnapprox;\": 0x2aba,\n  \"succneqq;\": 0x2ab6,\n  \"succnsim;\": 0x22e9,\n  \"succsim;\": 0x227f,\n  \"sum;\": 0x2211,\n  \"sung;\": 0x266a,\n  \"sup1\": 0xb9,\n  \"sup1;\": 0xb9,\n  \"sup2\": 0xb2,\n  \"sup2;\": 0xb2,\n  \"sup3\": 0xb3,\n  \"sup3;\": 0xb3,\n  \"sup;\": 0x2283,\n  \"supE;\": 0x2ac6,\n  \"supdot;\": 0x2abe,\n  \"supdsub;\": 0x2ad8,\n  \"supe;\": 0x2287,\n  \"supedot;\": 0x2ac4,\n  \"suphsol;\": 0x27c9,\n  \"suphsub;\": 0x2ad7,\n  \"suplarr;\": 0x297b,\n  \"supmult;\": 0x2ac2,\n  \"supnE;\": 0x2acc,\n  \"supne;\": 0x228b,\n  \"supplus;\": 0x2ac0,\n  \"supset;\": 0x2283,\n  \"supseteq;\": 0x2287,\n  \"supseteqq;\": 0x2ac6,\n  \"supsetneq;\": 0x228b,\n  \"supsetneqq;\": 0x2acc,\n  \"supsim;\": 0x2ac8,\n  \"supsub;\": 0x2ad4,\n  \"supsup;\": 0x2ad6,\n  \"swArr;\": 0x21d9,\n  \"swarhk;\": 0x2926,\n  \"swarr;\": 0x2199,\n  \"swarrow;\": 0x2199,\n  \"swnwar;\": 0x292a,\n  \"szlig\": 0xdf,\n  \"szlig;\": 0xdf,\n  \"target;\": 0x2316,\n  \"tau;\": 0x3c4,\n  \"tbrk;\": 0x23b4,\n  \"tcaron;\": 0x165,\n  \"tcedil;\": 0x163,\n  \"tcy;\": 0x442,\n  \"tdot;\": 0x20db,\n  \"telrec;\": 0x2315,\n  \"tfr;\": [0xd835, 0xdd31],\n  \"there4;\": 0x2234,\n  \"therefore;\": 0x2234,\n  \"theta;\": 0x3b8,\n  \"thetasym;\": 0x3d1,\n  \"thetav;\": 0x3d1,\n  \"thickapprox;\": 0x2248,\n  \"thicksim;\": 0x223c,\n  \"thinsp;\": 0x2009,\n  \"thkap;\": 0x2248,\n  \"thksim;\": 0x223c,\n  \"thorn\": 0xfe,\n  \"thorn;\": 0xfe,\n  \"tilde;\": 0x2dc,\n  \"times\": 0xd7,\n  \"times;\": 0xd7,\n  \"timesb;\": 0x22a0,\n  \"timesbar;\": 0x2a31,\n  \"timesd;\": 0x2a30,\n  \"tint;\": 0x222d,\n  \"toea;\": 0x2928,\n  \"top;\": 0x22a4,\n  \"topbot;\": 0x2336,\n  \"topcir;\": 0x2af1,\n  \"topf;\": [0xd835, 0xdd65],\n  \"topfork;\": 0x2ada,\n  \"tosa;\": 0x2929,\n  \"tprime;\": 0x2034,\n  \"trade;\": 0x2122,\n  \"triangle;\": 0x25b5,\n  \"triangledown;\": 0x25bf,\n  \"triangleleft;\": 0x25c3,\n  \"trianglelefteq;\": 0x22b4,\n  \"triangleq;\": 0x225c,\n  \"triangleright;\": 0x25b9,\n  \"trianglerighteq;\": 0x22b5,\n  \"tridot;\": 0x25ec,\n  \"trie;\": 0x225c,\n  \"triminus;\": 0x2a3a,\n  \"triplus;\": 0x2a39,\n  \"trisb;\": 0x29cd,\n  \"tritime;\": 0x2a3b,\n  \"trpezium;\": 0x23e2,\n  \"tscr;\": [0xd835, 0xdcc9],\n  \"tscy;\": 0x446,\n  \"tshcy;\": 0x45b,\n  \"tstrok;\": 0x167,\n  \"twixt;\": 0x226c,\n  \"twoheadleftarrow;\": 0x219e,\n  \"twoheadrightarrow;\": 0x21a0,\n  \"uArr;\": 0x21d1,\n  \"uHar;\": 0x2963,\n  \"uacute\": 0xfa,\n  \"uacute;\": 0xfa,\n  \"uarr;\": 0x2191,\n  \"ubrcy;\": 0x45e,\n  \"ubreve;\": 0x16d,\n  \"ucirc\": 0xfb,\n  \"ucirc;\": 0xfb,\n  \"ucy;\": 0x443,\n  \"udarr;\": 0x21c5,\n  \"udblac;\": 0x171,\n  \"udhar;\": 0x296e,\n  \"ufisht;\": 0x297e,\n  \"ufr;\": [0xd835, 0xdd32],\n  \"ugrave\": 0xf9,\n  \"ugrave;\": 0xf9,\n  \"uharl;\": 0x21bf,\n  \"uharr;\": 0x21be,\n  \"uhblk;\": 0x2580,\n  \"ulcorn;\": 0x231c,\n  \"ulcorner;\": 0x231c,\n  \"ulcrop;\": 0x230f,\n  \"ultri;\": 0x25f8,\n  \"umacr;\": 0x16b,\n  \"uml\": 0xa8,\n  \"uml;\": 0xa8,\n  \"uogon;\": 0x173,\n  \"uopf;\": [0xd835, 0xdd66],\n  \"uparrow;\": 0x2191,\n  \"updownarrow;\": 0x2195,\n  \"upharpoonleft;\": 0x21bf,\n  \"upharpoonright;\": 0x21be,\n  \"uplus;\": 0x228e,\n  \"upsi;\": 0x3c5,\n  \"upsih;\": 0x3d2,\n  \"upsilon;\": 0x3c5,\n  \"upuparrows;\": 0x21c8,\n  \"urcorn;\": 0x231d,\n  \"urcorner;\": 0x231d,\n  \"urcrop;\": 0x230e,\n  \"uring;\": 0x16f,\n  \"urtri;\": 0x25f9,\n  \"uscr;\": [0xd835, 0xdcca],\n  \"utdot;\": 0x22f0,\n  \"utilde;\": 0x169,\n  \"utri;\": 0x25b5,\n  \"utrif;\": 0x25b4,\n  \"uuarr;\": 0x21c8,\n  \"uuml\": 0xfc,\n  \"uuml;\": 0xfc,\n  \"uwangle;\": 0x29a7,\n  \"vArr;\": 0x21d5,\n  \"vBar;\": 0x2ae8,\n  \"vBarv;\": 0x2ae9,\n  \"vDash;\": 0x22a8,\n  \"vangrt;\": 0x299c,\n  \"varepsilon;\": 0x3f5,\n  \"varkappa;\": 0x3f0,\n  \"varnothing;\": 0x2205,\n  \"varphi;\": 0x3d5,\n  \"varpi;\": 0x3d6,\n  \"varpropto;\": 0x221d,\n  \"varr;\": 0x2195,\n  \"varrho;\": 0x3f1,\n  \"varsigma;\": 0x3c2,\n  \"varsubsetneq;\": [0x228a, 0xfe00],\n  \"varsubsetneqq;\": [0x2acb, 0xfe00],\n  \"varsupsetneq;\": [0x228b, 0xfe00],\n  \"varsupsetneqq;\": [0x2acc, 0xfe00],\n  \"vartheta;\": 0x3d1,\n  \"vartriangleleft;\": 0x22b2,\n  \"vartriangleright;\": 0x22b3,\n  \"vcy;\": 0x432,\n  \"vdash;\": 0x22a2,\n  \"vee;\": 0x2228,\n  \"veebar;\": 0x22bb,\n  \"veeeq;\": 0x225a,\n  \"vellip;\": 0x22ee,\n  \"verbar;\": 0x7c,\n  \"vert;\": 0x7c,\n  \"vfr;\": [0xd835, 0xdd33],\n  \"vltri;\": 0x22b2,\n  \"vnsub;\": [0x2282, 0x20d2],\n  \"vnsup;\": [0x2283, 0x20d2],\n  \"vopf;\": [0xd835, 0xdd67],\n  \"vprop;\": 0x221d,\n  \"vrtri;\": 0x22b3,\n  \"vscr;\": [0xd835, 0xdccb],\n  \"vsubnE;\": [0x2acb, 0xfe00],\n  \"vsubne;\": [0x228a, 0xfe00],\n  \"vsupnE;\": [0x2acc, 0xfe00],\n  \"vsupne;\": [0x228b, 0xfe00],\n  \"vzigzag;\": 0x299a,\n  \"wcirc;\": 0x175,\n  \"wedbar;\": 0x2a5f,\n  \"wedge;\": 0x2227,\n  \"wedgeq;\": 0x2259,\n  \"weierp;\": 0x2118,\n  \"wfr;\": [0xd835, 0xdd34],\n  \"wopf;\": [0xd835, 0xdd68],\n  \"wp;\": 0x2118,\n  \"wr;\": 0x2240,\n  \"wreath;\": 0x2240,\n  \"wscr;\": [0xd835, 0xdccc],\n  \"xcap;\": 0x22c2,\n  \"xcirc;\": 0x25ef,\n  \"xcup;\": 0x22c3,\n  \"xdtri;\": 0x25bd,\n  \"xfr;\": [0xd835, 0xdd35],\n  \"xhArr;\": 0x27fa,\n  \"xharr;\": 0x27f7,\n  \"xi;\": 0x3be,\n  \"xlArr;\": 0x27f8,\n  \"xlarr;\": 0x27f5,\n  \"xmap;\": 0x27fc,\n  \"xnis;\": 0x22fb,\n  \"xodot;\": 0x2a00,\n  \"xopf;\": [0xd835, 0xdd69],\n  \"xoplus;\": 0x2a01,\n  \"xotime;\": 0x2a02,\n  \"xrArr;\": 0x27f9,\n  \"xrarr;\": 0x27f6,\n  \"xscr;\": [0xd835, 0xdccd],\n  \"xsqcup;\": 0x2a06,\n  \"xuplus;\": 0x2a04,\n  \"xutri;\": 0x25b3,\n  \"xvee;\": 0x22c1,\n  \"xwedge;\": 0x22c0,\n  \"yacute\": 0xfd,\n  \"yacute;\": 0xfd,\n  \"yacy;\": 0x44f,\n  \"ycirc;\": 0x177,\n  \"ycy;\": 0x44b,\n  \"yen\": 0xa5,\n  \"yen;\": 0xa5,\n  \"yfr;\": [0xd835, 0xdd36],\n  \"yicy;\": 0x457,\n  \"yopf;\": [0xd835, 0xdd6a],\n  \"yscr;\": [0xd835, 0xdcce],\n  \"yucy;\": 0x44e,\n  \"yuml\": 0xff,\n  \"yuml;\": 0xff,\n  \"zacute;\": 0x17a,\n  \"zcaron;\": 0x17e,\n  \"zcy;\": 0x437,\n  \"zdot;\": 0x17c,\n  \"zeetrf;\": 0x2128,\n  \"zeta;\": 0x3b6,\n  \"zfr;\": [0xd835, 0xdd37],\n  \"zhcy;\": 0x436,\n  \"zigrarr;\": 0x21dd,\n  \"zopf;\": [0xd835, 0xdd6b],\n  \"zscr;\": [0xd835, 0xdccf],\n  \"zwj;\": 0x200d,\n  \"zwnj;\": 0x200c\n};\n/*\n * This regexp is generated with test/tools/update-entities.js\n * It will always match at least one character -- but note that there\n * are no entities whose names are a single character long.\n */\n\nvar NAMEDCHARREF = /(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\\s\\S]/g;\nvar NAMEDCHARREF_MAXLEN = 32; // Regular expression constants used by the tokenizer and parser\n// Note that \\r is included in all of these regexps because it will need\n// to be converted to LF by the scanChars() function.\n\nvar DBLQUOTEATTRVAL = /[^\\r\"&\\u0000]+/g;\nvar SINGLEQUOTEATTRVAL = /[^\\r'&\\u0000]+/g;\nvar UNQUOTEDATTRVAL = /[^\\r\\t\\n\\f &>\\u0000]+/g;\nvar TAGNAME = /[^\\r\\t\\n\\f \\/>A-Z\\u0000]+/g;\nvar ATTRNAME = /[^\\r\\t\\n\\f \\/=>A-Z\\u0000]+/g;\nvar CDATATEXT = /[^\\]\\r\\u0000\\uffff]*/g;\nvar DATATEXT = /[^&<\\r\\u0000\\uffff]*/g;\nvar RAWTEXT = /[^<\\r\\u0000\\uffff]*/g;\nvar PLAINTEXT = /[^\\r\\u0000\\uffff]*/g; // Since we don't have the 'sticky tag', add '|.' to the end of SIMPLETAG\n// and SIMPLEATTR so that we are guaranteed to always match.  This prevents\n// us from scanning past the lastIndex set. (Note that the desired matches\n// are always greater than 1 char long, so longest-match will ensure that .\n// is not matched unless the desired match fails.)\n\nvar SIMPLETAG = /(?:(\\/)?([a-z]+)>)|[\\s\\S]/g;\nvar SIMPLEATTR = /(?:([-a-z]+)[ \\t\\n\\f]*=[ \\t\\n\\f]*('[^'&\\r\\u0000]*'|\"[^\"&\\r\\u0000]*\"|[^\\t\\n\\r\\f \"&'\\u0000>][^&> \\t\\n\\r\\f\\u0000]*[ \\t\\n\\f]))|[\\s\\S]/g;\nvar NONWS = /[^\\x09\\x0A\\x0C\\x0D\\x20]/;\nvar ALLNONWS = /[^\\x09\\x0A\\x0C\\x0D\\x20]/g; // like above, with g flag\n\nvar NONWSNONNUL = /[^\\x00\\x09\\x0A\\x0C\\x0D\\x20]/; // don't allow NUL either\n\nvar LEADINGWS = /^[\\x09\\x0A\\x0C\\x0D\\x20]+/;\nvar NULCHARS = /\\x00/g;\n/***\n * These are utility functions that don't use any of the parser's\n * internal state.\n */\n\nfunction buf2str(buf) {\n  var CHUNKSIZE = 16384;\n\n  if (buf.length < CHUNKSIZE) {\n    return String.fromCharCode.apply(String, buf);\n  } // special case for large strings, to avoid busting the stack.\n\n\n  var result = '';\n\n  for (var i = 0; i < buf.length; i += CHUNKSIZE) {\n    result += String.fromCharCode.apply(String, buf.slice(i, i + CHUNKSIZE));\n  }\n\n  return result;\n}\n\nfunction str2buf(s) {\n  var result = [];\n\n  for (var i = 0; i < s.length; i++) {\n    result[i] = s.charCodeAt(i);\n  }\n\n  return result;\n} // Determine whether the element is a member of the set.\n// The set is an object that maps namespaces to objects. The objects\n// then map local tagnames to the value true if that tag is part of the set\n\n\nfunction isA(elt, set) {\n  if (typeof set === 'string') {\n    // convenience case for testing a particular HTML element\n    return elt.namespaceURI === NAMESPACE.HTML && elt.localName === set;\n  }\n\n  var tagnames = set[elt.namespaceURI];\n  return tagnames && tagnames[elt.localName];\n}\n\nfunction isMathmlTextIntegrationPoint(n) {\n  return isA(n, mathmlTextIntegrationPointSet);\n}\n\nfunction isHTMLIntegrationPoint(n) {\n  if (isA(n, htmlIntegrationPointSet)) return true;\n\n  if (n.namespaceURI === NAMESPACE.MATHML && n.localName === \"annotation-xml\") {\n    var encoding = n.getAttribute(\"encoding\");\n    if (encoding) encoding = encoding.toLowerCase();\n    if (encoding === \"text/html\" || encoding === \"application/xhtml+xml\") return true;\n  }\n\n  return false;\n}\n\nfunction adjustSVGTagName(name) {\n  if (name in svgTagNameAdjustments) return svgTagNameAdjustments[name];else return name;\n}\n\nfunction adjustSVGAttributes(attrs) {\n  for (var i = 0, n = attrs.length; i < n; i++) {\n    if (attrs[i][0] in svgAttrAdjustments) {\n      attrs[i][0] = svgAttrAdjustments[attrs[i][0]];\n    }\n  }\n}\n\nfunction adjustMathMLAttributes(attrs) {\n  for (var i = 0, n = attrs.length; i < n; i++) {\n    if (attrs[i][0] === \"definitionurl\") {\n      attrs[i][0] = \"definitionURL\";\n      break;\n    }\n  }\n}\n\nfunction adjustForeignAttributes(attrs) {\n  for (var i = 0, n = attrs.length; i < n; i++) {\n    if (attrs[i][0] in foreignAttributes) {\n      // Attributes with namespaces get a 3rd element:\n      // [Qname, value, namespace]\n      attrs[i].push(foreignAttributes[attrs[i][0]]);\n    }\n  }\n} // For each attribute in attrs, if elt doesn't have an attribute\n// by that name, add the attribute to elt\n// XXX: I'm ignoring namespaces for now\n\n\nfunction transferAttributes(attrs, elt) {\n  for (var i = 0, n = attrs.length; i < n; i++) {\n    var name = attrs[i][0],\n        value = attrs[i][1];\n    if (elt.hasAttribute(name)) continue;\n\n    elt._setAttribute(name, value);\n  }\n}\n/***\n * The ElementStack class\n */\n\n\nHTMLParser.ElementStack = function ElementStack() {\n  this.elements = [];\n  this.top = null; // stack.top is the \"current node\" in the spec\n};\n/*\n// This is for debugging only\nHTMLParser.ElementStack.prototype.toString = function(e) {\n  return \"STACK: \" +\n  this.elements.map(function(e) {return e.localName;}).join(\"-\");\n}\n*/\n\n\nHTMLParser.ElementStack.prototype.push = function (e) {\n  this.elements.push(e);\n  this.top = e;\n};\n\nHTMLParser.ElementStack.prototype.pop = function (e) {\n  this.elements.pop();\n  this.top = this.elements[this.elements.length - 1];\n}; // Pop elements off the stack up to and including the first\n// element with the specified (HTML) tagname\n\n\nHTMLParser.ElementStack.prototype.popTag = function (tag) {\n  for (var i = this.elements.length - 1; i > 0; i--) {\n    var e = this.elements[i];\n    if (isA(e, tag)) break;\n  }\n\n  this.elements.length = i;\n  this.top = this.elements[i - 1];\n}; // Pop elements off the stack up to and including the first\n// element that is an instance of the specified type\n\n\nHTMLParser.ElementStack.prototype.popElementType = function (type) {\n  for (var i = this.elements.length - 1; i > 0; i--) {\n    if (this.elements[i] instanceof type) break;\n  }\n\n  this.elements.length = i;\n  this.top = this.elements[i - 1];\n}; // Pop elements off the stack up to and including the element e.\n// Note that this is very different from removeElement()\n// This requires that e is on the stack.\n\n\nHTMLParser.ElementStack.prototype.popElement = function (e) {\n  for (var i = this.elements.length - 1; i > 0; i--) {\n    if (this.elements[i] === e) break;\n  }\n\n  this.elements.length = i;\n  this.top = this.elements[i - 1];\n}; // Remove a specific element from the stack.\n// Do nothing if the element is not on the stack\n\n\nHTMLParser.ElementStack.prototype.removeElement = function (e) {\n  if (this.top === e) this.pop();else {\n    var idx = this.elements.lastIndexOf(e);\n    if (idx !== -1) this.elements.splice(idx, 1);\n  }\n};\n\nHTMLParser.ElementStack.prototype.clearToContext = function (set) {\n  // Note that we don't loop to 0. Never pop the <html> elt off.\n  for (var i = this.elements.length - 1; i > 0; i--) {\n    if (isA(this.elements[i], set)) break;\n  }\n\n  this.elements.length = i + 1;\n  this.top = this.elements[i];\n};\n\nHTMLParser.ElementStack.prototype.contains = function (tag) {\n  return this.inSpecificScope(tag, Object.create(null));\n};\n\nHTMLParser.ElementStack.prototype.inSpecificScope = function (tag, set) {\n  for (var i = this.elements.length - 1; i >= 0; i--) {\n    var elt = this.elements[i];\n    if (isA(elt, tag)) return true;\n    if (isA(elt, set)) return false;\n  }\n\n  return false;\n}; // Like the above, but for a specific element, not a tagname\n\n\nHTMLParser.ElementStack.prototype.elementInSpecificScope = function (target, set) {\n  for (var i = this.elements.length - 1; i >= 0; i--) {\n    var elt = this.elements[i];\n    if (elt === target) return true;\n    if (isA(elt, set)) return false;\n  }\n\n  return false;\n}; // Like the above, but for an element interface, not a tagname\n\n\nHTMLParser.ElementStack.prototype.elementTypeInSpecificScope = function (target, set) {\n  for (var i = this.elements.length - 1; i >= 0; i--) {\n    var elt = this.elements[i];\n    if (elt instanceof target) return true;\n    if (isA(elt, set)) return false;\n  }\n\n  return false;\n};\n\nHTMLParser.ElementStack.prototype.inScope = function (tag) {\n  return this.inSpecificScope(tag, inScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.elementInScope = function (e) {\n  return this.elementInSpecificScope(e, inScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.elementTypeInScope = function (type) {\n  return this.elementTypeInSpecificScope(type, inScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.inButtonScope = function (tag) {\n  return this.inSpecificScope(tag, inButtonScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.inListItemScope = function (tag) {\n  return this.inSpecificScope(tag, inListItemScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.inTableScope = function (tag) {\n  return this.inSpecificScope(tag, inTableScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.inSelectScope = function (tag) {\n  // Can't implement this one with inSpecificScope, since it involves\n  // a set defined by inverting another set. So implement manually.\n  for (var i = this.elements.length - 1; i >= 0; i--) {\n    var elt = this.elements[i];\n    if (elt.namespaceURI !== NAMESPACE.HTML) return false;\n    var localname = elt.localName;\n    if (localname === tag) return true;\n    if (localname !== \"optgroup\" && localname !== \"option\") return false;\n  }\n\n  return false;\n};\n\nHTMLParser.ElementStack.prototype.generateImpliedEndTags = function (butnot, thorough) {\n  var endTagSet = thorough ? thoroughImpliedEndTagsSet : impliedEndTagsSet;\n\n  for (var i = this.elements.length - 1; i >= 0; i--) {\n    var e = this.elements[i];\n    if (butnot && isA(e, butnot)) break;\n    if (!isA(this.elements[i], endTagSet)) break;\n  }\n\n  this.elements.length = i + 1;\n  this.top = this.elements[i];\n};\n/***\n * The ActiveFormattingElements class\n */\n\n\nHTMLParser.ActiveFormattingElements = function AFE() {\n  this.list = []; // elements\n\n  this.attrs = []; // attribute tokens for cloning\n};\n\nHTMLParser.ActiveFormattingElements.prototype.MARKER = {\n  localName: \"|\"\n};\n/*\n// For debugging\nHTMLParser.ActiveFormattingElements.prototype.toString = function() {\n  return \"AFE: \" +\n  this.list.map(function(e) { return e.localName; }).join(\"-\");\n}\n*/\n\nHTMLParser.ActiveFormattingElements.prototype.insertMarker = function () {\n  this.list.push(this.MARKER);\n  this.attrs.push(this.MARKER);\n};\n\nHTMLParser.ActiveFormattingElements.prototype.push = function (elt, attrs) {\n  // Scan backwards: if there are already 3 copies of this element\n  // before we encounter a marker, then drop the last one\n  var count = 0;\n\n  for (var i = this.list.length - 1; i >= 0; i--) {\n    if (this.list[i] === this.MARKER) break; // equal() is defined below\n\n    if (equal(elt, this.list[i], this.attrs[i])) {\n      count++;\n\n      if (count === 3) {\n        this.list.splice(i, 1);\n        this.attrs.splice(i, 1);\n        break;\n      }\n    }\n  } // Now push the element onto the list\n\n\n  this.list.push(elt); // Copy the attributes and push those on, too\n\n  var attrcopy = [];\n\n  for (var ii = 0; ii < attrs.length; ii++) {\n    attrcopy[ii] = attrs[ii];\n  }\n\n  this.attrs.push(attrcopy); // This function defines equality of two elements for the purposes\n  // of the AFE list.  Note that it compares the new elements\n  // attributes to the saved array of attributes associated with\n  // the old element because a script could have changed the\n  // old element's set of attributes\n\n  function equal(newelt, oldelt, oldattrs) {\n    if (newelt.localName !== oldelt.localName) return false;\n    if (newelt._numattrs !== oldattrs.length) return false;\n\n    for (var i = 0, n = oldattrs.length; i < n; i++) {\n      var oldname = oldattrs[i][0];\n      var oldval = oldattrs[i][1];\n      if (!newelt.hasAttribute(oldname)) return false;\n      if (newelt.getAttribute(oldname) !== oldval) return false;\n    }\n\n    return true;\n  }\n};\n\nHTMLParser.ActiveFormattingElements.prototype.clearToMarker = function () {\n  for (var i = this.list.length - 1; i >= 0; i--) {\n    if (this.list[i] === this.MARKER) break;\n  }\n\n  if (i < 0) i = 0;\n  this.list.length = i;\n  this.attrs.length = i;\n}; // Find and return the last element with the specified tag between the\n// end of the list and the last marker on the list.\n// Used when parsing <a> in_body_mode()\n\n\nHTMLParser.ActiveFormattingElements.prototype.findElementByTag = function (tag) {\n  for (var i = this.list.length - 1; i >= 0; i--) {\n    var elt = this.list[i];\n    if (elt === this.MARKER) break;\n    if (elt.localName === tag) return elt;\n  }\n\n  return null;\n};\n\nHTMLParser.ActiveFormattingElements.prototype.indexOf = function (e) {\n  return this.list.lastIndexOf(e);\n}; // Find the element e in the list and remove it\n// Used when parsing <a> in_body()\n\n\nHTMLParser.ActiveFormattingElements.prototype.remove = function (e) {\n  var idx = this.list.lastIndexOf(e);\n\n  if (idx !== -1) {\n    this.list.splice(idx, 1);\n    this.attrs.splice(idx, 1);\n  }\n}; // Find element a in the list and replace it with element b\n// XXX: Do I need to handle attributes here?\n\n\nHTMLParser.ActiveFormattingElements.prototype.replace = function (a, b, attrs) {\n  var idx = this.list.lastIndexOf(a);\n\n  if (idx !== -1) {\n    this.list[idx] = b;\n    this.attrs[idx] = attrs;\n  }\n}; // Find a in the list and insert b after it\n// This is only used for insert a bookmark object, so the\n// attrs array doesn't really matter\n\n\nHTMLParser.ActiveFormattingElements.prototype.insertAfter = function (a, b) {\n  var idx = this.list.lastIndexOf(a);\n\n  if (idx !== -1) {\n    this.list.splice(idx, 0, b);\n    this.attrs.splice(idx, 0, b);\n  }\n};\n/***\n * This is the parser factory function. It is the return value of\n * the outer closure that it is defined within.  Most of the parser\n * implementation details are inside this function.\n */\n\n\nfunction HTMLParser(address, fragmentContext, options) {\n  /***\n   * These are the parser's state variables\n   */\n  // Scanner state\n  var chars = null;\n  var numchars = 0; // Length of chars\n\n  var nextchar = 0; // Index of next char\n\n  var input_complete = false; // Becomes true when end() called.\n\n  var scanner_skip_newline = false; // If previous char was CR\n\n  var reentrant_invocations = 0;\n  var saved_scanner_state = [];\n  var leftovers = \"\";\n  var first_batch = true;\n  var paused = 0; // Becomes non-zero while loading scripts\n  // Tokenizer state\n\n  var tokenizer = data_state; // Current tokenizer state\n\n  var return_state;\n  var character_reference_code;\n  var tagnamebuf = \"\";\n  var lasttagname = \"\"; // holds the target end tag for text states\n\n  var tempbuf = [];\n  var attrnamebuf = \"\";\n  var attrvaluebuf = \"\";\n  var commentbuf = [];\n  var doctypenamebuf = [];\n  var doctypepublicbuf = [];\n  var doctypesystembuf = [];\n  var attributes = [];\n  var is_end_tag = false; // Tree builder state\n\n  var parser = initial_mode; // Current insertion mode\n\n  var originalInsertionMode = null; // A saved insertion mode\n\n  var templateInsertionModes = []; // Stack of template insertion modes.\n\n  var stack = new HTMLParser.ElementStack(); // Stack of open elements\n\n  var afe = new HTMLParser.ActiveFormattingElements(); // mis-nested tags\n\n  var fragment = fragmentContext !== undefined; // For innerHTML, etc.\n\n  var head_element_pointer = null;\n  var form_element_pointer = null;\n  var scripting_enabled = true;\n\n  if (fragmentContext) {\n    scripting_enabled = fragmentContext.ownerDocument._scripting_enabled;\n  }\n\n  if (options && options.scripting_enabled === false) scripting_enabled = false;\n  var frameset_ok = true;\n  var force_quirks = false;\n  var pending_table_text;\n  var text_integration_mode; // XXX a spec bug workaround?\n  // A single run of characters, buffered up to be sent to\n  // the parser as a single string.\n\n  var textrun = [];\n  var textIncludesNUL = false;\n  var ignore_linefeed = false;\n  /***\n   * This is the parser object that will be the return value of this\n   * factory function, which is some 5000 lines below.\n   * Note that the variable \"parser\" is the current state of the\n   * parser's state machine.  This variable \"htmlparser\" is the\n   * return value and defines the public API of the parser\n   */\n\n  var htmlparser = {\n    document: function () {\n      return doc;\n    },\n    // Convenience function for internal use. Can only be called once,\n    // as it removes the nodes from `doc` to add them to fragment.\n    _asDocumentFragment: function () {\n      var frag = doc.createDocumentFragment();\n      var root = doc.firstChild;\n\n      while (root.hasChildNodes()) {\n        frag.appendChild(root.firstChild);\n      }\n\n      return frag;\n    },\n    // Internal function used from HTMLScriptElement to pause the\n    // parser while a script is being loaded from the network\n    pause: function () {\n      // print(\"pausing parser\");\n      paused++;\n    },\n    // Called when a script finishes loading\n    resume: function () {\n      // print(\"resuming parser\");\n      paused--; // XXX: added this to force a resumption.\n      // Is this the right thing to do?\n\n      this.parse(\"\");\n    },\n    // Parse the HTML text s.\n    // The second argument should be true if there is no more\n    // text to be parsed, and should be false or omitted otherwise.\n    // The second argument must not be set for recursive invocations\n    // from document.write()\n    parse: function (s, end, shouldPauseFunc) {\n      var moreToDo; // If we're paused, remember the text to parse, but\n      // don't parse it now.\n      // (Don't invoke shouldPauseFunc because we haven't handled 'end' yet.)\n\n      if (paused > 0) {\n        leftovers += s;\n        return true; // more to do\n      }\n\n      if (reentrant_invocations === 0) {\n        // A normal, top-level invocation\n        if (leftovers) {\n          s = leftovers + s;\n          leftovers = \"\";\n        } // Add a special marker character to the end of\n        // the buffer.  If the scanner is at the end of\n        // the buffer and input_complete is set, then this\n        // character will transform into an EOF token.\n        // Having an actual character that represents EOF\n        // in the character buffer makes lookahead regexp\n        // matching work more easily, and this is\n        // important for character references.\n\n\n        if (end) {\n          s += \"\\uFFFF\";\n          input_complete = true; // Makes scanChars() send EOF\n        }\n\n        chars = s;\n        numchars = s.length;\n        nextchar = 0;\n\n        if (first_batch) {\n          // We skip a leading Byte Order Mark (\\uFEFF)\n          // on first batch of text we're given\n          first_batch = false;\n          if (chars.charCodeAt(0) === 0xFEFF) nextchar = 1;\n        }\n\n        reentrant_invocations++;\n        moreToDo = scanChars(shouldPauseFunc);\n        leftovers = chars.substring(nextchar, numchars);\n        reentrant_invocations--;\n      } else {\n        // This is the re-entrant case, which we have to\n        // handle a little differently.\n        reentrant_invocations++; // Save current scanner state\n\n        saved_scanner_state.push(chars, numchars, nextchar); // Set new scanner state\n\n        chars = s;\n        numchars = s.length;\n        nextchar = 0; // Now scan as many of these new chars as we can\n\n        scanChars();\n        moreToDo = false;\n        leftovers = chars.substring(nextchar, numchars); // restore old scanner state\n\n        nextchar = saved_scanner_state.pop();\n        numchars = saved_scanner_state.pop();\n        chars = saved_scanner_state.pop(); // If there were leftover chars from this invocation\n        // insert them into the pending invocation's buffer\n        // and trim already processed chars at the same time\n\n        if (leftovers) {\n          chars = leftovers + chars.substring(nextchar);\n          numchars = chars.length;\n          nextchar = 0;\n          leftovers = \"\";\n        } // Decrement the counter\n\n\n        reentrant_invocations--;\n      }\n\n      return moreToDo;\n    }\n  }; // This is the document we'll be building up\n\n  var doc = new Document(true, address); // The document needs to know about the parser, for document.write().\n  // This _parser property will be deleted when we're done parsing.\n\n  doc._parser = htmlparser; // XXX I think that any document we use this parser on should support\n  // scripts. But I may need to configure that through a parser parameter\n  // Only documents with windows (\"browsing contexts\" to be precise)\n  // allow scripting.\n\n  doc._scripting_enabled = scripting_enabled;\n  /***\n   * The actual code of the HTMLParser() factory function begins here.\n   */\n\n  if (fragmentContext) {\n    // for innerHTML parsing\n    if (fragmentContext.ownerDocument._quirks) doc._quirks = true;\n    if (fragmentContext.ownerDocument._limitedQuirks) doc._limitedQuirks = true; // Set the initial tokenizer state\n\n    if (fragmentContext.namespaceURI === NAMESPACE.HTML) {\n      switch (fragmentContext.localName) {\n        case \"title\":\n        case \"textarea\":\n          tokenizer = rcdata_state;\n          break;\n\n        case \"style\":\n        case \"xmp\":\n        case \"iframe\":\n        case \"noembed\":\n        case \"noframes\":\n        case \"script\":\n        case \"plaintext\":\n          tokenizer = plaintext_state;\n          break;\n\n        case \"noscript\":\n          if (scripting_enabled) tokenizer = plaintext_state;\n      }\n    }\n\n    var root = doc.createElement(\"html\");\n\n    doc._appendChild(root);\n\n    stack.push(root);\n\n    if (fragmentContext instanceof impl.HTMLTemplateElement) {\n      templateInsertionModes.push(in_template_mode);\n    }\n\n    resetInsertionMode();\n\n    for (var e = fragmentContext; e !== null; e = e.parentElement) {\n      if (e instanceof impl.HTMLFormElement) {\n        form_element_pointer = e;\n        break;\n      }\n    }\n  }\n  /***\n   * Scanner functions\n   */\n  // Loop through the characters in chars, and pass them one at a time\n  // to the tokenizer FSM. Return when no more characters can be processed\n  // (This may leave 1 or more characters in the buffer: like a CR\n  // waiting to see if the next char is LF, or for states that require\n  // lookahead...)\n\n\n  function scanChars(shouldPauseFunc) {\n    var codepoint, s, pattern, eof;\n\n    while (nextchar < numchars) {\n      // If we just tokenized a </script> tag, then the paused flag\n      // may have been set to tell us to stop tokenizing while\n      // the script is loading\n      if (paused > 0 || shouldPauseFunc && shouldPauseFunc()) {\n        return true;\n      }\n\n      switch (typeof tokenizer.lookahead) {\n        case 'undefined':\n          codepoint = chars.charCodeAt(nextchar++);\n\n          if (scanner_skip_newline) {\n            scanner_skip_newline = false;\n\n            if (codepoint === 0x000A) {\n              nextchar++;\n              continue;\n            }\n          }\n\n          switch (codepoint) {\n            case 0x000D:\n              // CR always turns into LF, but if the next character\n              // is LF, then that second LF is skipped.\n              if (nextchar < numchars) {\n                if (chars.charCodeAt(nextchar) === 0x000A) nextchar++;\n              } else {\n                // We don't know the next char right now, so we\n                // can't check if it is a LF.  So set a flag\n                scanner_skip_newline = true;\n              } // In either case, emit a LF\n\n\n              tokenizer(0x000A);\n              break;\n\n            case 0xFFFF:\n              if (input_complete && nextchar === numchars) {\n                tokenizer(EOF); // codepoint will be 0xFFFF here\n\n                break;\n              }\n\n            /* falls through */\n\n            default:\n              tokenizer(codepoint);\n              break;\n          }\n\n          break;\n\n        case 'number':\n          codepoint = chars.charCodeAt(nextchar); // The only tokenizer states that require fixed lookahead\n          // only consume alphanum characters, so we don't have\n          // to worry about CR and LF in this case\n          // tokenizer wants n chars of lookahead\n\n          var n = tokenizer.lookahead;\n          var needsString = true;\n\n          if (n < 0) {\n            needsString = false;\n            n = -n;\n          }\n\n          if (n < numchars - nextchar) {\n            // If we can look ahead that far\n            s = needsString ? chars.substring(nextchar, nextchar + n) : null;\n            eof = false;\n          } else {\n            // if we don't have that many characters\n            if (input_complete) {\n              // If no more are coming\n              // Just return what we have\n              s = needsString ? chars.substring(nextchar, numchars) : null;\n              eof = true;\n              if (codepoint === 0xFFFF && nextchar === numchars - 1) codepoint = EOF;\n            } else {\n              // Return now and wait for more chars later\n              return true;\n            }\n          }\n\n          tokenizer(codepoint, s, eof);\n          break;\n\n        case 'string':\n          codepoint = chars.charCodeAt(nextchar); // tokenizer wants characters up to a matching string\n\n          pattern = tokenizer.lookahead;\n          var pos = chars.indexOf(pattern, nextchar);\n\n          if (pos !== -1) {\n            s = chars.substring(nextchar, pos + pattern.length);\n            eof = false;\n          } else {\n            // No match\n            // If more characters coming, wait for them\n            if (!input_complete) return true; // Otherwise, we've got to return what we've got\n\n            s = chars.substring(nextchar, numchars);\n            if (codepoint === 0xFFFF && nextchar === numchars - 1) codepoint = EOF;\n            eof = true;\n          } // The tokenizer states that require this kind of\n          // lookahead have to be careful to handle CR characters\n          // correctly\n\n\n          tokenizer(codepoint, s, eof);\n          break;\n      }\n    }\n\n    return false; // no more characters to scan!\n  }\n  /***\n   * Tokenizer utility functions\n   */\n\n\n  function addAttribute(name, value) {\n    // Make sure there isn't already an attribute with this name\n    // If there is, ignore this one.\n    for (var i = 0; i < attributes.length; i++) {\n      if (attributes[i][0] === name) return;\n    }\n\n    if (value !== undefined) {\n      attributes.push([name, value]);\n    } else {\n      attributes.push([name]);\n    }\n  } // Shortcut for simple attributes\n\n\n  function handleSimpleAttribute() {\n    SIMPLEATTR.lastIndex = nextchar - 1;\n    var matched = SIMPLEATTR.exec(chars);\n    if (!matched) throw new Error(\"should never happen\");\n    var name = matched[1];\n    if (!name) return false;\n    var value = matched[2];\n    var len = value.length;\n\n    switch (value[0]) {\n      case '\"':\n      case \"'\":\n        value = value.substring(1, len - 1);\n        nextchar += matched[0].length - 1;\n        tokenizer = after_attribute_value_quoted_state;\n        break;\n\n      default:\n        tokenizer = before_attribute_name_state;\n        nextchar += matched[0].length - 1;\n        value = value.substring(0, len - 1);\n        break;\n    } // Make sure there isn't already an attribute with this name\n    // If there is, ignore this one.\n\n\n    for (var i = 0; i < attributes.length; i++) {\n      if (attributes[i][0] === name) return true;\n    }\n\n    attributes.push([name, value]);\n    return true;\n  }\n\n  function beginTagName() {\n    is_end_tag = false;\n    tagnamebuf = \"\";\n    attributes.length = 0;\n  }\n\n  function beginEndTagName() {\n    is_end_tag = true;\n    tagnamebuf = \"\";\n    attributes.length = 0;\n  }\n\n  function beginTempBuf() {\n    tempbuf.length = 0;\n  }\n\n  function beginAttrName() {\n    attrnamebuf = \"\";\n  }\n\n  function beginAttrValue() {\n    attrvaluebuf = \"\";\n  }\n\n  function beginComment() {\n    commentbuf.length = 0;\n  }\n\n  function beginDoctype() {\n    doctypenamebuf.length = 0;\n    doctypepublicbuf = null;\n    doctypesystembuf = null;\n  }\n\n  function beginDoctypePublicId() {\n    doctypepublicbuf = [];\n  }\n\n  function beginDoctypeSystemId() {\n    doctypesystembuf = [];\n  }\n\n  function forcequirks() {\n    force_quirks = true;\n  }\n\n  function cdataAllowed() {\n    return stack.top && stack.top.namespaceURI !== \"http://www.w3.org/1999/xhtml\";\n  } // Return true if the codepoints in the specified buffer match the\n  // characters of lasttagname\n\n\n  function appropriateEndTag(buf) {\n    return lasttagname === buf;\n  }\n\n  function flushText() {\n    if (textrun.length > 0) {\n      var s = buf2str(textrun);\n      textrun.length = 0;\n\n      if (ignore_linefeed) {\n        ignore_linefeed = false;\n        if (s[0] === \"\\n\") s = s.substring(1);\n        if (s.length === 0) return;\n      }\n\n      insertToken(TEXT, s);\n      textIncludesNUL = false;\n    }\n\n    ignore_linefeed = false;\n  } // Consume chars matched by the pattern and return them as a string. Starts\n  // matching at the current position, so users should drop the current char\n  // otherwise.\n\n\n  function getMatchingChars(pattern) {\n    pattern.lastIndex = nextchar - 1;\n    var match = pattern.exec(chars);\n\n    if (match && match.index === nextchar - 1) {\n      match = match[0];\n      nextchar += match.length - 1;\n      /* Careful!  Make sure we haven't matched the EOF character! */\n\n      if (input_complete && nextchar === numchars) {\n        // Oops, backup one.\n        match = match.slice(0, -1);\n        nextchar--;\n      }\n\n      return match;\n    } else {\n      throw new Error(\"should never happen\");\n    }\n  } // emit a string of chars that match a regexp\n  // Returns false if no chars matched.\n\n\n  function emitCharsWhile(pattern) {\n    pattern.lastIndex = nextchar - 1;\n    var match = pattern.exec(chars)[0];\n    if (!match) return false;\n    emitCharString(match);\n    nextchar += match.length - 1;\n    return true;\n  } // This is used by CDATA sections\n\n\n  function emitCharString(s) {\n    if (textrun.length > 0) flushText();\n\n    if (ignore_linefeed) {\n      ignore_linefeed = false;\n      if (s[0] === \"\\n\") s = s.substring(1);\n      if (s.length === 0) return;\n    }\n\n    insertToken(TEXT, s);\n  }\n\n  function emitTag() {\n    if (is_end_tag) insertToken(ENDTAG, tagnamebuf);else {\n      // Remember the last open tag we emitted\n      var tagname = tagnamebuf;\n      tagnamebuf = \"\";\n      lasttagname = tagname;\n      insertToken(TAG, tagname, attributes);\n    }\n  } // A shortcut: look ahead and if this is a open or close tag\n  // in lowercase with no spaces and no attributes, just emit it now.\n\n\n  function emitSimpleTag() {\n    if (nextchar === numchars) {\n      return false;\n      /* not even 1 char left */\n    }\n\n    SIMPLETAG.lastIndex = nextchar;\n    var matched = SIMPLETAG.exec(chars);\n    if (!matched) throw new Error(\"should never happen\");\n    var tagname = matched[2];\n    if (!tagname) return false;\n    var endtag = matched[1];\n\n    if (endtag) {\n      nextchar += tagname.length + 2;\n      insertToken(ENDTAG, tagname);\n    } else {\n      nextchar += tagname.length + 1;\n      lasttagname = tagname;\n      insertToken(TAG, tagname, NOATTRS);\n    }\n\n    return true;\n  }\n\n  function emitSelfClosingTag() {\n    if (is_end_tag) insertToken(ENDTAG, tagnamebuf, null, true);else {\n      insertToken(TAG, tagnamebuf, attributes, true);\n    }\n  }\n\n  function emitDoctype() {\n    insertToken(DOCTYPE, buf2str(doctypenamebuf), doctypepublicbuf ? buf2str(doctypepublicbuf) : undefined, doctypesystembuf ? buf2str(doctypesystembuf) : undefined);\n  }\n\n  function emitEOF() {\n    flushText();\n    parser(EOF); // EOF never goes to insertForeignContent()\n\n    doc.modclock = 1; // Start tracking modifications\n  } // Insert a token, either using the current parser insertion mode\n  // (for HTML stuff) or using the insertForeignToken() method.\n\n\n  var insertToken = htmlparser.insertToken = function insertToken(t, value, arg3, arg4) {\n    flushText();\n    var current = stack.top;\n\n    if (!current || current.namespaceURI === NAMESPACE.HTML) {\n      // This is the common case\n      parser(t, value, arg3, arg4);\n    } else {\n      // Otherwise we may need to insert this token as foreign content\n      if (t !== TAG && t !== TEXT) {\n        insertForeignToken(t, value, arg3, arg4);\n      } else {\n        // But in some cases we treat it as regular content\n        if (isMathmlTextIntegrationPoint(current) && (t === TEXT || t === TAG && value !== \"mglyph\" && value !== \"malignmark\") || t === TAG && value === \"svg\" && current.namespaceURI === NAMESPACE.MATHML && current.localName === \"annotation-xml\" || isHTMLIntegrationPoint(current)) {\n          // XXX: the text_integration_mode stuff is an\n          // attempted bug workaround of mine\n          text_integration_mode = true;\n          parser(t, value, arg3, arg4);\n          text_integration_mode = false;\n        } // Otherwise it is foreign content\n        else {\n          insertForeignToken(t, value, arg3, arg4);\n        }\n      }\n    }\n  };\n  /***\n   * Tree building utility functions\n   */\n\n\n  function insertComment(data) {\n    var parent = stack.top;\n\n    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {\n      fosterParent(function (doc) {\n        return doc.createComment(data);\n      });\n    } else {\n      // \"If the adjusted insertion location is inside a template element,\n      // let it instead be inside the template element's template contents\"\n      if (parent instanceof impl.HTMLTemplateElement) {\n        parent = parent.content;\n      }\n\n      parent._appendChild(parent.ownerDocument.createComment(data));\n    }\n  }\n\n  function insertText(s) {\n    var parent = stack.top;\n\n    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {\n      fosterParent(function (doc) {\n        return doc.createTextNode(s);\n      });\n    } else {\n      // \"If the adjusted insertion location is inside a template element,\n      // let it instead be inside the template element's template contents\"\n      if (parent instanceof impl.HTMLTemplateElement) {\n        parent = parent.content;\n      } // \"If there is a Text node immediately before the adjusted insertion\n      // location, then append data to that Text node's data.\"\n\n\n      var lastChild = parent.lastChild;\n\n      if (lastChild && lastChild.nodeType === Node.TEXT_NODE) {\n        lastChild.appendData(s);\n      } else {\n        parent._appendChild(parent.ownerDocument.createTextNode(s));\n      }\n    }\n  }\n\n  function createHTMLElt(doc, name, attrs) {\n    // Create the element this way, rather than with\n    // doc.createElement because createElement() does error\n    // checking on the element name that we need to avoid here.\n    var elt = html.createElement(doc, name, null);\n\n    if (attrs) {\n      for (var i = 0, n = attrs.length; i < n; i++) {\n        // Use the _ version to avoid testing the validity\n        // of the attribute name\n        elt._setAttribute(attrs[i][0], attrs[i][1]);\n      }\n    } // XXX\n    // If the element is a resettable form element,\n    // run its reset algorithm now\n    // XXX\n    // handle case where form-element-pointer is not null\n\n\n    return elt;\n  } // The in_table insertion mode turns on this flag, and that makes\n  // insertHTMLElement use the foster parenting algorithm for elements\n  // tags inside a table\n\n\n  var foster_parent_mode = false;\n\n  function insertHTMLElement(name, attrs) {\n    var elt = insertElement(function (doc) {\n      return createHTMLElt(doc, name, attrs);\n    }); // XXX\n    // If this is a form element, set its form attribute property here\n\n    if (isA(elt, formassociatedSet)) {\n      elt._form = form_element_pointer;\n    }\n\n    return elt;\n  } // Insert the element into the open element or foster parent it\n\n\n  function insertElement(eltFunc) {\n    var elt;\n\n    if (foster_parent_mode && isA(stack.top, tablesectionrowSet)) {\n      elt = fosterParent(eltFunc);\n    } else if (stack.top instanceof impl.HTMLTemplateElement) {\n      // \"If the adjusted insertion location is inside a template element,\n      // let it instead be inside the template element's template contents\"\n      elt = eltFunc(stack.top.content.ownerDocument);\n\n      stack.top.content._appendChild(elt);\n    } else {\n      elt = eltFunc(stack.top.ownerDocument);\n\n      stack.top._appendChild(elt);\n    }\n\n    stack.push(elt);\n    return elt;\n  }\n\n  function insertForeignElement(name, attrs, ns) {\n    return insertElement(function (doc) {\n      // We need to prevent createElementNS from trying to parse `name` as a\n      // `qname`, so use an internal Document#_createElementNS() interface.\n      var elt = doc._createElementNS(name, ns, null);\n\n      if (attrs) {\n        for (var i = 0, n = attrs.length; i < n; i++) {\n          var attr = attrs[i];\n          if (attr.length === 2) elt._setAttribute(attr[0], attr[1]);else {\n            elt._setAttributeNS(attr[2], attr[0], attr[1]);\n          }\n        }\n      }\n\n      return elt;\n    });\n  }\n\n  function lastElementOfType(type) {\n    for (var i = stack.elements.length - 1; i >= 0; i--) {\n      if (stack.elements[i] instanceof type) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  function fosterParent(eltFunc) {\n    var parent,\n        before,\n        lastTable = -1,\n        lastTemplate = -1,\n        elt;\n    lastTable = lastElementOfType(impl.HTMLTableElement);\n    lastTemplate = lastElementOfType(impl.HTMLTemplateElement);\n\n    if (lastTemplate >= 0 && (lastTable < 0 || lastTemplate > lastTable)) {\n      parent = stack.elements[lastTemplate];\n    } else if (lastTable >= 0) {\n      parent = stack.elements[lastTable].parentNode;\n\n      if (parent) {\n        before = stack.elements[lastTable];\n      } else {\n        parent = stack.elements[lastTable - 1];\n      }\n    }\n\n    if (!parent) parent = stack.elements[0]; // the `html` element.\n    // \"If the adjusted insertion location is inside a template element,\n    // let it instead be inside the template element's template contents\"\n\n    if (parent instanceof impl.HTMLTemplateElement) {\n      parent = parent.content;\n    } // Create element in the appropriate document.\n\n\n    elt = eltFunc(parent.ownerDocument);\n\n    if (elt.nodeType === Node.TEXT_NODE) {\n      var prev;\n      if (before) prev = before.previousSibling;else prev = parent.lastChild;\n\n      if (prev && prev.nodeType === Node.TEXT_NODE) {\n        prev.appendData(elt.data);\n        return elt;\n      }\n    }\n\n    if (before) parent.insertBefore(elt, before);else parent._appendChild(elt);\n    return elt;\n  }\n\n  function resetInsertionMode() {\n    var last = false;\n\n    for (var i = stack.elements.length - 1; i >= 0; i--) {\n      var node = stack.elements[i];\n\n      if (i === 0) {\n        last = true;\n\n        if (fragment) {\n          node = fragmentContext;\n        }\n      }\n\n      if (node.namespaceURI === NAMESPACE.HTML) {\n        var tag = node.localName;\n\n        switch (tag) {\n          case \"select\":\n            for (var j = i; j > 0;) {\n              var ancestor = stack.elements[--j];\n\n              if (ancestor instanceof impl.HTMLTemplateElement) {\n                break;\n              } else if (ancestor instanceof impl.HTMLTableElement) {\n                parser = in_select_in_table_mode;\n                return;\n              }\n            }\n\n            parser = in_select_mode;\n            return;\n\n          case \"tr\":\n            parser = in_row_mode;\n            return;\n\n          case \"tbody\":\n          case \"tfoot\":\n          case \"thead\":\n            parser = in_table_body_mode;\n            return;\n\n          case \"caption\":\n            parser = in_caption_mode;\n            return;\n\n          case \"colgroup\":\n            parser = in_column_group_mode;\n            return;\n\n          case \"table\":\n            parser = in_table_mode;\n            return;\n\n          case \"template\":\n            parser = templateInsertionModes[templateInsertionModes.length - 1];\n            return;\n\n          case \"body\":\n            parser = in_body_mode;\n            return;\n\n          case \"frameset\":\n            parser = in_frameset_mode;\n            return;\n\n          case \"html\":\n            if (head_element_pointer === null) {\n              parser = before_head_mode;\n            } else {\n              parser = after_head_mode;\n            }\n\n            return;\n\n          default:\n            if (!last) {\n              if (tag === \"head\") {\n                parser = in_head_mode;\n                return;\n              }\n\n              if (tag === \"td\" || tag === \"th\") {\n                parser = in_cell_mode;\n                return;\n              }\n            }\n\n        }\n      }\n\n      if (last) {\n        parser = in_body_mode;\n        return;\n      }\n    }\n  }\n\n  function parseRawText(name, attrs) {\n    insertHTMLElement(name, attrs);\n    tokenizer = rawtext_state;\n    originalInsertionMode = parser;\n    parser = text_mode;\n  }\n\n  function parseRCDATA(name, attrs) {\n    insertHTMLElement(name, attrs);\n    tokenizer = rcdata_state;\n    originalInsertionMode = parser;\n    parser = text_mode;\n  } // Make a copy of element i on the list of active formatting\n  // elements, using its original attributes, not current\n  // attributes (which may have been modified by a script)\n\n\n  function afeclone(doc, i) {\n    return {\n      elt: createHTMLElt(doc, afe.list[i].localName, afe.attrs[i]),\n      attrs: afe.attrs[i]\n    };\n  }\n\n  function afereconstruct() {\n    if (afe.list.length === 0) return;\n    var entry = afe.list[afe.list.length - 1]; // If the last is a marker , do nothing\n\n    if (entry === afe.MARKER) return; // Or if it is an open element, do nothing\n\n    if (stack.elements.lastIndexOf(entry) !== -1) return; // Loop backward through the list until we find a marker or an\n    // open element, and then move forward one from there.\n\n    for (var i = afe.list.length - 2; i >= 0; i--) {\n      entry = afe.list[i];\n      if (entry === afe.MARKER) break;\n      if (stack.elements.lastIndexOf(entry) !== -1) break;\n    } // Now loop forward, starting from the element after the current\n    // one, recreating formatting elements and pushing them back onto\n    // the list of open elements\n\n\n    for (i = i + 1; i < afe.list.length; i++) {\n      var newelt = insertElement(function (doc) {\n        return afeclone(doc, i).elt;\n      });\n      afe.list[i] = newelt;\n    }\n  } // Used by the adoptionAgency() function\n\n\n  var BOOKMARK = {\n    localName: \"BM\"\n  };\n\n  function adoptionAgency(tag) {\n    // If the current node is an HTML element whose tag name is subject,\n    // and the current node is not in the list of active formatting\n    // elements, then pop the current node off the stack of open\n    // elements and abort these steps.\n    if (isA(stack.top, tag) && afe.indexOf(stack.top) === -1) {\n      stack.pop();\n      return true; // no more handling required\n    } // Let outer loop counter be zero.\n\n\n    var outer = 0; // Outer loop: If outer loop counter is greater than or\n    // equal to eight, then abort these steps.\n\n    while (outer < 8) {\n      // Increment outer loop counter by one.\n      outer++; // Let the formatting element be the last element in the list\n      // of active formatting elements that: is between the end of\n      // the list and the last scope marker in the list, if any, or\n      // the start of the list otherwise, and has the same tag name\n      // as the token.\n\n      var fmtelt = afe.findElementByTag(tag); // If there is no such node, then abort these steps and instead\n      // act as described in the \"any other end tag\" entry below.\n\n      if (!fmtelt) {\n        return false; // false means handle by the default case\n      } // Otherwise, if there is such a node, but that node is not in\n      // the stack of open elements, then this is a parse error;\n      // remove the element from the list, and abort these steps.\n\n\n      var index = stack.elements.lastIndexOf(fmtelt);\n\n      if (index === -1) {\n        afe.remove(fmtelt);\n        return true; // true means no more handling required\n      } // Otherwise, if there is such a node, and that node is also in\n      // the stack of open elements, but the element is not in scope,\n      // then this is a parse error; ignore the token, and abort\n      // these steps.\n\n\n      if (!stack.elementInScope(fmtelt)) {\n        return true;\n      } // Let the furthest block be the topmost node in the stack of\n      // open elements that is lower in the stack than the formatting\n      // element, and is an element in the special category. There\n      // might not be one.\n\n\n      var furthestblock = null,\n          furthestblockindex;\n\n      for (var i = index + 1; i < stack.elements.length; i++) {\n        if (isA(stack.elements[i], specialSet)) {\n          furthestblock = stack.elements[i];\n          furthestblockindex = i;\n          break;\n        }\n      } // If there is no furthest block, then the UA must skip the\n      // subsequent steps and instead just pop all the nodes from the\n      // bottom of the stack of open elements, from the current node\n      // up to and including the formatting element, and remove the\n      // formatting element from the list of active formatting\n      // elements.\n\n\n      if (!furthestblock) {\n        stack.popElement(fmtelt);\n        afe.remove(fmtelt);\n        return true;\n      } else {\n        // Let the common ancestor be the element immediately above\n        // the formatting element in the stack of open elements.\n        var ancestor = stack.elements[index - 1]; // Let a bookmark note the position of the formatting\n        // element in the list of active formatting elements\n        // relative to the elements on either side of it in the\n        // list.\n\n        afe.insertAfter(fmtelt, BOOKMARK); // Let node and last node be the furthest block.\n\n        var node = furthestblock;\n        var lastnode = furthestblock;\n        var nodeindex = furthestblockindex;\n        var nodeafeindex; // Let inner loop counter be zero.\n\n        var inner = 0;\n\n        while (true) {\n          // Increment inner loop counter by one.\n          inner++; // Let node be the element immediately above node in\n          // the stack of open elements, or if node is no longer\n          // in the stack of open elements (e.g. because it got\n          // removed by this algorithm), the element that was\n          // immediately above node in the stack of open elements\n          // before node was removed.\n\n          node = stack.elements[--nodeindex]; // If node is the formatting element, then go\n          // to the next step in the overall algorithm.\n\n          if (node === fmtelt) break; // If the inner loop counter is greater than three and node\n          // is in the list of active formatting elements, then remove\n          // node from the list of active formatting elements.\n\n          nodeafeindex = afe.indexOf(node);\n\n          if (inner > 3 && nodeafeindex !== -1) {\n            afe.remove(node);\n            nodeafeindex = -1;\n          } // If node is not in the list of active formatting\n          // elements, then remove node from the stack of open\n          // elements and then go back to the step labeled inner\n          // loop.\n\n\n          if (nodeafeindex === -1) {\n            stack.removeElement(node);\n            continue;\n          } // Create an element for the token for which the\n          // element node was created with common ancestor as\n          // the intended parent, replace the entry for node\n          // in the list of active formatting elements with an\n          // entry for the new element, replace the entry for\n          // node in the stack of open elements with an entry for\n          // the new element, and let node be the new element.\n\n\n          var newelt = afeclone(ancestor.ownerDocument, nodeafeindex);\n          afe.replace(node, newelt.elt, newelt.attrs);\n          stack.elements[nodeindex] = newelt.elt;\n          node = newelt.elt; // If last node is the furthest block, then move the\n          // aforementioned bookmark to be immediately after the\n          // new node in the list of active formatting elements.\n\n          if (lastnode === furthestblock) {\n            afe.remove(BOOKMARK);\n            afe.insertAfter(newelt.elt, BOOKMARK);\n          } // Insert last node into node, first removing it from\n          // its previous parent node if any.\n\n\n          node._appendChild(lastnode); // Let last node be node.\n\n\n          lastnode = node;\n        } // If the common ancestor node is a table, tbody, tfoot,\n        // thead, or tr element, then, foster parent whatever last\n        // node ended up being in the previous step, first removing\n        // it from its previous parent node if any.\n\n\n        if (foster_parent_mode && isA(ancestor, tablesectionrowSet)) {\n          fosterParent(function () {\n            return lastnode;\n          });\n        } // Otherwise, append whatever last node ended up being in\n        // the previous step to the common ancestor node, first\n        // removing it from its previous parent node if any.\n        else if (ancestor instanceof impl.HTMLTemplateElement) {\n          ancestor.content._appendChild(lastnode);\n        } else {\n          ancestor._appendChild(lastnode);\n        } // Create an element for the token for which the\n        // formatting element was created, with furthest block\n        // as the intended parent.\n\n\n        var newelt2 = afeclone(furthestblock.ownerDocument, afe.indexOf(fmtelt)); // Take all of the child nodes of the furthest block and\n        // append them to the element created in the last step.\n\n        while (furthestblock.hasChildNodes()) {\n          newelt2.elt._appendChild(furthestblock.firstChild);\n        } // Append that new element to the furthest block.\n\n\n        furthestblock._appendChild(newelt2.elt); // Remove the formatting element from the list of active\n        // formatting elements, and insert the new element into the\n        // list of active formatting elements at the position of\n        // the aforementioned bookmark.\n\n\n        afe.remove(fmtelt);\n        afe.replace(BOOKMARK, newelt2.elt, newelt2.attrs); // Remove the formatting element from the stack of open\n        // elements, and insert the new element into the stack of\n        // open elements immediately below the position of the\n        // furthest block in that stack.\n\n        stack.removeElement(fmtelt);\n        var pos = stack.elements.lastIndexOf(furthestblock);\n        stack.elements.splice(pos + 1, 0, newelt2.elt);\n      }\n    }\n\n    return true;\n  } // We do this when we get /script in in_text_mode\n\n\n  function handleScriptEnd() {\n    // XXX:\n    // This is just a stub implementation right now and doesn't run scripts.\n    // Getting this method right involves the event loop, URL resolution\n    // script fetching etc. For now I just want to be able to parse\n    // documents and test the parser.\n    //var script = stack.top;\n    stack.pop();\n    parser = originalInsertionMode; //script._prepare();\n\n    return; // XXX: here is what this method is supposed to do\n    // Provide a stable state.\n    // Let script be the current node (which will be a script\n    // element).\n    // Pop the current node off the stack of open elements.\n    // Switch the insertion mode to the original insertion mode.\n    // Let the old insertion point have the same value as the current\n    // insertion point. Let the insertion point be just before the\n    // next input character.\n    // Increment the parser's script nesting level by one.\n    // Prepare the script. This might cause some script to execute,\n    // which might cause new characters to be inserted into the\n    // tokenizer, and might cause the tokenizer to output more tokens,\n    // resulting in a reentrant invocation of the parser.\n    // Decrement the parser's script nesting level by one. If the\n    // parser's script nesting level is zero, then set the parser\n    // pause flag to false.\n    // Let the insertion point have the value of the old insertion\n    // point. (In other words, restore the insertion point to its\n    // previous value. This value might be the \"undefined\" value.)\n    // At this stage, if there is a pending parsing-blocking script,\n    // then:\n    // If the script nesting level is not zero:\n    //   Set the parser pause flag to true, and abort the processing\n    //   of any nested invocations of the tokenizer, yielding\n    //   control back to the caller. (Tokenization will resume when\n    //   the caller returns to the \"outer\" tree construction stage.)\n    //   The tree construction stage of this particular parser is\n    //   being called reentrantly, say from a call to\n    //   document.write().\n    // Otherwise:\n    //     Run these steps:\n    //       Let the script be the pending parsing-blocking\n    //       script. There is no longer a pending\n    //       parsing-blocking script.\n    //       Block the tokenizer for this instance of the HTML\n    //       parser, such that the event loop will not run tasks\n    //       that invoke the tokenizer.\n    //       If the parser's Document has a style sheet that is\n    //       blocking scripts or the script's \"ready to be\n    //       parser-executed\" flag is not set: spin the event\n    //       loop until the parser's Document has no style sheet\n    //       that is blocking scripts and the script's \"ready to\n    //       be parser-executed\" flag is set.\n    //       Unblock the tokenizer for this instance of the HTML\n    //       parser, such that tasks that invoke the tokenizer\n    //       can again be run.\n    //       Let the insertion point be just before the next\n    //       input character.\n    //       Increment the parser's script nesting level by one\n    //       (it should be zero before this step, so this sets\n    //       it to one).\n    //       Execute the script.\n    //       Decrement the parser's script nesting level by\n    //       one. If the parser's script nesting level is zero\n    //       (which it always should be at this point), then set\n    //       the parser pause flag to false.\n    //       Let the insertion point be undefined again.\n    //       If there is once again a pending parsing-blocking\n    //       script, then repeat these steps from step 1.\n  }\n\n  function stopParsing() {\n    // XXX This is just a temporary implementation to get the parser working.\n    // A full implementation involves scripts and events and the event loop.\n    // Remove the link from document to parser.\n    // This is instead of \"set the insertion point to undefined\".\n    // It means that document.write() can't write into the doc anymore.\n    delete doc._parser;\n    stack.elements.length = 0; // pop everything off\n    // If there is a window object associated with the document\n    // then trigger an load event on it\n\n    if (doc.defaultView) {\n      doc.defaultView.dispatchEvent(new impl.Event(\"load\", {}));\n    }\n  }\n  /****\n   * Tokenizer states\n   */\n\n  /**\n   * This file was partially mechanically generated from\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html\n   *\n   * After mechanical conversion, it was further converted from\n   * prose to JS by hand, but the intent is that it is a very\n   * faithful rendering of the HTML tokenization spec in\n   * JavaScript.\n   *\n   * It is not a goal of this tokenizer to detect or report\n   * parse errors.\n   *\n   * XXX The tokenizer is supposed to work with straight UTF32\n   * codepoints. But I don't think it has any dependencies on\n   * any character outside of the BMP so I think it is safe to\n   * pass it UTF16 characters. I don't think it will ever change\n   * state in the middle of a surrogate pair.\n   */\n\n  /*\n   * Each state is represented by a function.  For most states, the\n   * scanner simply passes the next character (as an integer\n   * codepoint) to the current state function and automatically\n   * consumes the character.  If the state function can't process\n   * the character it can call pushback() to push it back to the\n   * scanner.\n   *\n   * Some states require lookahead, though.  If a state function has\n   * a lookahead property, then it is invoked differently.  In this\n   * case, the scanner invokes the function with 3 arguments: 1) the\n   * next codepoint 2) a string of lookahead text 3) a boolean that\n   * is true if the lookahead goes all the way to the EOF. (XXX\n   * actually maybe this third is not necessary... the lookahead\n   * could just include \\uFFFF?)\n   *\n   * If the lookahead property of a state function is an integer, it\n   * specifies the number of characters required. If it is a string,\n   * then the scanner will scan for that string and return all\n   * characters up to and including that sequence, or up to EOF.  If\n   * the lookahead property is a regexp, then the scanner will match\n   * the regexp at the current point and return the matching string.\n   *\n   * States that require lookahead are responsible for explicitly\n   * consuming the characters they process. They do this by\n   * incrementing nextchar by the number of processed characters.\n   */\n\n\n  function reconsume(c, new_state) {\n    tokenizer = new_state;\n    nextchar--; // pushback\n  }\n\n  function data_state(c) {\n    switch (c) {\n      case 0x0026:\n        // AMPERSAND\n        return_state = data_state;\n        tokenizer = character_reference_state;\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        if (emitSimpleTag()) // Shortcut for <p>, <dl>, </div> etc.\n          break;\n        tokenizer = tag_open_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        // Usually null characters emitted by the tokenizer will be\n        // ignored by the tree builder, but sometimes they'll be\n        // converted to \\uFFFD.  I don't want to have the search every\n        // string emitted to replace NULs, so I'll set a flag\n        // if I've emitted a NUL.\n        textrun.push(c);\n        textIncludesNUL = true;\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        // Instead of just pushing a single character and then\n        // coming back to the very same place, lookahead and\n        // emit everything we can at once.\n\n        /*jshint -W030 */\n        emitCharsWhile(DATATEXT) || textrun.push(c);\n        break;\n    }\n  }\n\n  function rcdata_state(c) {\n    // Save the open tag so we can find a matching close tag\n    switch (c) {\n      case 0x0026:\n        // AMPERSAND\n        return_state = rcdata_state;\n        tokenizer = character_reference_state;\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = rcdata_less_than_sign_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        textIncludesNUL = true;\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        textrun.push(c);\n        break;\n    }\n  }\n\n  function rawtext_state(c) {\n    switch (c) {\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = rawtext_less_than_sign_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        /*jshint -W030 */\n        emitCharsWhile(RAWTEXT) || textrun.push(c);\n        break;\n    }\n  }\n\n  function script_data_state(c) {\n    switch (c) {\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = script_data_less_than_sign_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        /*jshint -W030 */\n        emitCharsWhile(RAWTEXT) || textrun.push(c);\n        break;\n    }\n  }\n\n  function plaintext_state(c) {\n    switch (c) {\n      case 0x0000:\n        // NULL\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        /*jshint -W030 */\n        emitCharsWhile(PLAINTEXT) || textrun.push(c);\n        break;\n    }\n  }\n\n  function tag_open_state(c) {\n    switch (c) {\n      case 0x0021:\n        // EXCLAMATION MARK\n        tokenizer = markup_declaration_open_state;\n        break;\n\n      case 0x002F:\n        // SOLIDUS\n        tokenizer = end_tag_open_state;\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        beginTagName();\n        reconsume(c, tag_name_state);\n        break;\n\n      case 0x003F:\n        // QUESTION MARK\n        reconsume(c, bogus_comment_state);\n        break;\n\n      default:\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        reconsume(c, data_state);\n        break;\n    }\n  }\n\n  function end_tag_open_state(c) {\n    switch (c) {\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        beginEndTagName();\n        reconsume(c, tag_name_state);\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        break;\n\n      case -1:\n        // EOF\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        textrun.push(0x002F); // SOLIDUS\n\n        emitEOF();\n        break;\n\n      default:\n        reconsume(c, bogus_comment_state);\n        break;\n    }\n  }\n\n  function tag_name_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        tokenizer = before_attribute_name_state;\n        break;\n\n      case 0x002F:\n        // SOLIDUS\n        tokenizer = self_closing_start_tag_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        emitTag();\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        tagnamebuf += String.fromCharCode(c + 0x0020);\n        break;\n\n      case 0x0000:\n        // NULL\n        tagnamebuf += String.fromCharCode(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        tagnamebuf += getMatchingChars(TAGNAME);\n        break;\n    }\n  }\n\n  function rcdata_less_than_sign_state(c) {\n    /* identical to the RAWTEXT less-than sign state, except s/RAWTEXT/RCDATA/g */\n    if (c === 0x002F) {\n      // SOLIDUS\n      beginTempBuf();\n      tokenizer = rcdata_end_tag_open_state;\n    } else {\n      textrun.push(0x003C); // LESS-THAN SIGN\n\n      reconsume(c, rcdata_state);\n    }\n  }\n\n  function rcdata_end_tag_open_state(c) {\n    /* identical to the RAWTEXT (and Script data) end tag open state, except s/RAWTEXT/RCDATA/g */\n    switch (c) {\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        beginEndTagName();\n        reconsume(c, rcdata_end_tag_name_state);\n        break;\n\n      default:\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        textrun.push(0x002F); // SOLIDUS\n\n        reconsume(c, rcdata_state);\n        break;\n    }\n  }\n\n  function rcdata_end_tag_name_state(c) {\n    /* identical to the RAWTEXT (and Script data) end tag name state, except s/RAWTEXT/RCDATA/g */\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = before_attribute_name_state;\n          return;\n        }\n\n        break;\n\n      case 0x002F:\n        // SOLIDUS\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = self_closing_start_tag_state;\n          return;\n        }\n\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = data_state;\n          emitTag();\n          return;\n        }\n\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        tagnamebuf += String.fromCharCode(c + 0x0020);\n        tempbuf.push(c);\n        return;\n\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        tagnamebuf += String.fromCharCode(c);\n        tempbuf.push(c);\n        return;\n\n      default:\n        break;\n    } // If we don't return in one of the cases above, then this was not\n    // an appropriately matching close tag, so back out by emitting all\n    // the characters as text\n\n\n    textrun.push(0x003C); // LESS-THAN SIGN\n\n    textrun.push(0x002F); // SOLIDUS\n\n    pushAll(textrun, tempbuf);\n    reconsume(c, rcdata_state);\n  }\n\n  function rawtext_less_than_sign_state(c) {\n    /* identical to the RCDATA less-than sign state, except s/RCDATA/RAWTEXT/g\n     */\n    if (c === 0x002F) {\n      // SOLIDUS\n      beginTempBuf();\n      tokenizer = rawtext_end_tag_open_state;\n    } else {\n      textrun.push(0x003C); // LESS-THAN SIGN\n\n      reconsume(c, rawtext_state);\n    }\n  }\n\n  function rawtext_end_tag_open_state(c) {\n    /* identical to the RCDATA (and Script data) end tag open state, except s/RCDATA/RAWTEXT/g */\n    switch (c) {\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        beginEndTagName();\n        reconsume(c, rawtext_end_tag_name_state);\n        break;\n\n      default:\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        textrun.push(0x002F); // SOLIDUS\n\n        reconsume(c, rawtext_state);\n        break;\n    }\n  }\n\n  function rawtext_end_tag_name_state(c) {\n    /* identical to the RCDATA (and Script data) end tag name state, except s/RCDATA/RAWTEXT/g */\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = before_attribute_name_state;\n          return;\n        }\n\n        break;\n\n      case 0x002F:\n        // SOLIDUS\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = self_closing_start_tag_state;\n          return;\n        }\n\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = data_state;\n          emitTag();\n          return;\n        }\n\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        tagnamebuf += String.fromCharCode(c + 0x0020);\n        tempbuf.push(c);\n        return;\n\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        tagnamebuf += String.fromCharCode(c);\n        tempbuf.push(c);\n        return;\n\n      default:\n        break;\n    } // If we don't return in one of the cases above, then this was not\n    // an appropriately matching close tag, so back out by emitting all\n    // the characters as text\n\n\n    textrun.push(0x003C); // LESS-THAN SIGN\n\n    textrun.push(0x002F); // SOLIDUS\n\n    pushAll(textrun, tempbuf);\n    reconsume(c, rawtext_state);\n  }\n\n  function script_data_less_than_sign_state(c) {\n    switch (c) {\n      case 0x002F:\n        // SOLIDUS\n        beginTempBuf();\n        tokenizer = script_data_end_tag_open_state;\n        break;\n\n      case 0x0021:\n        // EXCLAMATION MARK\n        tokenizer = script_data_escape_start_state;\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        textrun.push(0x0021); // EXCLAMATION MARK\n\n        break;\n\n      default:\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        reconsume(c, script_data_state);\n        break;\n    }\n  }\n\n  function script_data_end_tag_open_state(c) {\n    /* identical to the RCDATA (and RAWTEXT) end tag open state, except s/RCDATA/Script data/g */\n    switch (c) {\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        beginEndTagName();\n        reconsume(c, script_data_end_tag_name_state);\n        break;\n\n      default:\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        textrun.push(0x002F); // SOLIDUS\n\n        reconsume(c, script_data_state);\n        break;\n    }\n  }\n\n  function script_data_end_tag_name_state(c) {\n    /* identical to the RCDATA (and RAWTEXT) end tag name state, except s/RCDATA/Script data/g */\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = before_attribute_name_state;\n          return;\n        }\n\n        break;\n\n      case 0x002F:\n        // SOLIDUS\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = self_closing_start_tag_state;\n          return;\n        }\n\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = data_state;\n          emitTag();\n          return;\n        }\n\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        tagnamebuf += String.fromCharCode(c + 0x0020);\n        tempbuf.push(c);\n        return;\n\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        tagnamebuf += String.fromCharCode(c);\n        tempbuf.push(c);\n        return;\n\n      default:\n        break;\n    } // If we don't return in one of the cases above, then this was not\n    // an appropriately matching close tag, so back out by emitting all\n    // the characters as text\n\n\n    textrun.push(0x003C); // LESS-THAN SIGN\n\n    textrun.push(0x002F); // SOLIDUS\n\n    pushAll(textrun, tempbuf);\n    reconsume(c, script_data_state);\n  }\n\n  function script_data_escape_start_state(c) {\n    if (c === 0x002D) {\n      // HYPHEN-MINUS\n      tokenizer = script_data_escape_start_dash_state;\n      textrun.push(0x002D); // HYPHEN-MINUS\n    } else {\n      reconsume(c, script_data_state);\n    }\n  }\n\n  function script_data_escape_start_dash_state(c) {\n    if (c === 0x002D) {\n      // HYPHEN-MINUS\n      tokenizer = script_data_escaped_dash_dash_state;\n      textrun.push(0x002D); // HYPHEN-MINUS\n    } else {\n      reconsume(c, script_data_state);\n    }\n  }\n\n  function script_data_escaped_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = script_data_escaped_dash_state;\n        textrun.push(0x002D); // HYPHEN-MINUS\n\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = script_data_escaped_less_than_sign_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        textrun.push(c);\n        break;\n    }\n  }\n\n  function script_data_escaped_dash_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = script_data_escaped_dash_dash_state;\n        textrun.push(0x002D); // HYPHEN-MINUS\n\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = script_data_escaped_less_than_sign_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        tokenizer = script_data_escaped_state;\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        tokenizer = script_data_escaped_state;\n        textrun.push(c);\n        break;\n    }\n  }\n\n  function script_data_escaped_dash_dash_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        textrun.push(0x002D); // HYPHEN-MINUS\n\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = script_data_escaped_less_than_sign_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = script_data_state;\n        textrun.push(0x003E); // GREATER-THAN SIGN\n\n        break;\n\n      case 0x0000:\n        // NULL\n        tokenizer = script_data_escaped_state;\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        tokenizer = script_data_escaped_state;\n        textrun.push(c);\n        break;\n    }\n  }\n\n  function script_data_escaped_less_than_sign_state(c) {\n    switch (c) {\n      case 0x002F:\n        // SOLIDUS\n        beginTempBuf();\n        tokenizer = script_data_escaped_end_tag_open_state;\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        beginTempBuf();\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        reconsume(c, script_data_double_escape_start_state);\n        break;\n\n      default:\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        reconsume(c, script_data_escaped_state);\n        break;\n    }\n  }\n\n  function script_data_escaped_end_tag_open_state(c) {\n    switch (c) {\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        beginEndTagName();\n        reconsume(c, script_data_escaped_end_tag_name_state);\n        break;\n\n      default:\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        textrun.push(0x002F); // SOLIDUS\n\n        reconsume(c, script_data_escaped_state);\n        break;\n    }\n  }\n\n  function script_data_escaped_end_tag_name_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = before_attribute_name_state;\n          return;\n        }\n\n        break;\n\n      case 0x002F:\n        // SOLIDUS\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = self_closing_start_tag_state;\n          return;\n        }\n\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        if (appropriateEndTag(tagnamebuf)) {\n          tokenizer = data_state;\n          emitTag();\n          return;\n        }\n\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        tagnamebuf += String.fromCharCode(c + 0x0020);\n        tempbuf.push(c);\n        return;\n\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        tagnamebuf += String.fromCharCode(c);\n        tempbuf.push(c);\n        return;\n\n      default:\n        break;\n    } // We get here in the default case, and if the closing tagname\n    // is not an appropriate tagname.\n\n\n    textrun.push(0x003C); // LESS-THAN SIGN\n\n    textrun.push(0x002F); // SOLIDUS\n\n    pushAll(textrun, tempbuf);\n    reconsume(c, script_data_escaped_state);\n  }\n\n  function script_data_double_escape_start_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020: // SPACE\n\n      case 0x002F: // SOLIDUS\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        if (buf2str(tempbuf) === \"script\") {\n          tokenizer = script_data_double_escaped_state;\n        } else {\n          tokenizer = script_data_escaped_state;\n        }\n\n        textrun.push(c);\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        tempbuf.push(c + 0x0020);\n        textrun.push(c);\n        break;\n\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        tempbuf.push(c);\n        textrun.push(c);\n        break;\n\n      default:\n        reconsume(c, script_data_escaped_state);\n        break;\n    }\n  }\n\n  function script_data_double_escaped_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = script_data_double_escaped_dash_state;\n        textrun.push(0x002D); // HYPHEN-MINUS\n\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = script_data_double_escaped_less_than_sign_state;\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        break;\n\n      case 0x0000:\n        // NULL\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        textrun.push(c);\n        break;\n    }\n  }\n\n  function script_data_double_escaped_dash_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = script_data_double_escaped_dash_dash_state;\n        textrun.push(0x002D); // HYPHEN-MINUS\n\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = script_data_double_escaped_less_than_sign_state;\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        break;\n\n      case 0x0000:\n        // NULL\n        tokenizer = script_data_double_escaped_state;\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        tokenizer = script_data_double_escaped_state;\n        textrun.push(c);\n        break;\n    }\n  }\n\n  function script_data_double_escaped_dash_dash_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        textrun.push(0x002D); // HYPHEN-MINUS\n\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        tokenizer = script_data_double_escaped_less_than_sign_state;\n        textrun.push(0x003C); // LESS-THAN SIGN\n\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = script_data_state;\n        textrun.push(0x003E); // GREATER-THAN SIGN\n\n        break;\n\n      case 0x0000:\n        // NULL\n        tokenizer = script_data_double_escaped_state;\n        textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        tokenizer = script_data_double_escaped_state;\n        textrun.push(c);\n        break;\n    }\n  }\n\n  function script_data_double_escaped_less_than_sign_state(c) {\n    if (c === 0x002F) {\n      // SOLIDUS\n      beginTempBuf();\n      tokenizer = script_data_double_escape_end_state;\n      textrun.push(0x002F); // SOLIDUS\n    } else {\n      reconsume(c, script_data_double_escaped_state);\n    }\n  }\n\n  function script_data_double_escape_end_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020: // SPACE\n\n      case 0x002F: // SOLIDUS\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        if (buf2str(tempbuf) === \"script\") {\n          tokenizer = script_data_escaped_state;\n        } else {\n          tokenizer = script_data_double_escaped_state;\n        }\n\n        textrun.push(c);\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        tempbuf.push(c + 0x0020);\n        textrun.push(c);\n        break;\n\n      case 0x0061: // [a-z]\n\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n      case 0x0067:\n      case 0x0068:\n      case 0x0069:\n      case 0x006A:\n      case 0x006B:\n      case 0x006C:\n      case 0x006D:\n      case 0x006E:\n      case 0x006F:\n      case 0x0070:\n      case 0x0071:\n      case 0x0072:\n      case 0x0073:\n      case 0x0074:\n      case 0x0075:\n      case 0x0076:\n      case 0x0077:\n      case 0x0078:\n      case 0x0079:\n      case 0x007A:\n        tempbuf.push(c);\n        textrun.push(c);\n        break;\n\n      default:\n        reconsume(c, script_data_double_escaped_state);\n        break;\n    }\n  }\n\n  function before_attribute_name_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n\n        /* Ignore the character. */\n        break;\n      // For SOLIDUS, GREATER-THAN SIGN, and EOF, spec says \"reconsume in\n      // the after attribute name state\", but in our implementation that\n      // state always has an active attribute in attrnamebuf.  Just clone\n      // the rules here, without the addAttribute business.\n\n      case 0x002F:\n        // SOLIDUS\n        tokenizer = self_closing_start_tag_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        emitTag();\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      case 0x003D:\n        // EQUALS SIGN\n        beginAttrName();\n        attrnamebuf += String.fromCharCode(c);\n        tokenizer = attribute_name_state;\n        break;\n\n      default:\n        if (handleSimpleAttribute()) break;\n        beginAttrName();\n        reconsume(c, attribute_name_state);\n        break;\n    }\n  } // beginAttrName() must have been called before this point\n  // There is an active attribute in attrnamebuf (but not attrvaluebuf)\n\n\n  function attribute_name_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020: // SPACE\n\n      case 0x002F: // SOLIDUS\n\n      case 0x003E: // GREATER-THAN SIGN\n\n      case -1:\n        // EOF\n        reconsume(c, after_attribute_name_state);\n        break;\n\n      case 0x003D:\n        // EQUALS SIGN\n        tokenizer = before_attribute_value_state;\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        attrnamebuf += String.fromCharCode(c + 0x0020);\n        break;\n\n      case 0x0000:\n        // NULL\n        attrnamebuf += String.fromCharCode(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case 0x0022: // QUOTATION MARK\n\n      case 0x0027: // APOSTROPHE\n\n      case 0x003C: // LESS-THAN SIGN\n\n      /* falls through */\n\n      default:\n        attrnamebuf += getMatchingChars(ATTRNAME);\n        break;\n    }\n  } // There is an active attribute in attrnamebuf, but not yet in attrvaluebuf.\n\n\n  function after_attribute_name_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n\n        /* Ignore the character. */\n        break;\n\n      case 0x002F:\n        // SOLIDUS\n        // Keep in sync with before_attribute_name_state.\n        addAttribute(attrnamebuf);\n        tokenizer = self_closing_start_tag_state;\n        break;\n\n      case 0x003D:\n        // EQUALS SIGN\n        tokenizer = before_attribute_value_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        // Keep in sync with before_attribute_name_state.\n        tokenizer = data_state;\n        addAttribute(attrnamebuf);\n        emitTag();\n        break;\n\n      case -1:\n        // EOF\n        // Keep in sync with before_attribute_name_state.\n        addAttribute(attrnamebuf);\n        emitEOF();\n        break;\n\n      default:\n        addAttribute(attrnamebuf);\n        beginAttrName();\n        reconsume(c, attribute_name_state);\n        break;\n    }\n  }\n\n  function before_attribute_value_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n\n        /* Ignore the character. */\n        break;\n\n      case 0x0022:\n        // QUOTATION MARK\n        beginAttrValue();\n        tokenizer = attribute_value_double_quoted_state;\n        break;\n\n      case 0x0027:\n        // APOSTROPHE\n        beginAttrValue();\n        tokenizer = attribute_value_single_quoted_state;\n        break;\n\n      case 0x003E: // GREATER-THAN SIGN\n\n      /* falls through */\n\n      default:\n        beginAttrValue();\n        reconsume(c, attribute_value_unquoted_state);\n        break;\n    }\n  }\n\n  function attribute_value_double_quoted_state(c) {\n    switch (c) {\n      case 0x0022:\n        // QUOTATION MARK\n        addAttribute(attrnamebuf, attrvaluebuf);\n        tokenizer = after_attribute_value_quoted_state;\n        break;\n\n      case 0x0026:\n        // AMPERSAND\n        return_state = attribute_value_double_quoted_state;\n        tokenizer = character_reference_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        attrvaluebuf += String.fromCharCode(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      case 0x000A:\n        // LF\n        // this could be a converted \\r, so don't use getMatchingChars\n        attrvaluebuf += String.fromCharCode(c);\n        break;\n\n      default:\n        attrvaluebuf += getMatchingChars(DBLQUOTEATTRVAL);\n        break;\n    }\n  }\n\n  function attribute_value_single_quoted_state(c) {\n    switch (c) {\n      case 0x0027:\n        // APOSTROPHE\n        addAttribute(attrnamebuf, attrvaluebuf);\n        tokenizer = after_attribute_value_quoted_state;\n        break;\n\n      case 0x0026:\n        // AMPERSAND\n        return_state = attribute_value_single_quoted_state;\n        tokenizer = character_reference_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        attrvaluebuf += String.fromCharCode(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      case 0x000A:\n        // LF\n        // this could be a converted \\r, so don't use getMatchingChars\n        attrvaluebuf += String.fromCharCode(c);\n        break;\n\n      default:\n        attrvaluebuf += getMatchingChars(SINGLEQUOTEATTRVAL);\n        break;\n    }\n  }\n\n  function attribute_value_unquoted_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        addAttribute(attrnamebuf, attrvaluebuf);\n        tokenizer = before_attribute_name_state;\n        break;\n\n      case 0x0026:\n        // AMPERSAND\n        return_state = attribute_value_unquoted_state;\n        tokenizer = character_reference_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        addAttribute(attrnamebuf, attrvaluebuf);\n        tokenizer = data_state;\n        emitTag();\n        break;\n\n      case 0x0000:\n        // NULL\n        attrvaluebuf += String.fromCharCode(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case -1:\n        // EOF\n        nextchar--; // pushback\n\n        tokenizer = data_state;\n        break;\n\n      case 0x0022: // QUOTATION MARK\n\n      case 0x0027: // APOSTROPHE\n\n      case 0x003C: // LESS-THAN SIGN\n\n      case 0x003D: // EQUALS SIGN\n\n      case 0x0060: // GRAVE ACCENT\n\n      /* falls through */\n\n      default:\n        attrvaluebuf += getMatchingChars(UNQUOTEDATTRVAL);\n        break;\n    }\n  }\n\n  function after_attribute_value_quoted_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        tokenizer = before_attribute_name_state;\n        break;\n\n      case 0x002F:\n        // SOLIDUS\n        tokenizer = self_closing_start_tag_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        emitTag();\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        reconsume(c, before_attribute_name_state);\n        break;\n    }\n  }\n\n  function self_closing_start_tag_state(c) {\n    switch (c) {\n      case 0x003E:\n        // GREATER-THAN SIGN\n        // Set the <i>self-closing flag</i> of the current tag token.\n        tokenizer = data_state;\n        emitSelfClosingTag(true);\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      default:\n        reconsume(c, before_attribute_name_state);\n        break;\n    }\n  }\n\n  function bogus_comment_state(c, lookahead, eof) {\n    var len = lookahead.length;\n\n    if (eof) {\n      nextchar += len - 1; // don't consume the eof\n    } else {\n      nextchar += len;\n    }\n\n    var comment = lookahead.substring(0, len - 1);\n    comment = comment.replace(/\\u0000/g, \"\\uFFFD\");\n    comment = comment.replace(/\\u000D\\u000A/g, \"\\u000A\");\n    comment = comment.replace(/\\u000D/g, \"\\u000A\");\n    insertToken(COMMENT, comment);\n    tokenizer = data_state;\n  }\n\n  bogus_comment_state.lookahead = \">\";\n\n  function markup_declaration_open_state(c, lookahead, eof) {\n    if (lookahead[0] === \"-\" && lookahead[1] === \"-\") {\n      nextchar += 2;\n      beginComment();\n      tokenizer = comment_start_state;\n      return;\n    }\n\n    if (lookahead.toUpperCase() === \"DOCTYPE\") {\n      nextchar += 7;\n      tokenizer = doctype_state;\n    } else if (lookahead === \"[CDATA[\" && cdataAllowed()) {\n      nextchar += 7;\n      tokenizer = cdata_section_state;\n    } else {\n      tokenizer = bogus_comment_state;\n    }\n  }\n\n  markup_declaration_open_state.lookahead = 7;\n\n  function comment_start_state(c) {\n    beginComment();\n\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = comment_start_dash_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        insertToken(COMMENT, buf2str(commentbuf));\n        break;\n\n      /* see comment in comment end state */\n\n      default:\n        reconsume(c, comment_state);\n        break;\n    }\n  }\n\n  function comment_start_dash_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = comment_end_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        insertToken(COMMENT, buf2str(commentbuf));\n        break;\n\n      case -1:\n        // EOF\n        insertToken(COMMENT, buf2str(commentbuf));\n        emitEOF();\n        break;\n\n      /* see comment in comment end state */\n\n      default:\n        commentbuf.push(0x002D\n        /* HYPHEN-MINUS */\n        );\n        reconsume(c, comment_state);\n        break;\n    }\n  }\n\n  function comment_state(c) {\n    switch (c) {\n      case 0x003C:\n        // LESS-THAN SIGN\n        commentbuf.push(c);\n        tokenizer = comment_less_than_sign_state;\n        break;\n\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = comment_end_dash_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        commentbuf.push(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case -1:\n        // EOF\n        insertToken(COMMENT, buf2str(commentbuf));\n        emitEOF();\n        break;\n\n      /* see comment in comment end state */\n\n      default:\n        commentbuf.push(c);\n        break;\n    }\n  }\n\n  function comment_less_than_sign_state(c) {\n    switch (c) {\n      case 0x0021:\n        // EXCLAMATION MARK\n        commentbuf.push(c);\n        tokenizer = comment_less_than_sign_bang_state;\n        break;\n\n      case 0x003C:\n        // LESS-THAN SIGN\n        commentbuf.push(c);\n        break;\n\n      default:\n        reconsume(c, comment_state);\n        break;\n    }\n  }\n\n  function comment_less_than_sign_bang_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = comment_less_than_sign_bang_dash_state;\n        break;\n\n      default:\n        reconsume(c, comment_state);\n        break;\n    }\n  }\n\n  function comment_less_than_sign_bang_dash_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = comment_less_than_sign_bang_dash_dash_state;\n        break;\n\n      default:\n        reconsume(c, comment_end_dash_state);\n        break;\n    }\n  }\n\n  function comment_less_than_sign_bang_dash_dash_state(c) {\n    switch (c) {\n      case 0x003E: // GREATER-THAN SIGN\n\n      case -1:\n        // EOF\n        reconsume(c, comment_end_state);\n        break;\n\n      default:\n        // parse error\n        reconsume(c, comment_end_state);\n        break;\n    }\n  }\n\n  function comment_end_dash_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        tokenizer = comment_end_state;\n        break;\n\n      case -1:\n        // EOF\n        insertToken(COMMENT, buf2str(commentbuf));\n        emitEOF();\n        break;\n\n      /* see comment in comment end state */\n\n      default:\n        commentbuf.push(0x002D\n        /* HYPHEN-MINUS */\n        );\n        reconsume(c, comment_state);\n        break;\n    }\n  }\n\n  function comment_end_state(c) {\n    switch (c) {\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        insertToken(COMMENT, buf2str(commentbuf));\n        break;\n\n      case 0x0021:\n        // EXCLAMATION MARK\n        tokenizer = comment_end_bang_state;\n        break;\n\n      case 0x002D:\n        // HYPHEN-MINUS\n        commentbuf.push(0x002D);\n        break;\n\n      case -1:\n        // EOF\n        insertToken(COMMENT, buf2str(commentbuf));\n        emitEOF();\n        break;\n\n      /* For security reasons: otherwise, hostile user could put a script in a comment e.g. in a blog comment and then DOS the server so that the end tag isn't read, and then the commented script tag would be treated as live code */\n\n      default:\n        commentbuf.push(0x002D);\n        commentbuf.push(0x002D);\n        reconsume(c, comment_state);\n        break;\n    }\n  }\n\n  function comment_end_bang_state(c) {\n    switch (c) {\n      case 0x002D:\n        // HYPHEN-MINUS\n        commentbuf.push(0x002D);\n        commentbuf.push(0x002D);\n        commentbuf.push(0x0021);\n        tokenizer = comment_end_dash_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        insertToken(COMMENT, buf2str(commentbuf));\n        break;\n\n      case -1:\n        // EOF\n        insertToken(COMMENT, buf2str(commentbuf));\n        emitEOF();\n        break;\n\n      /* see comment in comment end state */\n\n      default:\n        commentbuf.push(0x002D);\n        commentbuf.push(0x002D);\n        commentbuf.push(0x0021);\n        reconsume(c, comment_state);\n        break;\n    }\n  }\n\n  function doctype_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        tokenizer = before_doctype_name_state;\n        break;\n\n      case -1:\n        // EOF\n        beginDoctype();\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        reconsume(c, before_doctype_name_state);\n        break;\n    }\n  }\n\n  function before_doctype_name_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n\n        /* Ignore the character. */\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        beginDoctype();\n        doctypenamebuf.push(c + 0x0020);\n        tokenizer = doctype_name_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        beginDoctype();\n        doctypenamebuf.push(0xFFFD);\n        tokenizer = doctype_name_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        beginDoctype();\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        beginDoctype();\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        beginDoctype();\n        doctypenamebuf.push(c);\n        tokenizer = doctype_name_state;\n        break;\n    }\n  }\n\n  function doctype_name_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        tokenizer = after_doctype_name_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case 0x0041: // [A-Z]\n\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n      case 0x0047:\n      case 0x0048:\n      case 0x0049:\n      case 0x004A:\n      case 0x004B:\n      case 0x004C:\n      case 0x004D:\n      case 0x004E:\n      case 0x004F:\n      case 0x0050:\n      case 0x0051:\n      case 0x0052:\n      case 0x0053:\n      case 0x0054:\n      case 0x0055:\n      case 0x0056:\n      case 0x0057:\n      case 0x0058:\n      case 0x0059:\n      case 0x005A:\n        doctypenamebuf.push(c + 0x0020);\n        break;\n\n      case 0x0000:\n        // NULL\n        doctypenamebuf.push(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        doctypenamebuf.push(c);\n        break;\n    }\n  }\n\n  function after_doctype_name_state(c, lookahead, eof) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n\n        /* Ignore the character. */\n        nextchar += 1;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        nextchar += 1;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        lookahead = lookahead.toUpperCase();\n\n        if (lookahead === \"PUBLIC\") {\n          nextchar += 6;\n          tokenizer = after_doctype_public_keyword_state;\n        } else if (lookahead === \"SYSTEM\") {\n          nextchar += 6;\n          tokenizer = after_doctype_system_keyword_state;\n        } else {\n          forcequirks();\n          tokenizer = bogus_doctype_state;\n        }\n\n        break;\n    }\n  }\n\n  after_doctype_name_state.lookahead = 6;\n\n  function after_doctype_public_keyword_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        tokenizer = before_doctype_public_identifier_state;\n        break;\n\n      case 0x0022:\n        // QUOTATION MARK\n        beginDoctypePublicId();\n        tokenizer = doctype_public_identifier_double_quoted_state;\n        break;\n\n      case 0x0027:\n        // APOSTROPHE\n        beginDoctypePublicId();\n        tokenizer = doctype_public_identifier_single_quoted_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        forcequirks();\n        tokenizer = bogus_doctype_state;\n        break;\n    }\n  }\n\n  function before_doctype_public_identifier_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n\n        /* Ignore the character. */\n        break;\n\n      case 0x0022:\n        // QUOTATION MARK\n        beginDoctypePublicId();\n        tokenizer = doctype_public_identifier_double_quoted_state;\n        break;\n\n      case 0x0027:\n        // APOSTROPHE\n        beginDoctypePublicId();\n        tokenizer = doctype_public_identifier_single_quoted_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        forcequirks();\n        tokenizer = bogus_doctype_state;\n        break;\n    }\n  }\n\n  function doctype_public_identifier_double_quoted_state(c) {\n    switch (c) {\n      case 0x0022:\n        // QUOTATION MARK\n        tokenizer = after_doctype_public_identifier_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        doctypepublicbuf.push(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        doctypepublicbuf.push(c);\n        break;\n    }\n  }\n\n  function doctype_public_identifier_single_quoted_state(c) {\n    switch (c) {\n      case 0x0027:\n        // APOSTROPHE\n        tokenizer = after_doctype_public_identifier_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        doctypepublicbuf.push(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        doctypepublicbuf.push(c);\n        break;\n    }\n  }\n\n  function after_doctype_public_identifier_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        tokenizer = between_doctype_public_and_system_identifiers_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case 0x0022:\n        // QUOTATION MARK\n        beginDoctypeSystemId();\n        tokenizer = doctype_system_identifier_double_quoted_state;\n        break;\n\n      case 0x0027:\n        // APOSTROPHE\n        beginDoctypeSystemId();\n        tokenizer = doctype_system_identifier_single_quoted_state;\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        forcequirks();\n        tokenizer = bogus_doctype_state;\n        break;\n    }\n  }\n\n  function between_doctype_public_and_system_identifiers_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE Ignore the character.\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case 0x0022:\n        // QUOTATION MARK\n        beginDoctypeSystemId();\n        tokenizer = doctype_system_identifier_double_quoted_state;\n        break;\n\n      case 0x0027:\n        // APOSTROPHE\n        beginDoctypeSystemId();\n        tokenizer = doctype_system_identifier_single_quoted_state;\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        forcequirks();\n        tokenizer = bogus_doctype_state;\n        break;\n    }\n  }\n\n  function after_doctype_system_keyword_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n        tokenizer = before_doctype_system_identifier_state;\n        break;\n\n      case 0x0022:\n        // QUOTATION MARK\n        beginDoctypeSystemId();\n        tokenizer = doctype_system_identifier_double_quoted_state;\n        break;\n\n      case 0x0027:\n        // APOSTROPHE\n        beginDoctypeSystemId();\n        tokenizer = doctype_system_identifier_single_quoted_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        forcequirks();\n        tokenizer = bogus_doctype_state;\n        break;\n    }\n  }\n\n  function before_doctype_system_identifier_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE Ignore the character.\n        break;\n\n      case 0x0022:\n        // QUOTATION MARK\n        beginDoctypeSystemId();\n        tokenizer = doctype_system_identifier_double_quoted_state;\n        break;\n\n      case 0x0027:\n        // APOSTROPHE\n        beginDoctypeSystemId();\n        tokenizer = doctype_system_identifier_single_quoted_state;\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        forcequirks();\n        tokenizer = bogus_doctype_state;\n        break;\n    }\n  }\n\n  function doctype_system_identifier_double_quoted_state(c) {\n    switch (c) {\n      case 0x0022:\n        // QUOTATION MARK\n        tokenizer = after_doctype_system_identifier_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        doctypesystembuf.push(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        doctypesystembuf.push(c);\n        break;\n    }\n  }\n\n  function doctype_system_identifier_single_quoted_state(c) {\n    switch (c) {\n      case 0x0027:\n        // APOSTROPHE\n        tokenizer = after_doctype_system_identifier_state;\n        break;\n\n      case 0x0000:\n        // NULL\n        doctypesystembuf.push(0xFFFD\n        /* REPLACEMENT CHARACTER */\n        );\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        forcequirks();\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        doctypesystembuf.push(c);\n        break;\n    }\n  }\n\n  function after_doctype_system_identifier_state(c) {\n    switch (c) {\n      case 0x0009: // CHARACTER TABULATION (tab)\n\n      case 0x000A: // LINE FEED (LF)\n\n      case 0x000C: // FORM FEED (FF)\n\n      case 0x0020:\n        // SPACE\n\n        /* Ignore the character. */\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        forcequirks();\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        tokenizer = bogus_doctype_state;\n        /* This does *not* set the DOCTYPE token's force-quirks flag. */\n\n        break;\n    }\n  }\n\n  function bogus_doctype_state(c) {\n    switch (c) {\n      case 0x003E:\n        // GREATER-THAN SIGN\n        tokenizer = data_state;\n        emitDoctype();\n        break;\n\n      case -1:\n        // EOF\n        emitDoctype();\n        emitEOF();\n        break;\n\n      default:\n        /* Ignore the character. */\n        break;\n    }\n  }\n\n  function cdata_section_state(c) {\n    switch (c) {\n      case 0x005D:\n        // RIGHT SQUARE BRACKET\n        tokenizer = cdata_section_bracket_state;\n        break;\n\n      case -1:\n        // EOF\n        emitEOF();\n        break;\n\n      case 0x0000:\n        // NULL\n        textIncludesNUL = true;\n\n      /* fall through */\n\n      default:\n        // Instead of just pushing a single character and then\n        // coming back to the very same place, lookahead and\n        // emit everything we can at once.\n\n        /*jshint -W030 */\n        emitCharsWhile(CDATATEXT) || textrun.push(c);\n        break;\n    }\n  }\n\n  function cdata_section_bracket_state(c) {\n    switch (c) {\n      case 0x005D:\n        // RIGHT SQUARE BRACKET\n        tokenizer = cdata_section_end_state;\n        break;\n\n      default:\n        textrun.push(0x005D);\n        reconsume(c, cdata_section_state);\n        break;\n    }\n  }\n\n  function cdata_section_end_state(c) {\n    switch (c) {\n      case 0x005D:\n        // RIGHT SQUARE BRACKET\n        textrun.push(0x005D);\n        break;\n\n      case 0x003E:\n        // GREATER-THAN SIGN\n        flushText();\n        tokenizer = data_state;\n        break;\n\n      default:\n        textrun.push(0x005D);\n        textrun.push(0x005D);\n        reconsume(c, cdata_section_state);\n        break;\n    }\n  }\n\n  function character_reference_state(c) {\n    beginTempBuf();\n    tempbuf.push(0x0026);\n\n    switch (c) {\n      case 0x0009: // TAB\n\n      case 0x000A: // LINE FEED\n\n      case 0x000C: // FORM FEED\n\n      case 0x0020: // SPACE\n\n      case 0x003C: // LESS-THAN SIGN\n\n      case 0x0026: // AMPERSAND\n\n      case -1:\n        // EOF\n        reconsume(c, character_reference_end_state);\n        break;\n\n      case 0x0023:\n        // NUMBER SIGN\n        tempbuf.push(c);\n        tokenizer = numeric_character_reference_state;\n        break;\n\n      default:\n        reconsume(c, named_character_reference_state);\n        break;\n    }\n  }\n\n  function named_character_reference_state(c) {\n    NAMEDCHARREF.lastIndex = nextchar; // w/ lookahead no char has been consumed\n\n    var matched = NAMEDCHARREF.exec(chars);\n    if (!matched) throw new Error(\"should never happen\");\n    var name = matched[1];\n\n    if (!name) {\n      // If no match can be made, switch to the character reference end state\n      tokenizer = character_reference_end_state;\n      return;\n    } // Consume the matched characters and append them to temporary buffer\n\n\n    nextchar += name.length;\n    pushAll(tempbuf, str2buf(name));\n\n    switch (return_state) {\n      case attribute_value_double_quoted_state:\n      case attribute_value_single_quoted_state:\n      case attribute_value_unquoted_state:\n        // If the character reference was consumed as part of an attribute...\n        if (name[name.length - 1] !== ';') {\n          // ...and the last char is not ;\n          if (/[=A-Za-z0-9]/.test(chars[nextchar])) {\n            tokenizer = character_reference_end_state;\n            return;\n          }\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    beginTempBuf();\n    var rv = namedCharRefs[name];\n\n    if (typeof rv === 'number') {\n      tempbuf.push(rv);\n    } else {\n      pushAll(tempbuf, rv);\n    }\n\n    tokenizer = character_reference_end_state;\n  } // We might need to pause tokenization until we have enough characters\n  // in the buffer for longest possible character reference.\n\n\n  named_character_reference_state.lookahead = -NAMEDCHARREF_MAXLEN;\n\n  function numeric_character_reference_state(c) {\n    character_reference_code = 0;\n\n    switch (c) {\n      case 0x0078: // x\n\n      case 0x0058:\n        // X\n        tempbuf.push(c);\n        tokenizer = hexadecimal_character_reference_start_state;\n        break;\n\n      default:\n        reconsume(c, decimal_character_reference_start_state);\n        break;\n    }\n  }\n\n  function hexadecimal_character_reference_start_state(c) {\n    switch (c) {\n      case 0x0030:\n      case 0x0031:\n      case 0x0032:\n      case 0x0033:\n      case 0x0034:\n      case 0x0035:\n      case 0x0036:\n      case 0x0037:\n      case 0x0038:\n      case 0x0039: // [0-9]\n\n      case 0x0041:\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046: // [A-F]\n\n      case 0x0061:\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n        // [a-f]\n        reconsume(c, hexadecimal_character_reference_state);\n        break;\n\n      default:\n        reconsume(c, character_reference_end_state);\n        break;\n    }\n  }\n\n  function decimal_character_reference_start_state(c) {\n    switch (c) {\n      case 0x0030:\n      case 0x0031:\n      case 0x0032:\n      case 0x0033:\n      case 0x0034:\n      case 0x0035:\n      case 0x0036:\n      case 0x0037:\n      case 0x0038:\n      case 0x0039:\n        // [0-9]\n        reconsume(c, decimal_character_reference_state);\n        break;\n\n      default:\n        reconsume(c, character_reference_end_state);\n        break;\n    }\n  }\n\n  function hexadecimal_character_reference_state(c) {\n    switch (c) {\n      case 0x0041:\n      case 0x0042:\n      case 0x0043:\n      case 0x0044:\n      case 0x0045:\n      case 0x0046:\n        // [A-F]\n        character_reference_code *= 16;\n        character_reference_code += c - 0x0037;\n        break;\n\n      case 0x0061:\n      case 0x0062:\n      case 0x0063:\n      case 0x0064:\n      case 0x0065:\n      case 0x0066:\n        // [a-f]\n        character_reference_code *= 16;\n        character_reference_code += c - 0x0057;\n        break;\n\n      case 0x0030:\n      case 0x0031:\n      case 0x0032:\n      case 0x0033:\n      case 0x0034:\n      case 0x0035:\n      case 0x0036:\n      case 0x0037:\n      case 0x0038:\n      case 0x0039:\n        // [0-9]\n        character_reference_code *= 16;\n        character_reference_code += c - 0x0030;\n        break;\n\n      case 0x003B:\n        // SEMICOLON\n        tokenizer = numeric_character_reference_end_state;\n        break;\n\n      default:\n        reconsume(c, numeric_character_reference_end_state);\n        break;\n    }\n  }\n\n  function decimal_character_reference_state(c) {\n    switch (c) {\n      case 0x0030:\n      case 0x0031:\n      case 0x0032:\n      case 0x0033:\n      case 0x0034:\n      case 0x0035:\n      case 0x0036:\n      case 0x0037:\n      case 0x0038:\n      case 0x0039:\n        // [0-9]\n        character_reference_code *= 10;\n        character_reference_code += c - 0x0030;\n        break;\n\n      case 0x003B:\n        // SEMICOLON\n        tokenizer = numeric_character_reference_end_state;\n        break;\n\n      default:\n        reconsume(c, numeric_character_reference_end_state);\n        break;\n    }\n  }\n\n  function numeric_character_reference_end_state(c) {\n    if (character_reference_code in numericCharRefReplacements) {\n      character_reference_code = numericCharRefReplacements[character_reference_code];\n    } else if (character_reference_code > 0x10FFFF || character_reference_code >= 0xD800 && character_reference_code < 0xE000) {\n      character_reference_code = 0xFFFD;\n    }\n\n    beginTempBuf();\n\n    if (character_reference_code <= 0xFFFF) {\n      tempbuf.push(character_reference_code);\n    } else {\n      character_reference_code = character_reference_code - 0x10000;\n      /* jshint bitwise: false */\n\n      tempbuf.push(0xD800 + (character_reference_code >> 10));\n      tempbuf.push(0xDC00 + (character_reference_code & 0x03FF));\n    }\n\n    reconsume(c, character_reference_end_state);\n  }\n\n  function character_reference_end_state(c) {\n    switch (return_state) {\n      case attribute_value_double_quoted_state:\n      case attribute_value_single_quoted_state:\n      case attribute_value_unquoted_state:\n        // append each character to the current attribute's value\n        attrvaluebuf += buf2str(tempbuf);\n        break;\n\n      default:\n        pushAll(textrun, tempbuf);\n        break;\n    }\n\n    reconsume(c, return_state);\n  }\n  /***\n   * The tree builder insertion modes\n   */\n  // 11.2.5.4.1 The \"initial\" insertion mode\n\n\n  function initial_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        value = value.replace(LEADINGWS, \"\"); // Ignore spaces\n\n        if (value.length === 0) return; // Are we done?\n\n        break;\n      // Handle anything non-space text below\n\n      case 4:\n        // COMMENT\n        doc._appendChild(doc.createComment(value));\n\n        return;\n\n      case 5:\n        // DOCTYPE\n        var name = value;\n        var publicid = arg3;\n        var systemid = arg4; // Use the constructor directly instead of\n        // implementation.createDocumentType because the create\n        // function throws errors on invalid characters, and\n        // we don't want the parser to throw them.\n\n        doc.appendChild(new DocumentType(doc, name, publicid, systemid)); // Note that there is no public API for setting quirks mode We can\n        // do this here because we have access to implementation details\n\n        if (force_quirks || name.toLowerCase() !== \"html\" || quirkyPublicIds.test(publicid) || systemid && systemid.toLowerCase() === quirkySystemId || systemid === undefined && conditionallyQuirkyPublicIds.test(publicid)) doc._quirks = true;else if (limitedQuirkyPublicIds.test(publicid) || systemid !== undefined && conditionallyQuirkyPublicIds.test(publicid)) doc._limitedQuirks = true;\n        parser = before_html_mode;\n        return;\n    } // tags or non-whitespace text\n\n\n    doc._quirks = true;\n    parser = before_html_mode;\n    parser(t, value, arg3, arg4);\n  } // 11.2.5.4.2 The \"before html\" insertion mode\n\n\n  function before_html_mode(t, value, arg3, arg4) {\n    var elt;\n\n    switch (t) {\n      case 1:\n        // TEXT\n        value = value.replace(LEADINGWS, \"\"); // Ignore spaces\n\n        if (value.length === 0) return; // Are we done?\n\n        break;\n      // Handle anything non-space text below\n\n      case 5:\n        // DOCTYPE\n\n        /* ignore the token */\n        return;\n\n      case 4:\n        // COMMENT\n        doc._appendChild(doc.createComment(value));\n\n        return;\n\n      case 2:\n        // TAG\n        if (value === \"html\") {\n          elt = createHTMLElt(doc, value, arg3);\n          stack.push(elt);\n          doc.appendChild(elt); // XXX: handle application cache here\n\n          parser = before_head_mode;\n          return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"html\":\n          case \"head\":\n          case \"body\":\n          case \"br\":\n            break;\n          // fall through on these\n\n          default:\n            return;\n          // ignore most end tags\n        }\n\n    } // Anything that didn't get handled above is handled like this:\n\n\n    elt = createHTMLElt(doc, \"html\", null);\n    stack.push(elt);\n    doc.appendChild(elt); // XXX: handle application cache here\n\n    parser = before_head_mode;\n    parser(t, value, arg3, arg4);\n  } // 11.2.5.4.3 The \"before head\" insertion mode\n\n\n  function before_head_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        value = value.replace(LEADINGWS, \"\"); // Ignore spaces\n\n        if (value.length === 0) return; // Are we done?\n\n        break;\n      // Handle anything non-space text below\n\n      case 5:\n        // DOCTYPE\n\n        /* ignore the token */\n        return;\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"head\":\n            var elt = insertHTMLElement(value, arg3);\n            head_element_pointer = elt;\n            parser = in_head_mode;\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"html\":\n          case \"head\":\n          case \"body\":\n          case \"br\":\n            break;\n\n          default:\n            return;\n          // ignore most end tags\n        }\n\n    } // If not handled explicitly above\n\n\n    before_head_mode(TAG, \"head\", null); // create a head tag\n\n    parser(t, value, arg3, arg4); // then try again with this token\n  }\n\n  function in_head_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        var ws = value.match(LEADINGWS);\n\n        if (ws) {\n          insertText(ws[0]);\n          value = value.substring(ws[0].length);\n        }\n\n        if (value.length === 0) return;\n        break;\n      // Handle non-whitespace below\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"meta\": // XXX:\n          // May need to change the encoding based on this tag\n\n          /* falls through */\n\n          case \"base\":\n          case \"basefont\":\n          case \"bgsound\":\n          case \"link\":\n            insertHTMLElement(value, arg3);\n            stack.pop();\n            return;\n\n          case \"title\":\n            parseRCDATA(value, arg3);\n            return;\n\n          case \"noscript\":\n            if (!scripting_enabled) {\n              insertHTMLElement(value, arg3);\n              parser = in_head_noscript_mode;\n              return;\n            }\n\n          // Otherwise, if scripting is enabled...\n\n          /* falls through */\n\n          case \"noframes\":\n          case \"style\":\n            parseRawText(value, arg3);\n            return;\n\n          case \"script\":\n            insertElement(function (doc) {\n              var elt = createHTMLElt(doc, value, arg3);\n              elt._parser_inserted = true;\n              elt._force_async = false;\n              if (fragment) elt._already_started = true;\n              flushText();\n              return elt;\n            });\n            tokenizer = script_data_state;\n            originalInsertionMode = parser;\n            parser = text_mode;\n            return;\n\n          case \"template\":\n            insertHTMLElement(value, arg3);\n            afe.insertMarker();\n            frameset_ok = false;\n            parser = in_template_mode;\n            templateInsertionModes.push(parser);\n            return;\n\n          case \"head\":\n            return;\n          // ignore it\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"head\":\n            stack.pop();\n            parser = after_head_mode;\n            return;\n\n          case \"body\":\n          case \"html\":\n          case \"br\":\n            break;\n          // handle these at the bottom of the function\n\n          case \"template\":\n            if (!stack.contains(\"template\")) {\n              return;\n            }\n\n            stack.generateImpliedEndTags(null, \"thorough\");\n            stack.popTag(\"template\");\n            afe.clearToMarker();\n            templateInsertionModes.pop();\n            resetInsertionMode();\n            return;\n\n          default:\n            // ignore any other end tag\n            return;\n        }\n\n        break;\n    } // If not handled above\n\n\n    in_head_mode(ENDTAG, \"head\", null); // synthetic </head>\n\n    parser(t, value, arg3, arg4); // Then redo this one\n  } // 13.2.5.4.5 The \"in head noscript\" insertion mode\n\n\n  function in_head_noscript_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 5:\n        // DOCTYPE\n        return;\n\n      case 4:\n        // COMMENT\n        in_head_mode(t, value);\n        return;\n\n      case 1:\n        // TEXT\n        var ws = value.match(LEADINGWS);\n\n        if (ws) {\n          in_head_mode(t, ws[0]);\n          value = value.substring(ws[0].length);\n        }\n\n        if (value.length === 0) return; // no more text\n\n        break;\n      // Handle non-whitespace below\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"basefont\":\n          case \"bgsound\":\n          case \"link\":\n          case \"meta\":\n          case \"noframes\":\n          case \"style\":\n            in_head_mode(t, value, arg3);\n            return;\n\n          case \"head\":\n          case \"noscript\":\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"noscript\":\n            stack.pop();\n            parser = in_head_mode;\n            return;\n\n          case \"br\":\n            break;\n          // goes to the outer default\n\n          default:\n            return;\n          // ignore other end tags\n        }\n\n        break;\n    } // If not handled above\n\n\n    in_head_noscript_mode(ENDTAG, \"noscript\", null);\n    parser(t, value, arg3, arg4);\n  }\n\n  function after_head_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        var ws = value.match(LEADINGWS);\n\n        if (ws) {\n          insertText(ws[0]);\n          value = value.substring(ws[0].length);\n        }\n\n        if (value.length === 0) return;\n        break;\n      // Handle non-whitespace below\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"body\":\n            insertHTMLElement(value, arg3);\n            frameset_ok = false;\n            parser = in_body_mode;\n            return;\n\n          case \"frameset\":\n            insertHTMLElement(value, arg3);\n            parser = in_frameset_mode;\n            return;\n\n          case \"base\":\n          case \"basefont\":\n          case \"bgsound\":\n          case \"link\":\n          case \"meta\":\n          case \"noframes\":\n          case \"script\":\n          case \"style\":\n          case \"template\":\n          case \"title\":\n            stack.push(head_element_pointer);\n            in_head_mode(TAG, value, arg3);\n            stack.removeElement(head_element_pointer);\n            return;\n\n          case \"head\":\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"template\":\n            return in_head_mode(t, value, arg3, arg4);\n\n          case \"body\":\n          case \"html\":\n          case \"br\":\n            break;\n\n          default:\n            return;\n          // ignore any other end tag\n        }\n\n        break;\n    }\n\n    after_head_mode(TAG, \"body\", null);\n    frameset_ok = true;\n    parser(t, value, arg3, arg4);\n  } // 13.2.5.4.7 The \"in body\" insertion mode\n\n\n  function in_body_mode(t, value, arg3, arg4) {\n    var body, i, node, elt;\n\n    switch (t) {\n      case 1:\n        // TEXT\n        if (textIncludesNUL) {\n          value = value.replace(NULCHARS, \"\");\n          if (value.length === 0) return;\n        } // If any non-space characters\n\n\n        if (frameset_ok && NONWS.test(value)) frameset_ok = false;\n        afereconstruct();\n        insertText(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case -1:\n        // EOF\n        if (templateInsertionModes.length) {\n          return in_template_mode(t);\n        }\n\n        stopParsing();\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            if (stack.contains(\"template\")) {\n              return;\n            }\n\n            transferAttributes(arg3, stack.elements[0]);\n            return;\n\n          case \"base\":\n          case \"basefont\":\n          case \"bgsound\":\n          case \"link\":\n          case \"meta\":\n          case \"noframes\":\n          case \"script\":\n          case \"style\":\n          case \"template\":\n          case \"title\":\n            in_head_mode(TAG, value, arg3);\n            return;\n\n          case \"body\":\n            body = stack.elements[1];\n            if (!body || !(body instanceof impl.HTMLBodyElement) || stack.contains(\"template\")) return;\n            frameset_ok = false;\n            transferAttributes(arg3, body);\n            return;\n\n          case \"frameset\":\n            if (!frameset_ok) return;\n            body = stack.elements[1];\n            if (!body || !(body instanceof impl.HTMLBodyElement)) return;\n            if (body.parentNode) body.parentNode.removeChild(body);\n\n            while (!(stack.top instanceof impl.HTMLHtmlElement)) stack.pop();\n\n            insertHTMLElement(value, arg3);\n            parser = in_frameset_mode;\n            return;\n\n          case \"address\":\n          case \"article\":\n          case \"aside\":\n          case \"blockquote\":\n          case \"center\":\n          case \"details\":\n          case \"dialog\":\n          case \"dir\":\n          case \"div\":\n          case \"dl\":\n          case \"fieldset\":\n          case \"figcaption\":\n          case \"figure\":\n          case \"footer\":\n          case \"header\":\n          case \"hgroup\":\n          case \"main\":\n          case \"nav\":\n          case \"ol\":\n          case \"p\":\n          case \"section\":\n          case \"summary\":\n          case \"ul\":\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"menu\":\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n\n            if (isA(stack.top, 'menuitem')) {\n              stack.pop();\n            }\n\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"h1\":\n          case \"h2\":\n          case \"h3\":\n          case \"h4\":\n          case \"h5\":\n          case \"h6\":\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n            if (stack.top instanceof impl.HTMLHeadingElement) stack.pop();\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"pre\":\n          case \"listing\":\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n            insertHTMLElement(value, arg3);\n            ignore_linefeed = true;\n            frameset_ok = false;\n            return;\n\n          case \"form\":\n            if (form_element_pointer && !stack.contains(\"template\")) return;\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n            elt = insertHTMLElement(value, arg3);\n            if (!stack.contains(\"template\")) form_element_pointer = elt;\n            return;\n\n          case \"li\":\n            frameset_ok = false;\n\n            for (i = stack.elements.length - 1; i >= 0; i--) {\n              node = stack.elements[i];\n\n              if (node instanceof impl.HTMLLIElement) {\n                in_body_mode(ENDTAG, \"li\");\n                break;\n              }\n\n              if (isA(node, specialSet) && !isA(node, addressdivpSet)) break;\n            }\n\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"dd\":\n          case \"dt\":\n            frameset_ok = false;\n\n            for (i = stack.elements.length - 1; i >= 0; i--) {\n              node = stack.elements[i];\n\n              if (isA(node, dddtSet)) {\n                in_body_mode(ENDTAG, node.localName);\n                break;\n              }\n\n              if (isA(node, specialSet) && !isA(node, addressdivpSet)) break;\n            }\n\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"plaintext\":\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n            insertHTMLElement(value, arg3);\n            tokenizer = plaintext_state;\n            return;\n\n          case \"button\":\n            if (stack.inScope(\"button\")) {\n              in_body_mode(ENDTAG, \"button\");\n              parser(t, value, arg3, arg4);\n            } else {\n              afereconstruct();\n              insertHTMLElement(value, arg3);\n              frameset_ok = false;\n            }\n\n            return;\n\n          case \"a\":\n            var activeElement = afe.findElementByTag(\"a\");\n\n            if (activeElement) {\n              in_body_mode(ENDTAG, value);\n              afe.remove(activeElement);\n              stack.removeElement(activeElement);\n            }\n\n          /* falls through */\n\n          case \"b\":\n          case \"big\":\n          case \"code\":\n          case \"em\":\n          case \"font\":\n          case \"i\":\n          case \"s\":\n          case \"small\":\n          case \"strike\":\n          case \"strong\":\n          case \"tt\":\n          case \"u\":\n            afereconstruct();\n            afe.push(insertHTMLElement(value, arg3), arg3);\n            return;\n\n          case \"nobr\":\n            afereconstruct();\n\n            if (stack.inScope(value)) {\n              in_body_mode(ENDTAG, value);\n              afereconstruct();\n            }\n\n            afe.push(insertHTMLElement(value, arg3), arg3);\n            return;\n\n          case \"applet\":\n          case \"marquee\":\n          case \"object\":\n            afereconstruct();\n            insertHTMLElement(value, arg3);\n            afe.insertMarker();\n            frameset_ok = false;\n            return;\n\n          case \"table\":\n            if (!doc._quirks && stack.inButtonScope(\"p\")) {\n              in_body_mode(ENDTAG, \"p\");\n            }\n\n            insertHTMLElement(value, arg3);\n            frameset_ok = false;\n            parser = in_table_mode;\n            return;\n\n          case \"area\":\n          case \"br\":\n          case \"embed\":\n          case \"img\":\n          case \"keygen\":\n          case \"wbr\":\n            afereconstruct();\n            insertHTMLElement(value, arg3);\n            stack.pop();\n            frameset_ok = false;\n            return;\n\n          case \"input\":\n            afereconstruct();\n            elt = insertHTMLElement(value, arg3);\n            stack.pop();\n            var type = elt.getAttribute(\"type\");\n            if (!type || type.toLowerCase() !== \"hidden\") frameset_ok = false;\n            return;\n\n          case \"param\":\n          case \"source\":\n          case \"track\":\n            insertHTMLElement(value, arg3);\n            stack.pop();\n            return;\n\n          case \"hr\":\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n\n            if (isA(stack.top, 'menuitem')) {\n              stack.pop();\n            }\n\n            insertHTMLElement(value, arg3);\n            stack.pop();\n            frameset_ok = false;\n            return;\n\n          case \"image\":\n            in_body_mode(TAG, \"img\", arg3, arg4);\n            return;\n\n          case \"textarea\":\n            insertHTMLElement(value, arg3);\n            ignore_linefeed = true;\n            frameset_ok = false;\n            tokenizer = rcdata_state;\n            originalInsertionMode = parser;\n            parser = text_mode;\n            return;\n\n          case \"xmp\":\n            if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n            afereconstruct();\n            frameset_ok = false;\n            parseRawText(value, arg3);\n            return;\n\n          case \"iframe\":\n            frameset_ok = false;\n            parseRawText(value, arg3);\n            return;\n\n          case \"noembed\":\n            parseRawText(value, arg3);\n            return;\n\n          case \"noscript\":\n            if (scripting_enabled) {\n              parseRawText(value, arg3);\n              return;\n            }\n\n            break;\n          // XXX Otherwise treat it as any other open tag?\n\n          case \"select\":\n            afereconstruct();\n            insertHTMLElement(value, arg3);\n            frameset_ok = false;\n            if (parser === in_table_mode || parser === in_caption_mode || parser === in_table_body_mode || parser === in_row_mode || parser === in_cell_mode) parser = in_select_in_table_mode;else parser = in_select_mode;\n            return;\n\n          case \"optgroup\":\n          case \"option\":\n            if (stack.top instanceof impl.HTMLOptionElement) {\n              in_body_mode(ENDTAG, \"option\");\n            }\n\n            afereconstruct();\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"menuitem\":\n            if (isA(stack.top, 'menuitem')) {\n              stack.pop();\n            }\n\n            afereconstruct();\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"rb\":\n          case \"rtc\":\n            if (stack.inScope(\"ruby\")) {\n              stack.generateImpliedEndTags();\n            }\n\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"rp\":\n          case \"rt\":\n            if (stack.inScope(\"ruby\")) {\n              stack.generateImpliedEndTags(\"rtc\");\n            }\n\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"math\":\n            afereconstruct();\n            adjustMathMLAttributes(arg3);\n            adjustForeignAttributes(arg3);\n            insertForeignElement(value, arg3, NAMESPACE.MATHML);\n            if (arg4) // self-closing flag\n              stack.pop();\n            return;\n\n          case \"svg\":\n            afereconstruct();\n            adjustSVGAttributes(arg3);\n            adjustForeignAttributes(arg3);\n            insertForeignElement(value, arg3, NAMESPACE.SVG);\n            if (arg4) // self-closing flag\n              stack.pop();\n            return;\n\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"frame\":\n          case \"head\":\n          case \"tbody\":\n          case \"td\":\n          case \"tfoot\":\n          case \"th\":\n          case \"thead\":\n          case \"tr\":\n            // Ignore table tags if we're not in_table mode\n            return;\n        } // Handle any other start tag here\n        // (and also noscript tags when scripting is disabled)\n\n\n        afereconstruct();\n        insertHTMLElement(value, arg3);\n        return;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"template\":\n            in_head_mode(ENDTAG, value, arg3);\n            return;\n\n          case \"body\":\n            if (!stack.inScope(\"body\")) return;\n            parser = after_body_mode;\n            return;\n\n          case \"html\":\n            if (!stack.inScope(\"body\")) return;\n            parser = after_body_mode;\n            parser(t, value, arg3);\n            return;\n\n          case \"address\":\n          case \"article\":\n          case \"aside\":\n          case \"blockquote\":\n          case \"button\":\n          case \"center\":\n          case \"details\":\n          case \"dialog\":\n          case \"dir\":\n          case \"div\":\n          case \"dl\":\n          case \"fieldset\":\n          case \"figcaption\":\n          case \"figure\":\n          case \"footer\":\n          case \"header\":\n          case \"hgroup\":\n          case \"listing\":\n          case \"main\":\n          case \"menu\":\n          case \"nav\":\n          case \"ol\":\n          case \"pre\":\n          case \"section\":\n          case \"summary\":\n          case \"ul\":\n            // Ignore if there is not a matching open tag\n            if (!stack.inScope(value)) return;\n            stack.generateImpliedEndTags();\n            stack.popTag(value);\n            return;\n\n          case \"form\":\n            if (!stack.contains(\"template\")) {\n              var openform = form_element_pointer;\n              form_element_pointer = null;\n              if (!openform || !stack.elementInScope(openform)) return;\n              stack.generateImpliedEndTags();\n              stack.removeElement(openform);\n            } else {\n              if (!stack.inScope(\"form\")) return;\n              stack.generateImpliedEndTags();\n              stack.popTag(\"form\");\n            }\n\n            return;\n\n          case \"p\":\n            if (!stack.inButtonScope(value)) {\n              in_body_mode(TAG, value, null);\n              parser(t, value, arg3, arg4);\n            } else {\n              stack.generateImpliedEndTags(value);\n              stack.popTag(value);\n            }\n\n            return;\n\n          case \"li\":\n            if (!stack.inListItemScope(value)) return;\n            stack.generateImpliedEndTags(value);\n            stack.popTag(value);\n            return;\n\n          case \"dd\":\n          case \"dt\":\n            if (!stack.inScope(value)) return;\n            stack.generateImpliedEndTags(value);\n            stack.popTag(value);\n            return;\n\n          case \"h1\":\n          case \"h2\":\n          case \"h3\":\n          case \"h4\":\n          case \"h5\":\n          case \"h6\":\n            if (!stack.elementTypeInScope(impl.HTMLHeadingElement)) return;\n            stack.generateImpliedEndTags();\n            stack.popElementType(impl.HTMLHeadingElement);\n            return;\n\n          case \"sarcasm\":\n            // Take a deep breath, and then:\n            break;\n\n          case \"a\":\n          case \"b\":\n          case \"big\":\n          case \"code\":\n          case \"em\":\n          case \"font\":\n          case \"i\":\n          case \"nobr\":\n          case \"s\":\n          case \"small\":\n          case \"strike\":\n          case \"strong\":\n          case \"tt\":\n          case \"u\":\n            var result = adoptionAgency(value);\n            if (result) return; // If we did something we're done\n\n            break;\n          // Go to the \"any other end tag\" case\n\n          case \"applet\":\n          case \"marquee\":\n          case \"object\":\n            if (!stack.inScope(value)) return;\n            stack.generateImpliedEndTags();\n            stack.popTag(value);\n            afe.clearToMarker();\n            return;\n\n          case \"br\":\n            in_body_mode(TAG, value, null); // Turn </br> into <br>\n\n            return;\n        } // Any other end tag goes here\n\n\n        for (i = stack.elements.length - 1; i >= 0; i--) {\n          node = stack.elements[i];\n\n          if (isA(node, value)) {\n            stack.generateImpliedEndTags(value);\n            stack.popElement(node);\n            break;\n          } else if (isA(node, specialSet)) {\n            return;\n          }\n        }\n\n        return;\n    }\n  }\n\n  function text_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        insertText(value);\n        return;\n\n      case -1:\n        // EOF\n        if (stack.top instanceof impl.HTMLScriptElement) stack.top._already_started = true;\n        stack.pop();\n        parser = originalInsertionMode;\n        parser(t);\n        return;\n\n      case 3:\n        // ENDTAG\n        if (value === \"script\") {\n          handleScriptEnd();\n        } else {\n          stack.pop();\n          parser = originalInsertionMode;\n        }\n\n        return;\n\n      default:\n        // We should never get any other token types\n        return;\n    }\n  }\n\n  function in_table_mode(t, value, arg3, arg4) {\n    function getTypeAttr(attrs) {\n      for (var i = 0, n = attrs.length; i < n; i++) {\n        if (attrs[i][0] === \"type\") return attrs[i][1].toLowerCase();\n      }\n\n      return null;\n    }\n\n    switch (t) {\n      case 1:\n        // TEXT\n        // XXX the text_integration_mode stuff is\n        // just a hack I made up\n        if (text_integration_mode) {\n          in_body_mode(t, value, arg3, arg4);\n          return;\n        } else if (isA(stack.top, tablesectionrowSet)) {\n          pending_table_text = [];\n          originalInsertionMode = parser;\n          parser = in_table_text_mode;\n          parser(t, value, arg3, arg4);\n          return;\n        }\n\n        break;\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"caption\":\n            stack.clearToContext(tableContextSet);\n            afe.insertMarker();\n            insertHTMLElement(value, arg3);\n            parser = in_caption_mode;\n            return;\n\n          case \"colgroup\":\n            stack.clearToContext(tableContextSet);\n            insertHTMLElement(value, arg3);\n            parser = in_column_group_mode;\n            return;\n\n          case \"col\":\n            in_table_mode(TAG, \"colgroup\", null);\n            parser(t, value, arg3, arg4);\n            return;\n\n          case \"tbody\":\n          case \"tfoot\":\n          case \"thead\":\n            stack.clearToContext(tableContextSet);\n            insertHTMLElement(value, arg3);\n            parser = in_table_body_mode;\n            return;\n\n          case \"td\":\n          case \"th\":\n          case \"tr\":\n            in_table_mode(TAG, \"tbody\", null);\n            parser(t, value, arg3, arg4);\n            return;\n\n          case \"table\":\n            if (!stack.inTableScope(value)) {\n              return; // Ignore the token\n            }\n\n            in_table_mode(ENDTAG, value);\n            parser(t, value, arg3, arg4);\n            return;\n\n          case \"style\":\n          case \"script\":\n          case \"template\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n\n          case \"input\":\n            var type = getTypeAttr(arg3);\n            if (type !== \"hidden\") break; // to the anything else case\n\n            insertHTMLElement(value, arg3);\n            stack.pop();\n            return;\n\n          case \"form\":\n            if (form_element_pointer || stack.contains(\"template\")) return;\n            form_element_pointer = insertHTMLElement(value, arg3);\n            stack.popElement(form_element_pointer);\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"table\":\n            if (!stack.inTableScope(value)) return;\n            stack.popTag(value);\n            resetInsertionMode();\n            return;\n\n          case \"body\":\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"html\":\n          case \"tbody\":\n          case \"td\":\n          case \"tfoot\":\n          case \"th\":\n          case \"thead\":\n          case \"tr\":\n            return;\n\n          case \"template\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n\n      case -1:\n        // EOF\n        in_body_mode(t, value, arg3, arg4);\n        return;\n    } // This is the anything else case\n\n\n    foster_parent_mode = true;\n    in_body_mode(t, value, arg3, arg4);\n    foster_parent_mode = false;\n  }\n\n  function in_table_text_mode(t, value, arg3, arg4) {\n    if (t === TEXT) {\n      if (textIncludesNUL) {\n        value = value.replace(NULCHARS, \"\");\n        if (value.length === 0) return;\n      }\n\n      pending_table_text.push(value);\n    } else {\n      var s = pending_table_text.join(\"\");\n      pending_table_text.length = 0;\n\n      if (NONWS.test(s)) {\n        // If any non-whitespace characters\n        // This must be the same code as the \"anything else\"\n        // case of the in_table mode above.\n        foster_parent_mode = true;\n        in_body_mode(TEXT, s);\n        foster_parent_mode = false;\n      } else {\n        insertText(s);\n      }\n\n      parser = originalInsertionMode;\n      parser(t, value, arg3, arg4);\n    }\n  }\n\n  function in_caption_mode(t, value, arg3, arg4) {\n    function end_caption() {\n      if (!stack.inTableScope(\"caption\")) return false;\n      stack.generateImpliedEndTags();\n      stack.popTag(\"caption\");\n      afe.clearToMarker();\n      parser = in_table_mode;\n      return true;\n    }\n\n    switch (t) {\n      case 2:\n        // TAG\n        switch (value) {\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"tbody\":\n          case \"td\":\n          case \"tfoot\":\n          case \"th\":\n          case \"thead\":\n          case \"tr\":\n            if (end_caption()) parser(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"caption\":\n            end_caption();\n            return;\n\n          case \"table\":\n            if (end_caption()) parser(t, value, arg3, arg4);\n            return;\n\n          case \"body\":\n          case \"col\":\n          case \"colgroup\":\n          case \"html\":\n          case \"tbody\":\n          case \"td\":\n          case \"tfoot\":\n          case \"th\":\n          case \"thead\":\n          case \"tr\":\n            return;\n        }\n\n        break;\n    } // The Anything Else case\n\n\n    in_body_mode(t, value, arg3, arg4);\n  }\n\n  function in_column_group_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        var ws = value.match(LEADINGWS);\n\n        if (ws) {\n          insertText(ws[0]);\n          value = value.substring(ws[0].length);\n        }\n\n        if (value.length === 0) return;\n        break;\n      // Handle non-whitespace below\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"col\":\n            insertHTMLElement(value, arg3);\n            stack.pop();\n            return;\n\n          case \"template\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"colgroup\":\n            if (!isA(stack.top, 'colgroup')) {\n              return; // Ignore the token.\n            }\n\n            stack.pop();\n            parser = in_table_mode;\n            return;\n\n          case \"col\":\n            return;\n\n          case \"template\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n\n      case -1:\n        // EOF\n        in_body_mode(t, value, arg3, arg4);\n        return;\n    } // Anything else\n\n\n    if (!isA(stack.top, 'colgroup')) {\n      return; // Ignore the token.\n    }\n\n    in_column_group_mode(ENDTAG, \"colgroup\");\n    parser(t, value, arg3, arg4);\n  }\n\n  function in_table_body_mode(t, value, arg3, arg4) {\n    function endsect() {\n      if (!stack.inTableScope(\"tbody\") && !stack.inTableScope(\"thead\") && !stack.inTableScope(\"tfoot\")) return;\n      stack.clearToContext(tableBodyContextSet);\n      in_table_body_mode(ENDTAG, stack.top.localName, null);\n      parser(t, value, arg3, arg4);\n    }\n\n    switch (t) {\n      case 2:\n        // TAG\n        switch (value) {\n          case \"tr\":\n            stack.clearToContext(tableBodyContextSet);\n            insertHTMLElement(value, arg3);\n            parser = in_row_mode;\n            return;\n\n          case \"th\":\n          case \"td\":\n            in_table_body_mode(TAG, \"tr\", null);\n            parser(t, value, arg3, arg4);\n            return;\n\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"tbody\":\n          case \"tfoot\":\n          case \"thead\":\n            endsect();\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"table\":\n            endsect();\n            return;\n\n          case \"tbody\":\n          case \"tfoot\":\n          case \"thead\":\n            if (stack.inTableScope(value)) {\n              stack.clearToContext(tableBodyContextSet);\n              stack.pop();\n              parser = in_table_mode;\n            }\n\n            return;\n\n          case \"body\":\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"html\":\n          case \"td\":\n          case \"th\":\n          case \"tr\":\n            return;\n        }\n\n        break;\n    } // Anything else:\n\n\n    in_table_mode(t, value, arg3, arg4);\n  }\n\n  function in_row_mode(t, value, arg3, arg4) {\n    function endrow() {\n      if (!stack.inTableScope(\"tr\")) return false;\n      stack.clearToContext(tableRowContextSet);\n      stack.pop();\n      parser = in_table_body_mode;\n      return true;\n    }\n\n    switch (t) {\n      case 2:\n        // TAG\n        switch (value) {\n          case \"th\":\n          case \"td\":\n            stack.clearToContext(tableRowContextSet);\n            insertHTMLElement(value, arg3);\n            parser = in_cell_mode;\n            afe.insertMarker();\n            return;\n\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"tbody\":\n          case \"tfoot\":\n          case \"thead\":\n          case \"tr\":\n            if (endrow()) parser(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"tr\":\n            endrow();\n            return;\n\n          case \"table\":\n            if (endrow()) parser(t, value, arg3, arg4);\n            return;\n\n          case \"tbody\":\n          case \"tfoot\":\n          case \"thead\":\n            if (stack.inTableScope(value)) {\n              if (endrow()) parser(t, value, arg3, arg4);\n            }\n\n            return;\n\n          case \"body\":\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"html\":\n          case \"td\":\n          case \"th\":\n            return;\n        }\n\n        break;\n    } // anything else\n\n\n    in_table_mode(t, value, arg3, arg4);\n  }\n\n  function in_cell_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 2:\n        // TAG\n        switch (value) {\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"tbody\":\n          case \"td\":\n          case \"tfoot\":\n          case \"th\":\n          case \"thead\":\n          case \"tr\":\n            if (stack.inTableScope(\"td\")) {\n              in_cell_mode(ENDTAG, \"td\");\n              parser(t, value, arg3, arg4);\n            } else if (stack.inTableScope(\"th\")) {\n              in_cell_mode(ENDTAG, \"th\");\n              parser(t, value, arg3, arg4);\n            }\n\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"td\":\n          case \"th\":\n            if (!stack.inTableScope(value)) return;\n            stack.generateImpliedEndTags();\n            stack.popTag(value);\n            afe.clearToMarker();\n            parser = in_row_mode;\n            return;\n\n          case \"body\":\n          case \"caption\":\n          case \"col\":\n          case \"colgroup\":\n          case \"html\":\n            return;\n\n          case \"table\":\n          case \"tbody\":\n          case \"tfoot\":\n          case \"thead\":\n          case \"tr\":\n            if (!stack.inTableScope(value)) return;\n            in_cell_mode(ENDTAG, stack.inTableScope(\"td\") ? \"td\" : \"th\");\n            parser(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n    } // anything else\n\n\n    in_body_mode(t, value, arg3, arg4);\n  }\n\n  function in_select_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        if (textIncludesNUL) {\n          value = value.replace(NULCHARS, \"\");\n          if (value.length === 0) return;\n        }\n\n        insertText(value);\n        return;\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case -1:\n        // EOF\n        in_body_mode(t, value, arg3, arg4);\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"option\":\n            if (stack.top instanceof impl.HTMLOptionElement) in_select_mode(ENDTAG, value);\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"optgroup\":\n            if (stack.top instanceof impl.HTMLOptionElement) in_select_mode(ENDTAG, \"option\");\n            if (stack.top instanceof impl.HTMLOptGroupElement) in_select_mode(ENDTAG, value);\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"select\":\n            in_select_mode(ENDTAG, value); // treat it as a close tag\n\n            return;\n\n          case \"input\":\n          case \"keygen\":\n          case \"textarea\":\n            if (!stack.inSelectScope(\"select\")) return;\n            in_select_mode(ENDTAG, \"select\");\n            parser(t, value, arg3, arg4);\n            return;\n\n          case \"script\":\n          case \"template\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"optgroup\":\n            if (stack.top instanceof impl.HTMLOptionElement && stack.elements[stack.elements.length - 2] instanceof impl.HTMLOptGroupElement) {\n              in_select_mode(ENDTAG, \"option\");\n            }\n\n            if (stack.top instanceof impl.HTMLOptGroupElement) stack.pop();\n            return;\n\n          case \"option\":\n            if (stack.top instanceof impl.HTMLOptionElement) stack.pop();\n            return;\n\n          case \"select\":\n            if (!stack.inSelectScope(value)) return;\n            stack.popTag(value);\n            resetInsertionMode();\n            return;\n\n          case \"template\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n    } // anything else: just ignore the token\n\n  }\n\n  function in_select_in_table_mode(t, value, arg3, arg4) {\n    switch (value) {\n      case \"caption\":\n      case \"table\":\n      case \"tbody\":\n      case \"tfoot\":\n      case \"thead\":\n      case \"tr\":\n      case \"td\":\n      case \"th\":\n        switch (t) {\n          case 2:\n            // TAG\n            in_select_in_table_mode(ENDTAG, \"select\");\n            parser(t, value, arg3, arg4);\n            return;\n\n          case 3:\n            // ENDTAG\n            if (stack.inTableScope(value)) {\n              in_select_in_table_mode(ENDTAG, \"select\");\n              parser(t, value, arg3, arg4);\n            }\n\n            return;\n        }\n\n    } // anything else\n\n\n    in_select_mode(t, value, arg3, arg4);\n  }\n\n  function in_template_mode(t, value, arg3, arg4) {\n    function switchModeAndReprocess(mode) {\n      parser = mode;\n      templateInsertionModes[templateInsertionModes.length - 1] = parser;\n      parser(t, value, arg3, arg4);\n    }\n\n    switch (t) {\n      case 1: // TEXT\n\n      case 4: // COMMENT\n\n      case 5:\n        // DOCTYPE\n        in_body_mode(t, value, arg3, arg4);\n        return;\n\n      case -1:\n        // EOF\n        if (!stack.contains(\"template\")) {\n          stopParsing();\n        } else {\n          stack.popTag(\"template\");\n          afe.clearToMarker();\n          templateInsertionModes.pop();\n          resetInsertionMode();\n          parser(t, value, arg3, arg4);\n        }\n\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"base\":\n          case \"basefont\":\n          case \"bgsound\":\n          case \"link\":\n          case \"meta\":\n          case \"noframes\":\n          case \"script\":\n          case \"style\":\n          case \"template\":\n          case \"title\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n\n          case \"caption\":\n          case \"colgroup\":\n          case \"tbody\":\n          case \"tfoot\":\n          case \"thead\":\n            switchModeAndReprocess(in_table_mode);\n            return;\n\n          case \"col\":\n            switchModeAndReprocess(in_column_group_mode);\n            return;\n\n          case \"tr\":\n            switchModeAndReprocess(in_table_body_mode);\n            return;\n\n          case \"td\":\n          case \"th\":\n            switchModeAndReprocess(in_row_mode);\n            return;\n        }\n\n        switchModeAndReprocess(in_body_mode);\n        return;\n\n      case 3:\n        // ENDTAG\n        switch (value) {\n          case \"template\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n\n          default:\n            return;\n        }\n\n    }\n  }\n\n  function after_body_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        // If any non-space chars, handle below\n        if (NONWS.test(value)) break;\n        in_body_mode(t, value);\n        return;\n\n      case 4:\n        // COMMENT\n        // Append it to the <html> element\n        stack.elements[0]._appendChild(doc.createComment(value));\n\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case -1:\n        // EOF\n        stopParsing();\n        return;\n\n      case 2:\n        // TAG\n        if (value === \"html\") {\n          in_body_mode(t, value, arg3, arg4);\n          return;\n        }\n\n        break;\n      // for any other tags\n\n      case 3:\n        // ENDTAG\n        if (value === \"html\") {\n          if (fragment) return;\n          parser = after_after_body_mode;\n          return;\n        }\n\n        break;\n      // for any other tags\n    } // anything else\n\n\n    parser = in_body_mode;\n    parser(t, value, arg3, arg4);\n  }\n\n  function in_frameset_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        // Ignore any non-space characters\n        value = value.replace(ALLNONWS, \"\");\n        if (value.length > 0) insertText(value);\n        return;\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case -1:\n        // EOF\n        stopParsing();\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"frameset\":\n            insertHTMLElement(value, arg3);\n            return;\n\n          case \"frame\":\n            insertHTMLElement(value, arg3);\n            stack.pop();\n            return;\n\n          case \"noframes\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        if (value === \"frameset\") {\n          if (fragment && stack.top instanceof impl.HTMLHtmlElement) return;\n          stack.pop();\n          if (!fragment && !(stack.top instanceof impl.HTMLFrameSetElement)) parser = after_frameset_mode;\n          return;\n        }\n\n        break;\n    } // ignore anything else\n\n  }\n\n  function after_frameset_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        // Ignore any non-space characters\n        value = value.replace(ALLNONWS, \"\");\n        if (value.length > 0) insertText(value);\n        return;\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        return;\n\n      case -1:\n        // EOF\n        stopParsing();\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"noframes\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n\n      case 3:\n        // ENDTAG\n        if (value === \"html\") {\n          parser = after_after_frameset_mode;\n          return;\n        }\n\n        break;\n    } // ignore anything else\n\n  }\n\n  function after_after_body_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        // If any non-space chars, handle below\n        if (NONWS.test(value)) break;\n        in_body_mode(t, value, arg3, arg4);\n        return;\n\n      case 4:\n        // COMMENT\n        doc._appendChild(doc.createComment(value));\n\n        return;\n\n      case 5:\n        // DOCTYPE\n        in_body_mode(t, value, arg3, arg4);\n        return;\n\n      case -1:\n        // EOF\n        stopParsing();\n        return;\n\n      case 2:\n        // TAG\n        if (value === \"html\") {\n          in_body_mode(t, value, arg3, arg4);\n          return;\n        }\n\n        break;\n    } // anything else\n\n\n    parser = in_body_mode;\n    parser(t, value, arg3, arg4);\n  }\n\n  function after_after_frameset_mode(t, value, arg3, arg4) {\n    switch (t) {\n      case 1:\n        // TEXT\n        // Ignore any non-space characters\n        value = value.replace(ALLNONWS, \"\");\n        if (value.length > 0) in_body_mode(t, value, arg3, arg4);\n        return;\n\n      case 4:\n        // COMMENT\n        doc._appendChild(doc.createComment(value));\n\n        return;\n\n      case 5:\n        // DOCTYPE\n        in_body_mode(t, value, arg3, arg4);\n        return;\n\n      case -1:\n        // EOF\n        stopParsing();\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"html\":\n            in_body_mode(t, value, arg3, arg4);\n            return;\n\n          case \"noframes\":\n            in_head_mode(t, value, arg3, arg4);\n            return;\n        }\n\n        break;\n    } // ignore anything else\n\n  } // 13.2.5.5 The rules for parsing tokens in foreign content\n  //\n  // This is like one of the insertion modes above, but is\n  // invoked somewhat differently when the current token is not HTML.\n  // See the insertToken() function.\n\n\n  function insertForeignToken(t, value, arg3, arg4) {\n    // A <font> tag is an HTML font tag if it has a color, font, or size\n    // attribute.  Otherwise we assume it is foreign content\n    function isHTMLFont(attrs) {\n      for (var i = 0, n = attrs.length; i < n; i++) {\n        switch (attrs[i][0]) {\n          case \"color\":\n          case \"face\":\n          case \"size\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    var current;\n\n    switch (t) {\n      case 1:\n        // TEXT\n        // If any non-space, non-nul characters\n        if (frameset_ok && NONWSNONNUL.test(value)) frameset_ok = false;\n\n        if (textIncludesNUL) {\n          value = value.replace(NULCHARS, \"\\uFFFD\");\n        }\n\n        insertText(value);\n        return;\n\n      case 4:\n        // COMMENT\n        insertComment(value);\n        return;\n\n      case 5:\n        // DOCTYPE\n        // ignore it\n        return;\n\n      case 2:\n        // TAG\n        switch (value) {\n          case \"font\":\n            if (!isHTMLFont(arg3)) break;\n\n          /* falls through */\n\n          case \"b\":\n          case \"big\":\n          case \"blockquote\":\n          case \"body\":\n          case \"br\":\n          case \"center\":\n          case \"code\":\n          case \"dd\":\n          case \"div\":\n          case \"dl\":\n          case \"dt\":\n          case \"em\":\n          case \"embed\":\n          case \"h1\":\n          case \"h2\":\n          case \"h3\":\n          case \"h4\":\n          case \"h5\":\n          case \"h6\":\n          case \"head\":\n          case \"hr\":\n          case \"i\":\n          case \"img\":\n          case \"li\":\n          case \"listing\":\n          case \"menu\":\n          case \"meta\":\n          case \"nobr\":\n          case \"ol\":\n          case \"p\":\n          case \"pre\":\n          case \"ruby\":\n          case \"s\":\n          case \"small\":\n          case \"span\":\n          case \"strong\":\n          case \"strike\":\n          case \"sub\":\n          case \"sup\":\n          case \"table\":\n          case \"tt\":\n          case \"u\":\n          case \"ul\":\n          case \"var\":\n            if (fragment) {\n              break;\n            }\n\n            do {\n              stack.pop();\n              current = stack.top;\n            } while (current.namespaceURI !== NAMESPACE.HTML && !isMathmlTextIntegrationPoint(current) && !isHTMLIntegrationPoint(current));\n\n            insertToken(t, value, arg3, arg4); // reprocess\n\n            return;\n        } // Any other start tag case goes here\n\n\n        current = stack.elements.length === 1 && fragment ? fragmentContext : stack.top;\n\n        if (current.namespaceURI === NAMESPACE.MATHML) {\n          adjustMathMLAttributes(arg3);\n        } else if (current.namespaceURI === NAMESPACE.SVG) {\n          value = adjustSVGTagName(value);\n          adjustSVGAttributes(arg3);\n        }\n\n        adjustForeignAttributes(arg3);\n        insertForeignElement(value, arg3, current.namespaceURI);\n\n        if (arg4) {\n          // the self-closing flag\n          if (value === 'script' && current.namespaceURI === NAMESPACE.SVG) {// XXX deal with SVG scripts here\n          }\n\n          stack.pop();\n        }\n\n        return;\n\n      case 3:\n        // ENDTAG\n        current = stack.top;\n\n        if (value === \"script\" && current.namespaceURI === NAMESPACE.SVG && current.localName === \"script\") {\n          stack.pop(); // XXX\n          // Deal with SVG scripts here\n        } else {\n          // The any other end tag case\n          var i = stack.elements.length - 1;\n          var node = stack.elements[i];\n\n          for (;;) {\n            if (node.localName.toLowerCase() === value) {\n              stack.popElement(node);\n              break;\n            }\n\n            node = stack.elements[--i]; // If non-html, keep looping\n\n            if (node.namespaceURI !== NAMESPACE.HTML) continue; // Otherwise process the end tag as html\n\n            parser(t, value, arg3, arg4);\n            break;\n          }\n        }\n\n        return;\n    }\n  }\n  /***\n   * Finally, this is the end of the HTMLParser() factory function.\n   * It returns the htmlparser object with the append() and end() methods.\n   */\n  // Sneak another method into the htmlparser object to allow us to run\n  // tokenizer tests.  This can be commented out in production code.\n  // This is a hook for testing the tokenizer. It has to be here\n  // because the tokenizer details are all hidden away within the closure.\n  // It should return an array of tokens generated while parsing the\n  // input string.\n\n\n  htmlparser.testTokenizer = function (input, initialState, lastStartTag, charbychar) {\n    var tokens = [];\n\n    switch (initialState) {\n      case \"PCDATA state\":\n        tokenizer = data_state;\n        break;\n\n      case \"RCDATA state\":\n        tokenizer = rcdata_state;\n        break;\n\n      case \"RAWTEXT state\":\n        tokenizer = rawtext_state;\n        break;\n\n      case \"PLAINTEXT state\":\n        tokenizer = plaintext_state;\n        break;\n    }\n\n    if (lastStartTag) {\n      lasttagname = lastStartTag;\n    }\n\n    insertToken = function (t, value, arg3, arg4) {\n      flushText();\n\n      switch (t) {\n        case 1:\n          // TEXT\n          if (tokens.length > 0 && tokens[tokens.length - 1][0] === \"Character\") {\n            tokens[tokens.length - 1][1] += value;\n          } else tokens.push([\"Character\", value]);\n\n          break;\n\n        case 4:\n          // COMMENT\n          tokens.push([\"Comment\", value]);\n          break;\n\n        case 5:\n          // DOCTYPE\n          tokens.push([\"DOCTYPE\", value, arg3 === undefined ? null : arg3, arg4 === undefined ? null : arg4, !force_quirks]);\n          break;\n\n        case 2:\n          // TAG\n          var attrs = Object.create(null);\n\n          for (var i = 0; i < arg3.length; i++) {\n            // XXX: does attribute order matter?\n            var a = arg3[i];\n\n            if (a.length === 1) {\n              attrs[a[0]] = \"\";\n            } else {\n              attrs[a[0]] = a[1];\n            }\n          }\n\n          var token = [\"StartTag\", value, attrs];\n          if (arg4) token.push(true);\n          tokens.push(token);\n          break;\n\n        case 3:\n          // ENDTAG\n          tokens.push([\"EndTag\", value]);\n          break;\n\n        case -1:\n          // EOF\n          break;\n      }\n    };\n\n    if (!charbychar) {\n      this.parse(input, true);\n    } else {\n      for (var i = 0; i < input.length; i++) {\n        this.parse(input[i]);\n      }\n\n      this.parse(\"\", true);\n    }\n\n    return tokens;\n  }; // Return the parser object from the HTMLParser() factory function\n\n\n  return htmlparser;\n}","map":{"version":3,"sources":["C:/Dev/Personal/ChatHistory/ChatHistory/ClientApp/node_modules/domino/lib/HTMLParser.js"],"names":["module","exports","HTMLParser","Document","require","DocumentType","Node","NAMESPACE","html","impl","elements","pushAll","Function","prototype","apply","bind","Array","push","EOF","TEXT","TAG","ENDTAG","COMMENT","DOCTYPE","NOATTRS","quirkyPublicIds","quirkySystemId","conditionallyQuirkyPublicIds","limitedQuirkyPublicIds","specialSet","Object","create","HTML","__proto__","SVG","MATHML","addressdivpSet","dddtSet","tablesectionrowSet","impliedEndTagsSet","thoroughImpliedEndTagsSet","tableContextSet","tableBodyContextSet","tableRowContextSet","formassociatedSet","inScopeSet","inListItemScopeSet","ol","ul","inButtonScopeSet","button","inTableScopeSet","invertedSelectScopeSet","mathmlTextIntegrationPointSet","mi","mo","mn","ms","mtext","htmlIntegrationPointSet","foreignObject","desc","title","foreignAttributes","XLINK","XML","XMLNS","svgAttrAdjustments","attributename","attributetype","basefrequency","baseprofile","calcmode","clippathunits","diffuseconstant","edgemode","filterunits","glyphref","gradienttransform","gradientunits","kernelmatrix","kernelunitlength","keypoints","keysplines","keytimes","lengthadjust","limitingconeangle","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","numoctaves","pathlength","patterncontentunits","patterntransform","patternunits","pointsatx","pointsaty","pointsatz","preservealpha","preserveaspectratio","primitiveunits","refx","refy","repeatcount","repeatdur","requiredextensions","requiredfeatures","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","surfacescale","systemlanguage","tablevalues","targetx","targety","textlength","viewbox","viewtarget","xchannelselector","ychannelselector","zoomandpan","svgTagNameAdjustments","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","clippath","feblend","fecolormatrix","fecomponenttransfer","fecomposite","feconvolvematrix","fediffuselighting","fedisplacementmap","fedistantlight","feflood","fefunca","fefuncb","fefuncg","fefuncr","fegaussianblur","feimage","femerge","femergenode","femorphology","feoffset","fepointlight","fespecularlighting","fespotlight","fetile","feturbulence","foreignobject","lineargradient","radialgradient","textpath","numericCharRefReplacements","namedCharRefs","NAMEDCHARREF","NAMEDCHARREF_MAXLEN","DBLQUOTEATTRVAL","SINGLEQUOTEATTRVAL","UNQUOTEDATTRVAL","TAGNAME","ATTRNAME","CDATATEXT","DATATEXT","RAWTEXT","PLAINTEXT","SIMPLETAG","SIMPLEATTR","NONWS","ALLNONWS","NONWSNONNUL","LEADINGWS","NULCHARS","buf2str","buf","CHUNKSIZE","length","String","fromCharCode","result","i","slice","str2buf","s","charCodeAt","isA","elt","set","namespaceURI","localName","tagnames","isMathmlTextIntegrationPoint","n","isHTMLIntegrationPoint","encoding","getAttribute","toLowerCase","adjustSVGTagName","name","adjustSVGAttributes","attrs","adjustMathMLAttributes","adjustForeignAttributes","transferAttributes","value","hasAttribute","_setAttribute","ElementStack","top","e","pop","popTag","tag","popElementType","type","popElement","removeElement","idx","lastIndexOf","splice","clearToContext","contains","inSpecificScope","elementInSpecificScope","target","elementTypeInSpecificScope","inScope","elementInScope","elementTypeInScope","inButtonScope","inListItemScope","inTableScope","inSelectScope","localname","generateImpliedEndTags","butnot","thorough","endTagSet","ActiveFormattingElements","AFE","list","MARKER","insertMarker","count","equal","attrcopy","ii","newelt","oldelt","oldattrs","_numattrs","oldname","oldval","clearToMarker","findElementByTag","indexOf","remove","replace","a","b","insertAfter","address","fragmentContext","options","chars","numchars","nextchar","input_complete","scanner_skip_newline","reentrant_invocations","saved_scanner_state","leftovers","first_batch","paused","tokenizer","data_state","return_state","character_reference_code","tagnamebuf","lasttagname","tempbuf","attrnamebuf","attrvaluebuf","commentbuf","doctypenamebuf","doctypepublicbuf","doctypesystembuf","attributes","is_end_tag","parser","initial_mode","originalInsertionMode","templateInsertionModes","stack","afe","fragment","undefined","head_element_pointer","form_element_pointer","scripting_enabled","ownerDocument","_scripting_enabled","frameset_ok","force_quirks","pending_table_text","text_integration_mode","textrun","textIncludesNUL","ignore_linefeed","htmlparser","document","doc","_asDocumentFragment","frag","createDocumentFragment","root","firstChild","hasChildNodes","appendChild","pause","resume","parse","end","shouldPauseFunc","moreToDo","scanChars","substring","_parser","_quirks","_limitedQuirks","rcdata_state","plaintext_state","createElement","_appendChild","HTMLTemplateElement","in_template_mode","resetInsertionMode","parentElement","HTMLFormElement","codepoint","pattern","eof","lookahead","needsString","pos","addAttribute","handleSimpleAttribute","lastIndex","matched","exec","Error","len","after_attribute_value_quoted_state","before_attribute_name_state","beginTagName","beginEndTagName","beginTempBuf","beginAttrName","beginAttrValue","beginComment","beginDoctype","beginDoctypePublicId","beginDoctypeSystemId","forcequirks","cdataAllowed","appropriateEndTag","flushText","insertToken","getMatchingChars","match","index","emitCharsWhile","emitCharString","emitTag","tagname","emitSimpleTag","endtag","emitSelfClosingTag","emitDoctype","emitEOF","modclock","t","arg3","arg4","current","insertForeignToken","insertComment","data","parent","foster_parent_mode","fosterParent","createComment","content","insertText","createTextNode","lastChild","nodeType","TEXT_NODE","appendData","createHTMLElt","insertHTMLElement","insertElement","_form","eltFunc","insertForeignElement","ns","_createElementNS","attr","_setAttributeNS","lastElementOfType","before","lastTable","lastTemplate","HTMLTableElement","parentNode","prev","previousSibling","insertBefore","last","node","j","ancestor","in_select_in_table_mode","in_select_mode","in_row_mode","in_table_body_mode","in_caption_mode","in_column_group_mode","in_table_mode","in_body_mode","in_frameset_mode","before_head_mode","after_head_mode","in_head_mode","in_cell_mode","parseRawText","rawtext_state","text_mode","parseRCDATA","afeclone","afereconstruct","entry","BOOKMARK","adoptionAgency","outer","fmtelt","furthestblock","furthestblockindex","lastnode","nodeindex","nodeafeindex","inner","newelt2","handleScriptEnd","stopParsing","defaultView","dispatchEvent","Event","reconsume","c","new_state","character_reference_state","tag_open_state","rcdata_less_than_sign_state","rawtext_less_than_sign_state","script_data_state","script_data_less_than_sign_state","markup_declaration_open_state","end_tag_open_state","tag_name_state","bogus_comment_state","self_closing_start_tag_state","rcdata_end_tag_open_state","rcdata_end_tag_name_state","rawtext_end_tag_open_state","rawtext_end_tag_name_state","script_data_end_tag_open_state","script_data_escape_start_state","script_data_end_tag_name_state","script_data_escape_start_dash_state","script_data_escaped_dash_dash_state","script_data_escaped_state","script_data_escaped_dash_state","script_data_escaped_less_than_sign_state","script_data_escaped_end_tag_open_state","script_data_double_escape_start_state","script_data_escaped_end_tag_name_state","script_data_double_escaped_state","script_data_double_escaped_dash_state","script_data_double_escaped_less_than_sign_state","script_data_double_escaped_dash_dash_state","script_data_double_escape_end_state","attribute_name_state","after_attribute_name_state","before_attribute_value_state","attribute_value_double_quoted_state","attribute_value_single_quoted_state","attribute_value_unquoted_state","comment","comment_start_state","toUpperCase","doctype_state","cdata_section_state","comment_start_dash_state","comment_state","comment_end_state","comment_less_than_sign_state","comment_end_dash_state","comment_less_than_sign_bang_state","comment_less_than_sign_bang_dash_state","comment_less_than_sign_bang_dash_dash_state","comment_end_bang_state","before_doctype_name_state","doctype_name_state","after_doctype_name_state","after_doctype_public_keyword_state","after_doctype_system_keyword_state","bogus_doctype_state","before_doctype_public_identifier_state","doctype_public_identifier_double_quoted_state","doctype_public_identifier_single_quoted_state","after_doctype_public_identifier_state","between_doctype_public_and_system_identifiers_state","doctype_system_identifier_double_quoted_state","doctype_system_identifier_single_quoted_state","before_doctype_system_identifier_state","after_doctype_system_identifier_state","cdata_section_bracket_state","cdata_section_end_state","character_reference_end_state","numeric_character_reference_state","named_character_reference_state","test","rv","hexadecimal_character_reference_start_state","decimal_character_reference_start_state","hexadecimal_character_reference_state","decimal_character_reference_state","numeric_character_reference_end_state","publicid","systemid","before_html_mode","ws","in_head_noscript_mode","_parser_inserted","_force_async","_already_started","body","HTMLBodyElement","removeChild","HTMLHtmlElement","HTMLHeadingElement","HTMLLIElement","activeElement","HTMLOptionElement","after_body_mode","openform","HTMLScriptElement","getTypeAttr","in_table_text_mode","join","end_caption","endsect","endrow","HTMLOptGroupElement","switchModeAndReprocess","mode","after_after_body_mode","HTMLFrameSetElement","after_frameset_mode","after_after_frameset_mode","isHTMLFont","testTokenizer","input","initialState","lastStartTag","charbychar","tokens","token"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,SAAD,CAAP,CAAmBG,SAAnC;;AACA,IAAIC,IAAI,GAAGJ,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAIK,IAAI,GAAGD,IAAI,CAACE,QAAhB;AAEA,IAAIC,OAAO,GAAGC,QAAQ,CAACC,SAAT,CAAmBC,KAAnB,CAAyBC,IAAzB,CAA8BC,KAAK,CAACH,SAAN,CAAgBI,IAA9C,CAAdb;AACA,IAAIC,OAAO,GAAG,CAAd;AACA,IAAIC,OAAO,GAAG,CAAd,C,CAEA;;AACA,IAAIC,OAAO,GAAG,EAAd,C,CAEA;;AACA,IAAIC,eAAe,GAAG,uiFAAtB;AAEA,IAAIC,cAAc,GAAG,4DAArB;AAEA,IAAIC,4BAA4B,GAAG,wFAAnC,C,CAEA;;AACA,IAAIC,sBAAsB,GAAG,wFAA7B,C,CAGA;AACA;;AACA,IAAIC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;AACAF,UAAU,CAACtB,SAAS,CAACyB,IAAX,CAAV,GAA6B;AAC3BC,EAAAA,SAAS,EAAE,IADgB;AAE3B,aAAU,IAFiB;AAEX,YAAS,IAFE;AAEI,UAAO,IAFX;AAEiB,aAAU,IAF3B;AAG3B,WAAQ,IAHmB;AAGb,UAAO,IAHM;AAGA,cAAW,IAHX;AAGiB,aAAU,IAH3B;AAI3B,gBAAa,IAJc;AAIR,UAAO,IAJC;AAIK,QAAK,IAJV;AAIgB,YAAS,IAJzB;AAK3B,aAAU,IALiB;AAKX,YAAS,IALE;AAKI,SAAM,IALV;AAKgB,cAAW,IAL3B;AAM3B,QAAK,IANsB;AAMhB,aAAU,IANM;AAMA,SAAM,IANN;AAO3B,SAAM,IAPqB;AAOf,QAAK,IAPU;AAOJ,QAAK,IAPD;AAOO,WAAQ,IAPf;AAQ3B,cAAW,IARgB;AAQV,gBAAa,IARH;AAQS,YAAS,IARlB;AAQwB,YAAS,IARjC;AAS3B,UAAO,IAToB;AASd,WAAQ,IATM;AASA,cAAW,IATX;AASiB,QAAK,IATtB;AAU3B,QAAK,IAVsB;AAUhB,QAAK,IAVW;AAUL,QAAK,IAVA;AAUM,QAAK,IAVX;AAW3B,QAAK,IAXsB;AAWhB,UAAO,IAXS;AAWH,YAAS,IAXN;AAWY,YAAS,IAXrB;AAY3B,QAAK,IAZsB;AAYhB,UAAO,IAZS;AAYH,YAAS,IAZN;AAYY,SAAM,IAZlB;AAa3B,WAAQ,IAbmB;AAab,QAAK,IAbQ;AAaF,UAAO,IAbL;AAc3B,aAAU,IAdiB;AAcX,UAAO,IAdI;AAcE,aAAU,IAdZ;AAckB,UAAO,IAdzB;AAc+B,UAAO,IAdtC;AAe3B,SAAM,IAfqB;AAef,aAAU,IAfK;AAeC,cAAW,IAfZ;AAekB,cAAW,IAf7B;AAgB3B,YAAS,IAhBkB;AAgBZ,QAAK,IAhBO;AAgBD,OAAI,IAhBH;AAgBS,WAAQ,IAhBjB;AAiB3B,eAAY,IAjBe;AAiBT,SAAM,IAjBG;AAiBG,YAAS,IAjBZ;AAiBkB,aAAU,IAjB5B;AAkB3B,YAAS,IAlBkB;AAkBZ,YAAS,IAlBG;AAkBG,WAAQ,IAlBX;AAkBiB,aAAU,IAlB3B;AAkBiC,WAAQ,IAlBzC;AAmB3B,WAAQ,IAnBmB;AAmBb,QAAK,IAnBQ;AAmBF,cAAW,IAnBT;AAmBe,cAAW,IAnB1B;AAmBgC,WAAQ,IAnBxC;AAoB3B,QAAK,IApBsB;AAoBhB,WAAQ,IApBQ;AAoBF,WAAQ,IApBN;AAoBY,QAAK,IApBjB;AAoBuB,WAAQ,IApB/B;AAqB3B;AACA;AACA;AACA,QAAK,IAxBsB;AAwBhB,SAAM,IAxBU;AAwBJ,SAAM;AAxBF,CAA7B;AA0BAJ,UAAU,CAACtB,SAAS,CAAC2B,GAAX,CAAV,GAA4B;AAC1BD,EAAAA,SAAS,EAAE,IADe;AAE1B,mBAAiB,IAFS;AAEH,UAAQ,IAFL;AAEW,WAAS;AAFpB,CAA5B;AAIAJ,UAAU,CAACtB,SAAS,CAAC4B,MAAX,CAAV,GAA+B;AAC7BF,EAAAA,SAAS,EAAE,IADkB;AAE7B,QAAK,IAFwB;AAElB,QAAK,IAFa;AAEP,QAAK,IAFE;AAEI,QAAK,IAFT;AAG7B,WAAQ,IAHqB;AAGf,oBAAiB;AAHF,CAA/B,C,CAMA;;AACA,IAAIG,cAAc,GAAGN,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;AACAK,cAAc,CAAC7B,SAAS,CAACyB,IAAX,CAAd,GAAiC;AAC/BC,EAAAA,SAAS,EAAE,IADoB;AAE/B,aAAU,IAFqB;AAEf,SAAM,IAFS;AAEH,OAAI;AAFD,CAAjC;AAKA,IAAII,OAAO,GAAGP,MAAM,CAACC,MAAP,CAAc,IAAd,CAAd;AACAM,OAAO,CAAC9B,SAAS,CAACyB,IAAX,CAAP,GAA0B;AACxBC,EAAAA,SAAS,EAAE,IADa;AAExB,QAAK,IAFmB;AAEb,QAAK;AAFQ,CAA1B;AAKA,IAAIK,kBAAkB,GAAGR,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;AACAO,kBAAkB,CAAC/B,SAAS,CAACyB,IAAX,CAAlB,GAAqC;AACnCC,EAAAA,SAAS,EAAE,IADwB;AAEnC,WAAQ,IAF2B;AAErB,WAAQ,IAFa;AAEP,WAAQ,IAFD;AAEO,WAAQ,IAFf;AAEqB,QAAK;AAF1B,CAArC;AAKA,IAAIM,iBAAiB,GAAGT,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;AACAQ,iBAAiB,CAAChC,SAAS,CAACyB,IAAX,CAAjB,GAAoC;AAClCC,EAAAA,SAAS,EAAE,IADuB;AAElC,QAAM,IAF4B;AAEtB,QAAM,IAFgB;AAEV,QAAM,IAFI;AAEE,cAAY,IAFd;AAEoB,cAAY,IAFhC;AAGlC,YAAU,IAHwB;AAGlB,OAAK,IAHa;AAGP,QAAM,IAHC;AAGK,QAAM,IAHX;AAGiB,QAAM,IAHvB;AAG6B,SAAO;AAHpC,CAApC;AAMA,IAAIO,yBAAyB,GAAGV,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhC;AACAS,yBAAyB,CAACjC,SAAS,CAACyB,IAAX,CAAzB,GAA4C;AAC1CC,EAAAA,SAAS,EAAE,IAD+B;AAE1C,aAAW,IAF+B;AAEzB,cAAY,IAFa;AAEP,QAAM,IAFC;AAEK,QAAM,IAFX;AAEiB,QAAM,IAFvB;AAG1C,cAAY,IAH8B;AAGxB,YAAU,IAHc;AAGR,OAAK,IAHG;AAGG,QAAM,IAHT;AAGe,QAAM,IAHrB;AAI1C,QAAM,IAJoC;AAI9B,SAAO,IAJuB;AAIjB,WAAS,IAJQ;AAIF,QAAM,IAJJ;AAIU,WAAS,IAJnB;AAK1C,QAAM,IALoC;AAK9B,WAAS,IALqB;AAKf,QAAM;AALS,CAA5C;AAQA,IAAIQ,eAAe,GAAGX,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;AACAU,eAAe,CAAClC,SAAS,CAACyB,IAAX,CAAf,GAAkC;AAChCC,EAAAA,SAAS,EAAE,IADqB;AAEhC,WAAS,IAFuB;AAEjB,cAAY,IAFK;AAEC,UAAQ;AAFT,CAAlC;AAKA,IAAIS,mBAAmB,GAAGZ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;AACAW,mBAAmB,CAACnC,SAAS,CAACyB,IAAX,CAAnB,GAAsC;AACpCC,EAAAA,SAAS,EAAE,IADyB;AAEpC,WAAS,IAF2B;AAErB,WAAS,IAFY;AAEN,WAAS,IAFH;AAES,cAAY,IAFrB;AAE2B,UAAQ;AAFnC,CAAtC;AAKA,IAAIU,kBAAkB,GAAGb,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;AACAY,kBAAkB,CAACpC,SAAS,CAACyB,IAAX,CAAlB,GAAqC;AACnCC,EAAAA,SAAS,EAAE,IADwB;AAEnC,QAAM,IAF6B;AAEvB,cAAY,IAFW;AAEL,UAAQ;AAFH,CAArC,C,CAKA;;AACA,IAAIW,iBAAiB,GAAGd,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;AACAa,iBAAiB,CAACrC,SAAS,CAACyB,IAAX,CAAjB,GAAoC;AAClCC,EAAAA,SAAS,EAAE,IADuB;AAElC,YAAU,IAFwB;AAElB,cAAY,IAFM;AAEA,WAAS,IAFT;AAEe,YAAU,IAFzB;AAGlC,YAAU,IAHwB;AAGlB,YAAU,IAHQ;AAGF,YAAU,IAHR;AAGc,cAAY,IAH1B;AAIlC,SAAO;AAJ2B,CAApC;AAOA,IAAIY,UAAU,GAAGf,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;AACAc,UAAU,CAACtC,SAAS,CAACyB,IAAX,CAAV,GAA4B;AAC1BC,EAAAA,SAAS,EAAE,IADe;AAE1B,YAAS,IAFiB;AAEX,aAAU,IAFC;AAEK,UAAO,IAFZ;AAEkB,WAAQ,IAF1B;AAG1B,QAAK,IAHqB;AAGf,QAAK,IAHU;AAGJ,aAAU,IAHN;AAGY,YAAS,IAHrB;AAI1B,cAAW;AAJe,CAA5B;AAMAY,UAAU,CAACtC,SAAS,CAAC4B,MAAX,CAAV,GAA+B;AAC7BF,EAAAA,SAAS,EAAE,IADkB;AAE7B,QAAK,IAFwB;AAElB,QAAK,IAFa;AAEP,QAAK,IAFE;AAEI,QAAK,IAFT;AAG7B,WAAQ,IAHqB;AAGf,oBAAiB;AAHF,CAA/B;AAKAY,UAAU,CAACtC,SAAS,CAAC2B,GAAX,CAAV,GAA4B;AAC1BD,EAAAA,SAAS,EAAE,IADe;AAE1B,mBAAgB,IAFU;AAEJ,UAAO,IAFH;AAES,WAAQ;AAFjB,CAA5B;AAKA,IAAIa,kBAAkB,GAAGhB,MAAM,CAACC,MAAP,CAAcc,UAAd,CAAzB;AACAC,kBAAkB,CAACvC,SAAS,CAACyB,IAAX,CAAlB,GACEF,MAAM,CAACC,MAAP,CAAcc,UAAU,CAACtC,SAAS,CAACyB,IAAX,CAAxB,CADF;AAEAc,kBAAkB,CAACvC,SAAS,CAACyB,IAAX,CAAlB,CAAmCe,EAAnC,GAAwC,IAAxC;AACAD,kBAAkB,CAACvC,SAAS,CAACyB,IAAX,CAAlB,CAAmCgB,EAAnC,GAAwC,IAAxC;AAEA,IAAIC,gBAAgB,GAAGnB,MAAM,CAACC,MAAP,CAAcc,UAAd,CAAvB;AACAI,gBAAgB,CAAC1C,SAAS,CAACyB,IAAX,CAAhB,GACEF,MAAM,CAACC,MAAP,CAAcc,UAAU,CAACtC,SAAS,CAACyB,IAAX,CAAxB,CADF;AAEAiB,gBAAgB,CAAC1C,SAAS,CAACyB,IAAX,CAAhB,CAAiCkB,MAAjC,GAA0C,IAA1C;AAEA,IAAIC,eAAe,GAAGrB,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;AACAoB,eAAe,CAAC5C,SAAS,CAACyB,IAAX,CAAf,GAAkC;AAChCC,EAAAA,SAAS,EAAE,IADqB;AAEhC,UAAO,IAFyB;AAEnB,WAAQ,IAFW;AAEL,cAAW;AAFN,CAAlC,C,CAKA;;AACA,IAAImB,sBAAsB,GAAGtB,MAAM,CAACC,MAAP,CAAc,IAAd,CAA7B;AACAqB,sBAAsB,CAAC7C,SAAS,CAACyB,IAAX,CAAtB,GAAyC;AACvCC,EAAAA,SAAS,EAAE,IAD4B;AAEvC,cAAW,IAF4B;AAEtB,YAAS;AAFa,CAAzC;AAKA,IAAIoB,6BAA6B,GAAGvB,MAAM,CAACC,MAAP,CAAc,IAAd,CAApC;AACAsB,6BAA6B,CAAC9C,SAAS,CAAC4B,MAAX,CAA7B,GAAkD;AAChDF,EAAAA,SAAS,EAAE,IADqC;AAEhDqB,EAAAA,EAAE,EAAE,IAF4C;AAGhDC,EAAAA,EAAE,EAAE,IAH4C;AAIhDC,EAAAA,EAAE,EAAE,IAJ4C;AAKhDC,EAAAA,EAAE,EAAE,IAL4C;AAMhDC,EAAAA,KAAK,EAAE;AANyC,CAAlD;AASA,IAAIC,uBAAuB,GAAG7B,MAAM,CAACC,MAAP,CAAc,IAAd,CAA9B;AACA4B,uBAAuB,CAACpD,SAAS,CAAC2B,GAAX,CAAvB,GAAyC;AACvCD,EAAAA,SAAS,EAAE,IAD4B;AAEvC2B,EAAAA,aAAa,EAAE,IAFwB;AAGvCC,EAAAA,IAAI,EAAE,IAHiC;AAIvCC,EAAAA,KAAK,EAAE;AAJgC,CAAzC;AAOA,IAAIC,iBAAiB,GAAG;AACtB9B,EAAAA,SAAS,EAAE,IADW;AAEtB,mBAAiB1B,SAAS,CAACyD,KAFL;AAEY,mBAAiBzD,SAAS,CAACyD,KAFvC;AAGtB,gBAAgBzD,SAAS,CAACyD,KAHJ;AAGY,gBAAiBzD,SAAS,CAACyD,KAHvC;AAItB,gBAAgBzD,SAAS,CAACyD,KAJJ;AAIY,iBAAiBzD,SAAS,CAACyD,KAJvC;AAKtB,gBAAgBzD,SAAS,CAACyD,KALJ;AAKY,cAAiBzD,SAAS,CAAC0D,GALvC;AAMtB,cAAgB1D,SAAS,CAAC0D,GANJ;AAMY,eAAiB1D,SAAS,CAAC0D,GANvC;AAOtB,WAAgB1D,SAAS,CAAC2D,KAPJ;AAOY,iBAAiB3D,SAAS,CAAC2D;AAPvC,CAAxB,C,CAWA;;AACA,IAAIC,kBAAkB,GAAG;AACvBlC,EAAAA,SAAS,EAAE,IADY;AAEvBmC,EAAAA,aAAa,EAAE,eAFQ;AAESC,EAAAA,aAAa,EAAE,eAFxB;AAGvBC,EAAAA,aAAa,EAAE,eAHQ;AAGSC,EAAAA,WAAW,EAAE,aAHtB;AAIvBC,EAAAA,QAAQ,EAAE,UAJa;AAIDC,EAAAA,aAAa,EAAE,eAJd;AAKvBC,EAAAA,eAAe,EAAE,iBALM;AAMvBC,EAAAA,QAAQ,EAAE,UANa;AAOvBC,EAAAA,WAAW,EAAE,aAPU;AAQvBC,EAAAA,QAAQ,EAAE,UARa;AAQDC,EAAAA,iBAAiB,EAAE,mBARlB;AASvBC,EAAAA,aAAa,EAAE,eATQ;AASSC,EAAAA,YAAY,EAAE,cATvB;AAUvBC,EAAAA,gBAAgB,EAAE,kBAVK;AAUeC,EAAAA,SAAS,EAAE,WAV1B;AAWvBC,EAAAA,UAAU,EAAE,YAXW;AAWGC,EAAAA,QAAQ,EAAE,UAXb;AAYvBC,EAAAA,YAAY,EAAE,cAZS;AAYOC,EAAAA,iBAAiB,EAAE,mBAZ1B;AAavBC,EAAAA,YAAY,EAAE,cAbS;AAaOC,EAAAA,WAAW,EAAE,aAbpB;AAcvBC,EAAAA,WAAW,EAAE,aAdU;AAcKC,EAAAA,gBAAgB,EAAE,kBAdvB;AAevBC,EAAAA,SAAS,EAAE,WAfY;AAeCC,EAAAA,UAAU,EAAE,YAfb;AAgBvBC,EAAAA,UAAU,EAAE,YAhBW;AAgBGC,EAAAA,mBAAmB,EAAE,qBAhBxB;AAiBvBC,EAAAA,gBAAgB,EAAE,kBAjBK;AAiBeC,EAAAA,YAAY,EAAE,cAjB7B;AAkBvBC,EAAAA,SAAS,EAAE,WAlBY;AAkBCC,EAAAA,SAAS,EAAE,WAlBZ;AAmBvBC,EAAAA,SAAS,EAAE,WAnBY;AAmBCC,EAAAA,aAAa,EAAE,eAnBhB;AAoBvBC,EAAAA,mBAAmB,EAAE,qBApBE;AAqBvBC,EAAAA,cAAc,EAAE,gBArBO;AAqBWC,EAAAA,IAAI,EAAE,MArBjB;AAsBvBC,EAAAA,IAAI,EAAE,MAtBiB;AAsBTC,EAAAA,WAAW,EAAE,aAtBJ;AAuBvBC,EAAAA,SAAS,EAAE,WAvBY;AAuBCC,EAAAA,kBAAkB,EAAE,oBAvBrB;AAwBvBC,EAAAA,gBAAgB,EAAE,kBAxBK;AAyBvBC,EAAAA,gBAAgB,EAAE,kBAzBK;AA0BvBC,EAAAA,gBAAgB,EAAE,kBA1BK;AA0BeC,EAAAA,YAAY,EAAE,cA1B7B;AA2BvBC,EAAAA,WAAW,EAAE,aA3BU;AA2BKC,EAAAA,YAAY,EAAE,cA3BnB;AA4BvBC,EAAAA,WAAW,EAAE,aA5BU;AA4BKC,EAAAA,YAAY,EAAE,cA5BnB;AA6BvBC,EAAAA,cAAc,EAAE,gBA7BO;AA6BWC,EAAAA,WAAW,EAAE,aA7BxB;AA8BvBC,EAAAA,OAAO,EAAE,SA9Bc;AA8BHC,EAAAA,OAAO,EAAE,SA9BN;AA+BvBC,EAAAA,UAAU,EAAE,YA/BW;AA+BGC,EAAAA,OAAO,EAAE,SA/BZ;AAgCvBC,EAAAA,UAAU,EAAE,YAhCW;AAgCGC,EAAAA,gBAAgB,EAAE,kBAhCrB;AAiCvBC,EAAAA,gBAAgB,EAAE,kBAjCK;AAiCeC,EAAAA,UAAU,EAAE;AAjC3B,CAAzB;AAoCA,IAAIC,qBAAqB,GAAG;AAC1B7F,EAAAA,SAAS,EAAE,IADe;AAE1B8F,EAAAA,QAAQ,EAAE,UAFgB;AAEJC,EAAAA,WAAW,EAAE,aAFT;AAG1BC,EAAAA,YAAY,EAAE,cAHY;AAGIC,EAAAA,YAAY,EAAE,cAHlB;AAI1BC,EAAAA,aAAa,EAAE,eAJW;AAIMC,EAAAA,gBAAgB,EAAE,kBAJxB;AAK1BC,EAAAA,QAAQ,EAAE,UALgB;AAKJC,EAAAA,OAAO,EAAE,SALL;AAM1BC,EAAAA,aAAa,EAAE,eANW;AAO1BC,EAAAA,mBAAmB,EAAE,qBAPK;AAOkBC,EAAAA,WAAW,EAAE,aAP/B;AAQ1BC,EAAAA,gBAAgB,EAAE,kBARQ;AAS1BC,EAAAA,iBAAiB,EAAE,mBATO;AAU1BC,EAAAA,iBAAiB,EAAE,mBAVO;AAW1BC,EAAAA,cAAc,EAAE,gBAXU;AAWQC,EAAAA,OAAO,EAAE,SAXjB;AAY1BC,EAAAA,OAAO,EAAE,SAZiB;AAYNC,EAAAA,OAAO,EAAE,SAZH;AAa1BC,EAAAA,OAAO,EAAE,SAbiB;AAaNC,EAAAA,OAAO,EAAE,SAbH;AAc1BC,EAAAA,cAAc,EAAE,gBAdU;AAcQC,EAAAA,OAAO,EAAE,SAdjB;AAe1BC,EAAAA,OAAO,EAAE,SAfiB;AAeNC,EAAAA,WAAW,EAAE,aAfP;AAgB1BC,EAAAA,YAAY,EAAE,cAhBY;AAgBIC,EAAAA,QAAQ,EAAE,UAhBd;AAiB1BC,EAAAA,YAAY,EAAE,cAjBY;AAiBIC,EAAAA,kBAAkB,EAAE,oBAjBxB;AAkB1BC,EAAAA,WAAW,EAAE,aAlBa;AAkBEC,EAAAA,MAAM,EAAE,QAlBV;AAmB1BC,EAAAA,YAAY,EAAE,cAnBY;AAmBIC,EAAAA,aAAa,EAAE,eAnBnB;AAoB1BjF,EAAAA,QAAQ,EAAE,UApBgB;AAoBJkF,EAAAA,cAAc,EAAE,gBApBZ;AAqB1BC,EAAAA,cAAc,EAAE,gBArBU;AAqBQC,EAAAA,QAAQ,EAAE;AArBlB,CAA5B,C,CAyBA;AACA;AACA;;AACA,IAAIC,0BAA0B,GAAG;AAC/BjI,EAAAA,SAAS,EAAE,IADoB;AAE/B,QAAK,MAF0B;AAElB,QAAK,MAFa;AAEL,QAAK,MAFA;AAEQ,QAAK,MAFb;AAEqB,QAAK,MAF1B;AAG/B,QAAK,MAH0B;AAGlB,QAAK,MAHa;AAGL,QAAK,MAHA;AAGQ,QAAK,MAHb;AAGqB,QAAK,MAH1B;AAI/B,QAAK,MAJ0B;AAIlB,QAAK,MAJa;AAIL,QAAK,MAJA;AAIQ,QAAK,MAJb;AAIqB,QAAK,MAJ1B;AAK/B,QAAK,MAL0B;AAKlB,QAAK,MALa;AAKL,QAAK,MALA;AAKQ,QAAK,MALb;AAKqB,QAAK,MAL1B;AAM/B,QAAK,MAN0B;AAMlB,QAAK,MANa;AAML,QAAK,MANA;AAMQ,QAAK,MANb;AAMqB,QAAK,MAN1B;AAO/B,QAAK,MAP0B;AAOlB,QAAK,MAPa;AAOL,QAAK;AAPA,CAAjC;AAUA;AACA;AACA;;AACA,IAAIkI,aAAa,GAAG;AAClBlI,EAAAA,SAAS,EAAE,IADO;AAElB,WAAQ,IAFU;AAEJ,YAAS,IAFL;AAGlB,SAAM,IAHY;AAGN,UAAO,IAHD;AAIlB,YAAS,IAJS;AAIH,aAAU,IAJP;AAKlB,aAAU,KALQ;AAKD,WAAQ,IALP;AAMlB,YAAS,IANS;AAMH,UAAO,KANJ;AAOlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAPW;AAOM,YAAS,IAPf;AAQlB,aAAU,IARQ;AAQF,YAAS,KARP;AASlB,YAAS,KATS;AASF,UAAO,MATL;AAUlB,YAAS,KAVS;AAUF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAVN;AAWlB,oBAAiB,MAXC;AAWO,WAAQ,IAXf;AAYlB,YAAS,IAZS;AAYH,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAZL;AAalB,aAAU,MAbQ;AAaA,YAAS,IAbT;AAclB,aAAU,IAdQ;AAcF,UAAO,IAdL;AAelB,WAAQ,IAfU;AAeJ,gBAAa,MAfT;AAgBlB,WAAQ,MAhBU;AAgBF,aAAU,MAhBR;AAiBlB,UAAO,KAjBW;AAiBJ,cAAW,MAjBP;AAkBlB,iBAAc,MAlBI;AAkBI,WAAQ,KAlBZ;AAmBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAnBW;AAmBM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAnBd;AAoBlB,YAAS,KApBS;AAoBF,WAAQ,MApBN;AAqBlB,aAAU,MArBQ;AAqBA,WAAQ,KArBR;AAsBlB,UAAO,IAtBW;AAsBL,WAAQ,IAtBH;AAuBlB,aAAU,KAvBQ;AAuBD,UAAO,MAvBN;AAwBlB,2BAAwB,MAxBN;AAwBc,cAAW,MAxBzB;AAyBlB,aAAU,KAzBQ;AAyBD,YAAS,IAzBR;AA0BlB,aAAU,IA1BQ;AA0BF,YAAS,KA1BP;AA2BlB,cAAW,MA3BO;AA2BC,WAAQ,KA3BT;AA4BlB,cAAW,IA5BO;AA4BD,gBAAa,IA5BZ;AA6BlB,UAAO,MA7BW;AA6BH,UAAO,KA7BJ;AA8BlB,gBAAa,MA9BK;AA8BG,kBAAe,MA9BlB;AA+BlB,iBAAc,MA/BI;AA+BI,kBAAe,MA/BnB;AAgClB,+BAA4B,MAhCV;AAgCkB,4BAAyB,MAhC3C;AAiClB,sBAAmB,MAjCD;AAiCS,YAAS,MAjClB;AAkClB,aAAU,MAlCQ;AAkCA,gBAAa,MAlCb;AAmClB,aAAU,MAnCQ;AAmCA,sBAAmB,MAnCnB;AAoClB,WAAQ,MApCU;AAoCF,gBAAa,MApCX;AAqClB,sCAAmC,MArCjB;AAqCyB,YAAS,MArClC;AAsClB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAtCU;AAsCO,UAAO,MAtCd;AAuClB,aAAU,MAvCQ;AAuCA,SAAM,MAvCN;AAwClB,eAAY,MAxCM;AAwCE,WAAQ,KAxCV;AAyClB,WAAQ,KAzCU;AAyCH,WAAQ,KAzCL;AA0ClB,aAAU,MA1CQ;AA0CA,WAAQ,MA1CR;AA2ClB,YAAS,MA3CS;AA2CD,aAAU,KA3CT;AA4ClB,UAAO,KA5CW;AA4CJ,UAAO,MA5CH;AA6ClB,YAAS,KA7CS;AA6CF,UAAO,CAAC,MAAD,EAAQ,MAAR,CA7CL;AA8ClB,uBAAoB,IA9CF;AA8CQ,qBAAkB,KA9C1B;AA+ClB,6BAA0B,KA/CR;AA+Ce,uBAAoB,IA/CnC;AAgDlB,uBAAoB,KAhDF;AAgDS,cAAW,MAhDpB;AAiDlB,oBAAiB,MAjDC;AAiDO,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjDf;AAkDlB,UAAO,IAlDW;AAkDL,aAAU,MAlDL;AAmDlB,eAAY,MAnDM;AAmDE,4BAAyB,MAnD3B;AAoDlB,gBAAa,IApDK;AAoDC,sBAAmB,MApDpB;AAqDlB,sBAAmB,MArDD;AAqDS,2BAAwB,MArDjC;AAsDlB,oBAAiB,MAtDC;AAsDO,0BAAuB,MAtD9B;AAuDlB,+BAA4B,MAvDV;AAuDkB,2BAAwB,MAvD1C;AAwDlB,uBAAoB,MAxDF;AAwDU,qBAAkB,MAxD5B;AAyDlB,oBAAiB,MAzDC;AAyDO,wBAAqB,MAzD5B;AA0DlB,wBAAqB,MA1DH;AA0DW,gBAAa,MA1DxB;AA2DlB,mBAAgB,MA3DE;AA2DM,uBAAoB,MA3D1B;AA4DlB,gBAAa,KA5DK;AA4DE,0BAAuB,MA5DzB;AA6DlB,wBAAqB,MA7DH;AA6DW,qBAAkB,MA7D7B;AA8DlB,wBAAqB,MA9DH;AA8DW,yBAAsB,MA9DjC;AA+DlB,sBAAmB,MA/DD;AA+DS,yBAAsB,MA/D/B;AAgElB,cAAW,MAhEO;AAgEC,mBAAgB,MAhEjB;AAiElB,gBAAa,MAjEK;AAiEG,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjEX;AAkElB,aAAU,KAlEQ;AAkED,UAAO,KAlEN;AAmElB,SAAM,IAnEY;AAmEN,UAAO,IAnED;AAoElB,YAAS,IApES;AAoEH,aAAU,IApEP;AAqElB,aAAU,KArEQ;AAqED,WAAQ,IArEP;AAsElB,YAAS,IAtES;AAsEH,UAAO,KAtEJ;AAuElB,WAAQ,KAvEU;AAuEH,UAAO,CAAC,MAAD,EAAQ,MAAR,CAvEJ;AAwElB,YAAS,IAxES;AAwEH,aAAU,IAxEP;AAyElB,cAAW,MAzEO;AAyEC,YAAS,KAzEV;AA0ElB,uBAAoB,MA1EF;AA0EU,2BAAwB,MA1ElC;AA2ElB,YAAS,KA3ES;AA2EF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3EN;AA4ElB,cAAW,KA5EO;AA4EA,YAAS,MA5ET;AA6ElB,iBAAc,MA7EI;AA6EI,kBAAe,MA7EnB;AA8ElB,WAAQ,MA9EU;AA8EF,WAAQ,MA9EN;AA+ElB,UAAO,KA/EW;AA+EJ,UAAO,IA/EH;AAgFlB,WAAQ,IAhFU;AAgFJ,aAAU,MAhFN;AAiFlB,mBAAgB,MAjFE;AAiFM,UAAO,KAjFb;AAkFlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAlFW;AAkFM,wBAAqB,MAlF3B;AAmFlB,4BAAyB,MAnFP;AAmFe,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAnFvB;AAoFlB,aAAU,MApFQ;AAoFA,iBAAc,MApFd;AAqFlB,WAAQ,MArFU;AAqFF,WAAQ,KArFN;AAsFlB,QAAK,IAtFa;AAsFP,SAAM,IAtFC;AAuFlB,YAAS,KAvFS;AAuFF,aAAU,KAvFR;AAwFlB,aAAU,KAxFQ;AAwFD,aAAU,KAxFT;AAyFlB,YAAS,KAzFS;AAyFF,UAAO,KAzFL;AA0FlB,WAAQ,KA1FU;AA0FH,UAAO,CAAC,MAAD,EAAQ,MAAR,CA1FJ;AA2FlB,SAAM,MA3FY;AA2FJ,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3FJ;AA4FlB,mBAAgB,MA5FE;AA4FM,uBAAoB,MA5F1B;AA6FlB,uBAAoB,MA7FF;AA6FU,qBAAkB,MA7F5B;AA8FlB,kBAAe,MA9FG;AA8FK,wBAAqB,MA9F1B;AA+FlB,mBAAgB,MA/FE;AA+FM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA/Fd;AAgGlB,SAAM,MAhGY;AAgGJ,aAAU,KAhGN;AAiGlB,YAAS,KAjGS;AAiGF,UAAO,IAjGL;AAkGlB,YAAS,KAlGS;AAkGF,UAAO,MAlGL;AAmGlB,mBAAgB,MAnGE;AAmGM,WAAQ,MAnGd;AAoGlB,qBAAkB,MApGA;AAoGQ,WAAQ,MApGhB;AAqGlB,aAAU,KArGQ;AAqGD,mBAAgB,MArGf;AAsGlB,gBAAa,MAtGK;AAsGG,WAAQ,KAtGX;AAuGlB,YAAS,KAvGS;AAuGF,WAAQ,KAvGN;AAwGlB,YAAS,IAxGS;AAwGH,aAAU,IAxGP;AAyGlB,WAAQ,IAzGU;AAyGJ,YAAS,IAzGL;AA0GlB,UAAO,KA1GW;AA0GJ,WAAQ,KA1GJ;AA2GlB,UAAO,MA3GW;AA2GH,YAAS,IA3GN;AA4GlB,aAAU,IA5GQ;AA4GF,SAAM,MA5GJ;AA6GlB,YAAS,KA7GS;AA6GF,iBAAc,MA7GZ;AA8GlB,cAAW,MA9GO;AA8GC,UAAO,MA9GR;AA+GlB,eAAY,MA/GM;AA+GE,mBAAgB,MA/GlB;AAgHlB,qBAAkB,MAhHA;AAgHQ,qBAAkB,MAhH1B;AAiHlB,YAAS,KAjHS;AAiHF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjHN;AAkHlB,WAAQ,KAlHU;AAkHH,WAAQ,MAlHL;AAmHlB,aAAU,KAnHQ;AAmHD,YAAS,KAnHR;AAoHlB,UAAO,IApHW;AAoHL,WAAQ,IApHH;AAqHlB,YAAS,KArHS;AAqHF,UAAO,KArHL;AAsHlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAtHW;AAsHM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAtHd;AAuHlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAvHU;AAuHO,aAAU,KAvHjB;AAwHlB,YAAS,KAxHS;AAwHF,WAAQ,KAxHN;AAyHlB,WAAQ,KAzHU;AAyHH,YAAS,KAzHN;AA0HlB,aAAU,KA1HQ;AA0HD,UAAO,KA1HN;AA2HlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA3HW;AA2HM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3Hd;AA4HlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA5HU;AA4HO,WAAQ,KA5Hf;AA6HlB,QAAK,IA7Ha;AA6HP,SAAM,IA7HC;AA8HlB,aAAU,KA9HQ;AA8HD,aAAU,KA9HT;AA+HlB,WAAQ,MA/HU;AA+HF,iBAAc,MA/HZ;AAgIlB,WAAQ,MAhIU;AAgIF,aAAU,KAhIR;AAiIlB,aAAU,KAjIQ;AAiID,UAAO,KAjIN;AAkIlB,uBAAoB,MAlIF;AAkIU,gBAAa,MAlIvB;AAmIlB,mBAAgB,MAnIE;AAmIM,0BAAuB,MAnI7B;AAoIlB,kBAAe,MApIG;AAoIK,wBAAqB,MApI1B;AAqIlB,wBAAqB,MArIH;AAqIW,qBAAkB,MArI7B;AAsIlB,wBAAqB,MAtIH;AAsIW,gBAAa,MAtIxB;AAuIlB,qBAAkB,MAvIA;AAuIQ,sBAAmB,MAvI3B;AAwIlB,cAAW,MAxIO;AAwIC,mBAAgB,MAxIjB;AAyIlB,oBAAiB,MAzIC;AAyIO,mBAAgB,MAzIvB;AA0IlB,sBAAmB,MA1ID;AA0IS,wBAAqB,MA1I9B;AA2IlB,uBAAoB,MA3IF;AA2IU,sBAAmB,MA3I7B;AA4IlB,mBAAgB,MA5IE;AA4IM,sBAAmB,MA5IzB;AA6IlB,iBAAc,MA7II;AA6II,oBAAiB,MA7IrB;AA8IlB,gBAAa,MA9IK;AA8IG,qBAAkB,MA9IrB;AA+IlB,uBAAoB,MA/IF;AA+IU,oBAAiB,MA/I3B;AAgJlB,kBAAe,MAhJG;AAgJK,eAAY,MAhJjB;AAiJlB,qBAAkB,MAjJA;AAiJQ,gBAAa,MAjJrB;AAkJlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAlJW;AAkJM,SAAM,MAlJZ;AAmJlB,iBAAc,MAnJI;AAmJI,aAAU,KAnJd;AAoJlB,oBAAiB,MApJC;AAoJO,yBAAsB,MApJ7B;AAqJlB,qBAAkB,MArJA;AAqJQ,oBAAiB,MArJzB;AAsJlB,yBAAsB,MAtJJ;AAsJY,qBAAkB,MAtJ9B;AAuJlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAvJU;AAuJO,qBAAkB,MAvJzB;AAwJlB,sBAAmB,MAxJD;AAwJS,WAAQ,MAxJjB;AAyJlB,UAAO,MAzJW;AAyJH,aAAU,KAzJP;AA0JlB,SAAM,MA1JY;AA0JJ,UAAO,MA1JH;AA2JlB,UAAO,KA3JW;AA2JJ,kBAAe,MA3JX;AA4JlB,gBAAa,MA5JK;AA4JG,UAAO,CAAC,MAAD,EAAQ,MAAR,CA5JV;AA6JlB,gBAAa,MA7JK;AA6JG,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7JX;AA8JlB,WAAQ,MA9JU;AA8JF,SAAM,KA9JJ;AA+JlB,WAAQ,KA/JU;AA+JH,aAAU,KA/JP;AAgKlB,aAAU,KAhKQ;AAgKD,aAAU,KAhKT;AAiKlB,UAAO,KAjKW;AAiKJ,0BAAuB,MAjKnB;AAkKlB,yBAAsB,MAlKJ;AAkKY,wBAAqB,MAlKjC;AAmKlB,4BAAyB,MAnKP;AAmKe,2BAAwB,MAnKvC;AAoKlB,qBAAkB,MApKA;AAoKQ,cAAW,GApKnB;AAqKlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CArKW;AAqKM,cAAW,MArKjB;AAsKlB,uBAAoB,IAtKF;AAsKQ,WAAQ,MAtKhB;AAuKlB,UAAO,MAvKW;AAuKH,mBAAgB,MAvKb;AAwKlB,gBAAa,MAxKK;AAwKG,2BAAwB,MAxK3B;AAyKlB,iBAAc,MAzKI;AAyKI,eAAY,MAzKhB;AA0KlB,oBAAiB,CAAC,MAAD,EAAQ,KAAR,CA1KC;AA0Ke,gBAAa,MA1K5B;AA2KlB,iBAAc,MA3KI;AA2KI,sBAAmB,MA3KvB;AA4KlB,0BAAuB,CAAC,MAAD,EAAQ,KAAR,CA5KL;AA4KqB,wBAAqB,CAAC,MAAD,EAAQ,KAAR,CA5K1C;AA6KlB,qBAAkB,MA7KA;AA6KQ,2BAAwB,CAAC,MAAD,EAAQ,KAAR,CA7KhC;AA8KlB,sBAAmB,MA9KD;AA8KS,sBAAmB,CAAC,MAAD,EAAQ,KAAR,CA9K5B;AA+KlB,mBAAgB,CAAC,MAAD,EAAQ,KAAR,CA/KE;AA+Kc,sBAAmB,MA/KjC;AAgLlB,yBAAsB,CAAC,MAAD,EAAQ,KAAR,CAhLJ;AAgLoB,2BAAwB,MAhL5C;AAiLlB,cAAW,MAjLO;AAiLC,mBAAgB,MAjLjB;AAkLlB,qBAAkB,MAlLA;AAkLQ,kBAAe,CAAC,MAAD,EAAQ,KAAR,CAlLvB;AAmLlB,wBAAqB,CAAC,MAAD,EAAQ,KAAR,CAnLH;AAmLmB,mBAAgB,MAnLnC;AAoLlB,8BAA2B,CAAC,MAAD,EAAQ,KAAR,CApLT;AAoLyB,wBAAqB,CAAC,MAAD,EAAQ,KAAR,CApL9C;AAqLlB,kBAAe,MArLG;AAqLK,uBAAoB,CAAC,MAAD,EAAQ,KAAR,CArLzB;AAsLlB,4BAAyB,MAtLP;AAsLe,wBAAqB,MAtLpC;AAuLlB,uBAAoB,MAvLF;AAuLU,0BAAuB,CAAC,MAAD,EAAQ,KAAR,CAvLjC;AAwLlB,4BAAyB,MAxLP;AAwLe,sBAAmB,CAAC,MAAD,EAAQ,KAAR,CAxLlC;AAyLlB,2BAAwB,MAzLN;AAyLc,wBAAqB,CAAC,MAAD,EAAQ,KAAR,CAzLnC;AA0LlB,6BAA0B,MA1LR;AA0LgB,gBAAa,CAAC,MAAD,EAAQ,MAAR,CA1L7B;AA2LlB,qBAAkB,MA3LA;AA2LQ,kBAAe,MA3LvB;AA4LlB,uBAAoB,CAAC,MAAD,EAAQ,KAAR,CA5LF;AA4LkB,4BAAyB,MA5L3C;AA6LlB,uBAAoB,CAAC,MAAD,EAAQ,KAAR,CA7LF;AA6LkB,kBAAe,CAAC,MAAD,EAAQ,MAAR,CA7LjC;AA8LlB,uBAAoB,MA9LF;AA8LU,eAAY,MA9LtB;AA+LlB,oBAAiB,MA/LC;AA+LO,wBAAqB,MA/L5B;AAgMlB,oBAAiB,MAhMC;AAgMO,qBAAkB,MAhMzB;AAiMlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjMU;AAiMO,YAAS,IAjMhB;AAkMlB,aAAU,IAlMQ;AAkMF,SAAM,KAlMJ;AAmMlB,YAAS,KAnMS;AAmMF,YAAS,IAnMP;AAoMlB,aAAU,IApMQ;AAoMF,WAAQ,IApMN;AAqMlB,YAAS,IArMS;AAqMH,UAAO,KArMJ;AAsMlB,aAAU,KAtMQ;AAsMD,UAAO,CAAC,MAAD,EAAQ,MAAR,CAtMN;AAuMlB,YAAS,IAvMS;AAuMH,aAAU,IAvMP;AAwMlB,YAAS,KAxMS;AAwMF,YAAS,KAxMP;AAyMlB,cAAW,KAzMO;AAyMA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAzMR;AA0MlB,2BAAwB,MA1MN;AA0Mc,qBAAkB,MA1MhC;AA2MlB,SAAM,MA3MY;AA2MJ,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3MJ;AA4MlB,YAAS,IA5MS;AA4MH,aAAU,IA5MP;AA6MlB,YAAS,IA7MS;AA6MH,aAAU,IA7MP;AA8MlB,aAAU,MA9MQ;AA8MA,UAAO,IA9MP;AA+MlB,WAAQ,IA/MU;AA+MJ,cAAW,MA/MP;AAgNlB,gBAAa,MAhNK;AAgNG,kBAAe,MAhNlB;AAiNlB,sBAAmB,MAjND;AAiNS,eAAY,MAjNrB;AAkNlB,UAAO,KAlNW;AAkNJ,UAAO,CAAC,MAAD,EAAQ,MAAR,CAlNH;AAmNlB,UAAO,KAnNW;AAmNJ,SAAM,KAnNF;AAoNlB,gBAAa,IApNK;AAoNC,oBAAiB,MApNlB;AAqNlB,WAAQ,MArNU;AAqNF,SAAM,MArNJ;AAsNlB,eAAY,MAtNM;AAsNE,oBAAiB,MAtNnB;AAuNlB,yBAAsB,MAvNJ;AAuNY,oBAAiB,MAvN7B;AAwNlB,YAAS,MAxNS;AAwND,cAAW,MAxNV;AAyNlB,iBAAc,MAzNI;AAyNI,mBAAgB,MAzNpB;AA0NlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA1NU;AA0NO,UAAO,KA1Nd;AA2NlB,UAAO,IA3NW;AA2NL,WAAQ,IA3NH;AA4NlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA5NW;AA4NM,WAAQ,MA5Nd;AA6NlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7NU;AA6NO,YAAS,MA7NhB;AA8NlB,SAAM,IA9NY;AA8NN,UAAO,IA9ND;AA+NlB,aAAU,KA/NQ;AA+ND,WAAQ,MA/NP;AAgOlB,WAAQ,MAhOU;AAgOF,aAAU,MAhOR;AAiOlB,aAAU,KAjOQ;AAiOD,aAAU,KAjOT;AAkOlB,UAAO,KAlOW;AAkOJ,SAAM,MAlOF;AAmOlB,qBAAkB,MAnOA;AAmOQ,yBAAsB,MAnO9B;AAoOlB,2BAAwB,MApON;AAoOc,UAAO,MApOrB;AAqOlB,UAAO,KArOW;AAqOJ,wBAAqB,MArOjB;AAsOlB,iBAAc,MAtOI;AAsOI,oBAAiB,MAtOrB;AAuOlB,0BAAuB,MAvOL;AAuOa,mBAAgB,MAvO7B;AAwOlB,yBAAsB,MAxOJ;AAwOY,yBAAsB,MAxOlC;AAyOlB,sBAAmB,MAzOD;AAyOS,yBAAsB,MAzO/B;AA0OlB,iBAAc,MA1OI;AA0OI,eAAY,MA1OhB;AA2OlB,oBAAiB,MA3OC;AA2OO,qBAAkB,MA3OzB;AA4OlB,oBAAiB,MA5OC;AA4OO,uBAAoB,MA5O3B;AA6OlB,yBAAsB,MA7OJ;AA6OY,wBAAqB,MA7OjC;AA8OlB,uBAAoB,MA9OF;AA8OU,oBAAiB,MA9O3B;AA+OlB,uBAAoB,MA/OF;AA+OU,kBAAe,MA/OzB;AAgPlB,qBAAkB,MAhPA;AAgPQ,iBAAc,MAhPtB;AAiPlB,WAAQ,MAjPU;AAiPF,mBAAgB,MAjPd;AAkPlB,kBAAe,MAlPG;AAkPK,WAAQ,MAlPb;AAmPlB,UAAO,MAnPW;AAmPH,kBAAe,MAnPZ;AAoPlB,aAAU,KApPQ;AAoPD,WAAQ,KApPP;AAqPlB,aAAU,KArPQ;AAqPD,aAAU,KArPT;AAsPlB,SAAM,MAtPY;AAsPJ,aAAU,KAtPN;AAuPlB,aAAU,KAvPQ;AAuPD,YAAS,KAvPR;AAwPlB,UAAO,KAxPW;AAwPJ,UAAO,CAAC,MAAD,EAAQ,MAAR,CAxPH;AAyPlB,qBAAkB,MAzPA;AAyPQ,qBAAkB,MAzP1B;AA0PlB,sBAAmB,MA1PD;AA0PS,mBAAgB,MA1PzB;AA2PlB,YAAS,KA3PS;AA2PF,kBAAe,MA3Pb;AA4PlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA5PU;AA4PO,WAAQ,MA5Pf;AA6PlB,aAAU,MA7PQ;AA6PA,yBAAsB,MA7PtB;AA8PlB,mBAAgB,MA9PE;AA8PM,wBAAqB,MA9P3B;AA+PlB,qBAAkB,MA/PA;AA+PQ,0BAAuB,MA/P/B;AAgQlB,kBAAe,MAhQG;AAgQK,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAhQb;AAiQlB,WAAQ,MAjQU;AAiQF,UAAO,MAjQL;AAkQlB,aAAU,MAlQQ;AAkQA,kBAAe,MAlQf;AAmQlB,eAAY,MAnQM;AAmQE,oBAAiB,MAnQnB;AAoQlB,yBAAsB,MApQJ;AAoQY,oBAAiB,MApQ7B;AAqQlB,eAAY,MArQM;AAqQE,UAAO,MArQT;AAsQlB,UAAO,MAtQW;AAsQH,eAAY,MAtQT;AAuQlB,oBAAiB,MAvQC;AAuQO,aAAU,MAvQjB;AAwQlB,WAAQ,IAxQU;AAwQJ,YAAS,IAxQL;AAyQlB,YAAS,MAzQS;AAyQD,YAAS,KAzQR;AA0QlB,WAAQ,KA1QU;AA0QH,UAAO,GA1QJ;AA2QlB,UAAO,KA3QW;AA2QJ,aAAU,KA3QN;AA4QlB,aAAU,KA5QQ;AA4QD,UAAO,KA5QN;AA6QlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA7QW;AA6QM,gBAAa,MA7QnB;AA8QlB,YAAS,KA9QS;AA8QF,iBAAc,CAAC,MAAD,EAAQ,MAAR,CA9QZ;AA+QlB,gBAAa,MA/QK;AA+QG,YAAS,MA/QZ;AAgRlB,iBAAc,MAhRI;AAgRI,qBAAkB,MAhRtB;AAiRlB,iBAAc,MAjRI;AAiRI,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjRZ;AAkRlB,gBAAa,MAlRK;AAkRG,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAlRX;AAmRlB,aAAU,KAnRQ;AAmRD,YAAS,IAnRR;AAoRlB,aAAU,IApRQ;AAoRF,WAAQ,MApRN;AAqRlB,eAAY,MArRM;AAqRE,YAAS,KArRX;AAsRlB,aAAU,KAtRQ;AAsRD,WAAQ,IAtRP;AAuRlB,YAAS,IAvRS;AAuRH,UAAO,KAvRJ;AAwRlB,aAAU,KAxRQ;AAwRD,UAAO,CAAC,MAAD,EAAQ,MAAR,CAxRN;AAyRlB,YAAS,IAzRS;AAyRH,aAAU,IAzRP;AA0RlB,YAAS,KA1RS;AA0RF,eAAY,IA1RV;AA2RlB,iBAAc,MA3RI;AA2RI,mBAAgB,MA3RpB;AA4RlB,uBAAoB,MA5RF;AA4RU,YAAS,MA5RnB;AA6RlB,gBAAa,MA7RK;AA6RG,YAAS,KA7RZ;AA8RlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA9RU;AA8RO,cAAW,MA9RlB;AA+RlB,iBAAc,MA/RI;AA+RI,uBAAoB,MA/RxB;AAgSlB,kBAAe,MAhSG;AAgSK,oBAAiB,MAhStB;AAiSlB,YAAS,MAjSS;AAiSD,iBAAc,MAjSb;AAkSlB,cAAW,MAlSO;AAkSC,kBAAe,MAlShB;AAmSlB,qBAAkB,MAnSA;AAmSQ,sBAAmB,MAnS3B;AAoSlB,WAAQ,KApSU;AAoSH,cAAW,KApSR;AAqSlB,YAAS,KArSS;AAqSF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CArSN;AAsSlB,aAAU,KAtSQ;AAsSD,UAAO,IAtSN;AAuSlB,WAAQ,IAvSU;AAuSJ,YAAS,MAvSL;AAwSlB,WAAQ,MAxSU;AAwSF,UAAO,KAxSL;AAySlB,YAAS,MAzSS;AAySD,aAAU,MAzST;AA0SlB,UAAO,MA1SW;AA0SH,aAAU,MA1SP;AA2SlB,WAAQ,MA3SU;AA2SF,kBAAe,MA3Sb;AA4SlB,mBAAgB,IA5SE;AA4SI,wBAAqB,MA5SzB;AA6SlB,oBAAiB,MA7SC;AA6SO,oBAAiB,MA7SxB;AA8SlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA9SW;AA8SM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA9Sd;AA+SlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA/SU;AA+SO,aAAU,MA/SjB;AAgTlB,YAAS,KAhTS;AAgTF,YAAS,MAhTP;AAiTlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAjTW;AAiTM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjTd;AAkTlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAlTU;AAkTO,UAAO,CAAC,MAAD,EAAQ,MAAR,CAlTd;AAmTlB,SAAM,KAnTY;AAmTL,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAnTH;AAoTlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CApTU;AAoTO,WAAQ,KApTf;AAqTlB,WAAQ,KArTU;AAqTH,WAAQ,KArTL;AAsTlB,YAAS,IAtTS;AAsTH,aAAU,IAtTP;AAuTlB,YAAS,KAvTS;AAuTF,UAAO,KAvTL;AAwTlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAxTW;AAwTM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAxTd;AAyTlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAzTU;AAyTO,WAAQ,KAzTf;AA0TlB,WAAQ,KA1TU;AA0TH,aAAU,KA1TP;AA2TlB,aAAU,KA3TQ;AA2TD,UAAO,KA3TN;AA4TlB,WAAQ,KA5TU;AA4TH,qBAAkB,MA5Tf;AA6TlB,WAAQ,KA7TU;AA6TH,UAAO,MA7TJ;AA8TlB,WAAQ,MA9TU;AA8TF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA9TN;AA+TlB,YAAS,IA/TS;AA+TH,aAAU,IA/TP;AAgUlB,aAAU,KAhUQ;AAgUD,SAAM,MAhUL;AAiUlB,UAAO,CAAC,MAAD,EAAQ,KAAR,CAjUW;AAiUK,UAAO,MAjUZ;AAkUlB,WAAQ,IAlUU;AAkUJ,YAAS,IAlUL;AAmUlB,WAAQ,IAnUU;AAmUJ,YAAS,IAnUL;AAoUlB,UAAO,KApUW;AAoUJ,WAAQ,IApUJ;AAqUlB,YAAS,IArUS;AAqUH,SAAM,MArUH;AAsUlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAtUW;AAsUM,YAAS,IAtUf;AAuUlB,aAAU,IAvUQ;AAuUF,cAAW,MAvUT;AAwUlB,YAAS,MAxUS;AAwUD,YAAS,KAxUR;AAyUlB,YAAS,KAzUS;AAyUF,YAAS,MAzUP;AA0UlB,SAAM,IA1UY;AA0UN,UAAO,IA1UD;AA2UlB,UAAO,MA3UW;AA2UH,aAAU,MA3UP;AA4UlB,WAAQ,MA5UU;AA4UF,eAAY,MA5UV;AA6UlB,WAAQ,MA7UU;AA6UF,UAAO,MA7UL;AA8UlB,WAAQ,MA9UU;AA8UF,YAAS,MA9UP;AA+UlB,aAAU,MA/UQ;AA+UA,eAAY,MA/UZ;AAgVlB,eAAY,MAhVM;AAgVE,eAAY,MAhVd;AAiVlB,eAAY,MAjVM;AAiVE,eAAY,MAjVd;AAkVlB,eAAY,MAlVM;AAkVE,eAAY,MAlVd;AAmVlB,eAAY,MAnVM;AAmVE,YAAS,MAnVX;AAoVlB,cAAW,MApVO;AAoVC,eAAY,MApVb;AAqVlB,aAAU,MArVQ;AAqVA,YAAS,IArVT;AAsVlB,cAAW,MAtVO;AAsVC,YAAS,KAtVV;AAuVlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAvVU;AAuVO,SAAM,MAvVb;AAwVlB,UAAO,MAxVW;AAwVH,aAAU,MAxVP;AAyVlB,UAAO,MAzVW;AAyVH,WAAQ,MAzVL;AA0VlB,WAAQ,IA1VU;AA0VJ,aAAU,MA1VN;AA2VlB,eAAY,MA3VM;AA2VE,WAAQ,IA3VV;AA4VlB,YAAS,IA5VS;AA4VH,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA5VL;AA6VlB,UAAO,IA7VW;AA6VL,YAAS,MA7VJ;AA8VlB,cAAW,MA9VO;AA8VC,YAAS,IA9VV;AA+VlB,aAAU,IA/VQ;AA+VF,UAAO,IA/VL;AAgWlB,WAAQ,IAhWU;AAgWJ,eAAY,MAhWR;AAiWlB,YAAS,MAjWS;AAiWD,WAAQ,MAjWP;AAkWlB,eAAY,MAlWM;AAkWE,kBAAe,KAlWjB;AAmWlB,gBAAa,MAnWK;AAmWG,cAAW,MAnWd;AAoWlB,gBAAa,MApWK;AAoWG,aAAU,MApWb;AAqWlB,aAAU,MArWQ;AAqWA,eAAY,MArWZ;AAsWlB,WAAQ,MAtWU;AAsWF,eAAY,MAtWV;AAuWlB,YAAS,MAvWS;AAuWD,UAAO,KAvWN;AAwWlB,YAAS,MAxWS;AAwWD,aAAU,MAxWT;AAyWlB,cAAW,MAzWO;AAyWC,cAAW,MAzWZ;AA0WlB,YAAS,KA1WS;AA0WF,aAAU,MA1WR;AA2WlB,WAAQ,KA3WU;AA2WH,WAAQ,MA3WL;AA4WlB,cAAW,MA5WO;AA4WC,UAAO,CAAC,MAAD,EAAQ,MAAR,CA5WR;AA6WlB,aAAU,MA7WQ;AA6WA,cAAW,MA7WX;AA8WlB,aAAU,MA9WQ;AA8WA,cAAW,MA9WX;AA+WlB,eAAY,MA/WM;AA+WE,gBAAa,MA/Wf;AAgXlB,eAAY,MAhXM;AAgXE,cAAW,MAhXb;AAiXlB,sBAAmB,MAjXD;AAiXS,oBAAiB,MAjX1B;AAkXlB,eAAY,MAlXM;AAkXE,aAAU,MAlXZ;AAmXlB,eAAY,MAnXM;AAmXE,aAAU,MAnXZ;AAoXlB,mBAAgB,MApXE;AAoXM,kBAAe,MApXrB;AAqXlB,oBAAiB,MArXC;AAqXO,wBAAqB,MArX5B;AAsXlB,wBAAqB,MAtXH;AAsXW,yBAAsB,MAtXjC;AAuXlB,YAAS,MAvXS;AAuXD,YAAS,MAvXR;AAwXlB,YAAS,MAxXS;AAwXD,YAAS,MAxXR;AAyXlB,YAAS,MAzXS;AAyXD,UAAO,CAAC,IAAD,EAAM,MAAN,CAzXN;AA0XlB,cAAW,CAAC,MAAD,EAAQ,MAAR,CA1XO;AA0XU,WAAQ,MA1XlB;AA2XlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3XU;AA2XO,UAAO,MA3Xd;AA4XlB,aAAU,MA5XQ;AA4XA,aAAU,MA5XV;AA6XlB,YAAS,MA7XS;AA6XD,YAAS,MA7XR;AA8XlB,YAAS,MA9XS;AA8XD,YAAS,MA9XR;AA+XlB,WAAQ,MA/XU;AA+XF,YAAS,MA/XP;AAgYlB,YAAS,MAhYS;AAgYD,YAAS,MAhYR;AAiYlB,YAAS,MAjYS;AAiYD,YAAS,MAjYR;AAkYlB,YAAS,MAlYS;AAkYD,YAAS,MAlYR;AAmYlB,YAAS,MAnYS;AAmYD,WAAQ,MAnYP;AAoYlB,YAAS,MApYS;AAoYD,YAAS,MApYR;AAqYlB,YAAS,MArYS;AAqYD,YAAS,MArYR;AAsYlB,YAAS,MAtYS;AAsYD,YAAS,MAtYR;AAuYlB,aAAU,MAvYQ;AAuYA,YAAS,MAvYT;AAwYlB,YAAS,MAxYS;AAwYD,YAAS,MAxYR;AAyYlB,YAAS,MAzYS;AAyYD,WAAQ,MAzYP;AA0YlB,YAAS,MA1YS;AA0YD,YAAS,MA1YR;AA2YlB,YAAS,MA3YS;AA2YD,YAAS,MA3YR;AA4YlB,eAAY,MA5YM;AA4YE,cAAW,MA5Yb;AA6YlB,eAAY,MA7YM;AA6YE,YAAS,MA7YX;AA8YlB,YAAS,MA9YS;AA8YD,YAAS,MA9YR;AA+YlB,YAAS,MA/YS;AA+YD,WAAQ,MA/YP;AAgZlB,YAAS,MAhZS;AAgZD,YAAS,MAhZR;AAiZlB,YAAS,MAjZS;AAiZD,YAAS,MAjZR;AAkZlB,YAAS,MAlZS;AAkZD,YAAS,MAlZR;AAmZlB,aAAU,MAnZQ;AAmZA,YAAS,KAnZT;AAoZlB,YAAS,IApZS;AAoZH,aAAU,IApZP;AAqZlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CArZU;AAqZO,YAAS,MArZhB;AAsZlB,WAAQ,MAtZU;AAsZF,YAAS,MAtZP;AAuZlB,WAAQ,IAvZU;AAuZJ,YAAS,MAvZL;AAwZlB,eAAY,MAxZM;AAwZE,WAAQ,MAxZV;AAyZlB,aAAU,MAzZQ;AAyZA,WAAQ,MAzZR;AA0ZlB,YAAS,MA1ZS;AA0ZD,YAAS,MA1ZR;AA2ZlB,aAAU,MA3ZQ;AA2ZA,aAAU,KA3ZV;AA4ZlB,UAAO,MA5ZW;AA4ZH,aAAU,MA5ZP;AA6ZlB,eAAY,MA7ZM;AA6ZE,aAAU,MA7ZZ;AA8ZlB,aAAU,MA9ZQ;AA8ZA,aAAU,MA9ZV;AA+ZlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA/ZU;AA+ZO,YAAS,MA/ZhB;AAgalB,YAAS,KAhaS;AAgaF,YAAS,MAhaP;AAialB,aAAU,KAjaQ;AAiaD,YAAS,IAjaR;AAkalB,aAAU,IAlaQ;AAkaF,YAAS,KAlaP;AAmalB,YAAS,MAnaS;AAmaD,cAAW,MAnaV;AAoalB,WAAQ,KApaU;AAoaH,WAAQ,IApaL;AAqalB,YAAS,IAraS;AAqaH,cAAW,MAraR;AAsalB,UAAO,IAtaW;AAsaL,WAAQ,IAtaH;AAualB,gBAAa,IAvaK;AAuaC,UAAO,CAAC,MAAD,EAAQ,MAAR,CAvaR;AAwalB,WAAQ,KAxaU;AAwaH,YAAS,MAxaN;AAyalB,gBAAa,MAzaK;AAyaG,UAAO,KAzaV;AA0alB,UAAO,MA1aW;AA0aH,WAAQ,MA1aL;AA2alB,WAAQ,KA3aU;AA2aH,aAAU,MA3aP;AA4alB,sBAAmB,MA5aD;AA4aS,uBAAoB,MA5a7B;AA6alB,eAAY,IA7aM;AA6aA,eAAY,MA7aZ;AA8alB,iBAAc,MA9aI;AA8aI,kBAAe,MA9anB;AA+alB,kBAAe,MA/aG;AA+aK,WAAQ,MA/ab;AAgblB,eAAY,MAhbM;AAgbE,aAAU,MAhbZ;AAiblB,cAAW,MAjbO;AAibC,YAAS,MAjbV;AAkblB,eAAY,MAlbM;AAkbE,YAAS,IAlbX;AAmblB,aAAU,MAnbQ;AAmbA,cAAW,MAnbX;AAoblB,YAAS,IApbS;AAobH,aAAU,IApbP;AAqblB,WAAQ,MArbU;AAqbF,aAAU,MArbR;AAsblB,iBAAc,MAtbI;AAsbI,gBAAa,MAtbjB;AAublB,WAAQ,MAvbU;AAubF,cAAW,MAvbT;AAwblB,aAAU,MAxbQ;AAwbA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAxbR;AAyblB,aAAU,MAzbQ;AAybA,UAAO,IAzbP;AA0blB,WAAQ,IA1bU;AA0bJ,aAAU,MA1bN;AA2blB,YAAS,MA3bS;AA2bD,YAAS,MA3bR;AA4blB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA5bU;AA4bO,WAAQ,MA5bf;AA6blB,YAAS,MA7bS;AA6bD,WAAQ,MA7bP;AA8blB,YAAS,MA9bS;AA8bD,YAAS,MA9bR;AA+blB,cAAW,MA/bO;AA+bC,cAAW,MA/bZ;AAgclB,YAAS,MAhcS;AAgcD,YAAS,MAhcR;AAiclB,aAAU,MAjcQ;AAicA,cAAW,MAjcX;AAkclB,UAAO,MAlcW;AAkcH,eAAY,MAlcT;AAmclB,aAAU,MAncQ;AAmcA,aAAU,MAncV;AAoclB,aAAU,MApcQ;AAocA,YAAS,MApcT;AAqclB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CArcU;AAqcO,aAAU,MArcjB;AAsclB,cAAW,MAtcO;AAscC,kBAAe,MAtchB;AAuclB,kBAAe,MAvcG;AAucK,eAAY,MAvcjB;AAwclB,iBAAc,MAxcI;AAwcI,YAAS,IAxcb;AAyclB,aAAU,IAzcQ;AAycF,qBAAkB,MAzchB;AA0clB,sBAAmB,MA1cD;AA0cS,YAAS,MA1clB;AA2clB,YAAS,MA3cS;AA2cD,eAAY,MA3cX;AA4clB,YAAS,MA5cS;AA4cD,aAAU,MA5cT;AA6clB,WAAQ,MA7cU;AA6cF,WAAQ,MA7cN;AA8clB,aAAU,MA9cQ;AA8cA,aAAU,MA9cV;AA+clB,WAAQ,MA/cU;AA+cF,WAAQ,MA/cN;AAgdlB,YAAS,MAhdS;AAgdD,cAAW,MAhdV;AAidlB,YAAS,KAjdS;AAidF,aAAU,KAjdR;AAkdlB,UAAO,KAldW;AAkdJ,SAAM,MAldF;AAmdlB,cAAW,MAndO;AAmdC,YAAS,MAndV;AAodlB,cAAW,MApdO;AAodC,SAAM,IApdP;AAqdlB,UAAO,IArdW;AAqdL,YAAS,KArdJ;AAsdlB,cAAW,MAtdO;AAsdC,aAAU,MAtdX;AAudlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAvdW;AAudM,YAAS,MAvdf;AAwdlB,YAAS,MAxdS;AAwdD,WAAQ,MAxdP;AAydlB,cAAW,MAzdO;AAydC,kBAAe,MAzdhB;AA0dlB,YAAS,MA1dS;AA0dD,UAAO,IA1dN;AA2dlB,cAAW,KA3dO;AA2dA,YAAS,MA3dT;AA4dlB,UAAO,IA5dW;AA4dL,YAAS,IA5dJ;AA6dlB,aAAU,IA7dQ;AA6dF,oBAAiB,MA7df;AA8dlB,aAAU,MA9dQ;AA8dA,WAAQ,KA9dR;AA+dlB,aAAU,MA/dQ;AA+dA,aAAU,MA/dV;AAgelB,aAAU,IAheQ;AAgeF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAheN;AAielB,UAAO,KAjeW;AAieJ,YAAS,MAjeL;AAkelB,eAAY,MAleM;AAkeE,eAAY,MAled;AAmelB,cAAW,MAneO;AAmeC,gBAAa,MAned;AAoelB,qBAAkB,MApeA;AAoeQ,gBAAa,MAperB;AAqelB,qBAAkB,MAreA;AAqeQ,sBAAmB,MAre3B;AAselB,uBAAoB,MAteF;AAseU,eAAY,MAtetB;AAuelB,aAAU,MAveQ;AAueA,aAAU,MAveV;AAwelB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAxeU;AAweO,WAAQ,KAxef;AAyelB,WAAQ,MAzeU;AAyeF,aAAU,KAzeR;AA0elB,YAAS,MA1eS;AA0eD,WAAQ,MA1eP;AA2elB,YAAS,MA3eS;AA2eD,YAAS,MA3eR;AA4elB,YAAS,MA5eS;AA4eD,cAAW,MA5eV;AA6elB,WAAQ,KA7eU;AA6eH,eAAY,MA7eT;AA8elB,YAAS,MA9eS;AA8eD,WAAQ,MA9eP;AA+elB,YAAS,IA/eS;AA+eH,aAAU,IA/eP;AAgflB,aAAU,MAhfQ;AAgfA,aAAU,KAhfV;AAiflB,WAAQ,MAjfU;AAifF,WAAQ,IAjfN;AAkflB,YAAS,IAlfS;AAkfH,aAAU,MAlfP;AAmflB,UAAO,KAnfW;AAmfJ,WAAQ,KAnfJ;AAoflB,SAAM,MApfY;AAofJ,YAAS,MApfL;AAqflB,UAAO,CAAC,MAAD,EAAQ,MAAR,CArfW;AAqfM,SAAM,MArfZ;AAsflB,YAAS,IAtfS;AAsfH,aAAU,IAtfP;AAuflB,UAAO,MAvfW;AAufH,aAAU,MAvfP;AAwflB,SAAM,MAxfY;AAwfJ,eAAY,MAxfR;AAyflB,UAAO,MAzfW;AAyfH,UAAO,MAzfJ;AA0flB,aAAU,MA1fQ;AA0fA,YAAS,KA1fT;AA2flB,YAAS,MA3fS;AA2fD,eAAY,MA3fX;AA4flB,aAAU,MA5fQ;AA4fA,aAAU,MA5fV;AA6flB,aAAU,MA7fQ;AA6fA,WAAQ,MA7fR;AA8flB,UAAO,KA9fW;AA8fJ,WAAQ,MA9fJ;AA+flB,YAAS,KA/fS;AA+fF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA/fN;AAggBlB,WAAQ,MAhgBU;AAggBF,aAAU,MAhgBR;AAigBlB,YAAS,MAjgBS;AAigBD,WAAQ,KAjgBP;AAkgBlB,cAAW,KAlgBO;AAkgBA,YAAS,KAlgBT;AAmgBlB,aAAU,MAngBQ;AAmgBA,cAAW,MAngBX;AAogBlB,YAAS,MApgBS;AAogBD,iBAAc,MApgBb;AAqgBlB,kBAAe,MArgBG;AAqgBK,aAAU,IArgBf;AAsgBlB,aAAU,MAtgBQ;AAsgBA,YAAS,MAtgBT;AAugBlB,cAAW,MAvgBO;AAugBC,eAAY,MAvgBb;AAwgBlB,YAAS,MAxgBS;AAwgBD,YAAS,MAxgBR;AAygBlB,WAAQ,MAzgBU;AAygBF,YAAS,MAzgBP;AA0gBlB,WAAQ,MA1gBU;AA0gBF,UAAO,KA1gBL;AA2gBlB,SAAM,IA3gBY;AA2gBN,UAAO,IA3gBD;AA4gBlB,UAAO,IA5gBW;AA4gBL,WAAQ,IA5gBH;AA6gBlB,WAAQ,MA7gBU;AA6gBF,WAAQ,IA7gBN;AA8gBlB,YAAS,MA9gBS;AA8gBD,kBAAe,MA9gBd;AA+gBlB,mBAAgB,MA/gBE;AA+gBM,oBAAiB,MA/gBvB;AAghBlB,UAAO,KAhhBW;AAghBJ,aAAU,MAhhBN;AAihBlB,aAAU,MAjhBQ;AAihBA,YAAS,MAjhBT;AAkhBlB,aAAU,MAlhBQ;AAkhBA,UAAO,CAAC,MAAD,EAAQ,MAAR,CAlhBP;AAmhBlB,YAAS,MAnhBS;AAmhBD,YAAS,CAAC,IAAD,EAAM,IAAN,CAnhBR;AAohBlB,WAAQ,MAphBU;AAohBF,YAAS,MAphBP;AAqhBlB,YAAS,MArhBS;AAqhBD,WAAQ,KArhBP;AAshBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAthBU;AAshBO,aAAU,MAthBjB;AAuhBlB,WAAQ,MAvhBU;AAuhBF,YAAS,MAvhBP;AAwhBlB,eAAY,MAxhBM;AAwhBE,YAAS,IAxhBX;AAyhBlB,aAAU,IAzhBQ;AAyhBF,aAAU,MAzhBR;AA0hBlB,YAAS,IA1hBS;AA0hBH,aAAU,IA1hBP;AA2hBlB,aAAU,MA3hBQ;AA2hBA,aAAU,MA3hBV;AA4hBlB,aAAU,MA5hBQ;AA4hBA,aAAU,MA5hBV;AA6hBlB,aAAU,MA7hBQ;AA6hBA,YAAS,IA7hBT;AA8hBlB,aAAU,IA9hBQ;AA8hBF,aAAU,MA9hBR;AA+hBlB,aAAU,MA/hBQ;AA+hBA,aAAU,MA/hBV;AAgiBlB,aAAU,MAhiBQ;AAgiBA,aAAU,MAhiBV;AAiiBlB,aAAU,MAjiBQ;AAiiBA,YAAS,MAjiBT;AAkiBlB,YAAS,MAliBS;AAkiBD,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAliBP;AAmiBlB,SAAM,MAniBY;AAmiBJ,UAAO,MAniBH;AAoiBlB,aAAU,KApiBQ;AAoiBD,YAAS,KApiBR;AAqiBlB,aAAU,KAriBQ;AAqiBD,UAAO,MAriBN;AAsiBlB,aAAU,KAtiBQ;AAsiBD,YAAS,KAtiBR;AAuiBlB,UAAO,KAviBW;AAuiBJ,WAAQ,KAviBJ;AAwiBlB,SAAM,MAxiBY;AAwiBJ,UAAO,MAxiBH;AAyiBlB,UAAO,MAziBW;AAyiBH,WAAQ,MAziBL;AA0iBlB,eAAY,MA1iBM;AA0iBE,UAAO,MA1iBT;AA2iBlB,YAAS,MA3iBS;AA2iBD,aAAU,MA3iBT;AA4iBlB,cAAW,MA5iBO;AA4iBC,eAAY,MA5iBb;AA6iBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7iBU;AA6iBO,aAAU,MA7iBjB;AA8iBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA9iBW;AA8iBM,SAAM,MA9iBZ;AA+iBlB,UAAO,MA/iBW;AA+iBH,YAAS,MA/iBN;AAgjBlB,WAAQ,KAhjBU;AAgjBH,SAAM,MAhjBH;AAijBlB,UAAO,MAjjBW;AAijBH,UAAO,MAjjBJ;AAkjBlB,UAAO,MAljBW;AAkjBH,UAAO,MAljBJ;AAmjBlB,WAAQ,MAnjBU;AAmjBF,eAAY,MAnjBV;AAojBlB,UAAO,MApjBW;AAojBH,WAAQ,MApjBL;AAqjBlB,YAAS,MArjBS;AAqjBD,YAAS,MArjBR;AAsjBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAtjBU;AAsjBO,YAAS,IAtjBhB;AAujBlB,WAAQ,MAvjBU;AAujBF,WAAQ,MAvjBN;AAwjBlB,YAAS,MAxjBS;AAwjBD,YAAS,MAxjBR;AAyjBlB,QAAK,IAzjBa;AAyjBP,SAAM,IAzjBC;AA0jBlB,WAAQ,MA1jBU;AA0jBF,YAAS,MA1jBP;AA2jBlB,YAAS,MA3jBS;AA2jBD,aAAU,MA3jBT;AA4jBlB,cAAW,MA5jBO;AA4jBC,gBAAa,MA5jBd;AA6jBlB,aAAU,MA7jBQ;AA6jBA,aAAU,MA7jBV;AA8jBlB,gBAAa,MA9jBK;AA8jBG,iBAAc,MA9jBjB;AA+jBlB,cAAW,MA/jBO;AA+jBC,aAAU,MA/jBX;AAgkBlB,gBAAa,CAAC,MAAD,EAAQ,MAAR,CAhkBK;AAgkBY,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAhkBpB;AAikBlB,WAAQ,MAjkBU;AAikBF,aAAU,MAjkBR;AAkkBlB,WAAQ,IAlkBU;AAkkBJ,aAAU,MAlkBN;AAmkBlB,aAAU,KAnkBQ;AAmkBD,WAAQ,MAnkBP;AAokBlB,cAAW,MApkBO;AAokBC,YAAS,MApkBV;AAqkBlB,WAAQ,MArkBU;AAqkBF,YAAS,KArkBP;AAskBlB,aAAU,MAtkBQ;AAskBA,gBAAa,MAtkBb;AAukBlB,aAAU,MAvkBQ;AAukBA,aAAU,MAvkBV;AAwkBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAxkBW;AAwkBM,eAAY,MAxkBlB;AAykBlB,eAAY,MAzkBM;AAykBE,YAAS,MAzkBX;AA0kBlB,aAAU,MA1kBQ;AA0kBA,oBAAiB,MA1kBjB;AA2kBlB,qBAAkB,MA3kBA;AA2kBQ,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3kBhB;AA4kBlB,aAAU,MA5kBQ;AA4kBA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA5kBR;AA6kBlB,aAAU,MA7kBQ;AA6kBA,aAAU,KA7kBV;AA8kBlB,aAAU,MA9kBQ;AA8kBA,aAAU,MA9kBV;AA+kBlB,YAAS,IA/kBS;AA+kBH,aAAU,IA/kBP;AAglBlB,SAAM,MAhlBY;AAglBJ,WAAQ,IAhlBJ;AAilBlB,YAAS,IAjlBS;AAilBH,UAAO,KAjlBJ;AAklBlB,WAAQ,KAllBU;AAklBH,WAAQ,IAllBL;AAmlBlB,YAAS,IAnlBS;AAmlBH,UAAO,MAnlBJ;AAolBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAplBW;AAolBM,YAAS,IAplBf;AAqlBlB,aAAU,IArlBQ;AAqlBF,SAAM,MArlBJ;AAslBlB,aAAU,MAtlBQ;AAslBA,YAAS,MAtlBT;AAulBlB,aAAU,MAvlBQ;AAulBA,YAAS,MAvlBT;AAwlBlB,YAAS,KAxlBS;AAwlBF,YAAS,KAxlBP;AAylBlB,YAAS,MAzlBS;AAylBD,eAAY,MAzlBX;AA0lBlB,eAAY,MA1lBM;AA0lBE,YAAS,KA1lBX;AA2lBlB,WAAQ,MA3lBU;AA2lBF,YAAS,KA3lBP;AA4lBlB,SAAM,MA5lBY;AA4lBJ,aAAU,MA5lBN;AA6lBlB,YAAS,MA7lBS;AA6lBD,eAAY,MA7lBX;AA8lBlB,aAAU,KA9lBQ;AA8lBD,UAAO,MA9lBN;AA+lBlB,aAAU,MA/lBQ;AA+lBA,eAAY,MA/lBZ;AAgmBlB,eAAY,MAhmBM;AAgmBE,eAAY,MAhmBd;AAimBlB,cAAW,MAjmBO;AAimBC,WAAQ,KAjmBT;AAkmBlB,YAAS,KAlmBS;AAkmBF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAlmBN;AAmmBlB,WAAQ,KAnmBU;AAmmBH,YAAS,MAnmBN;AAomBlB,YAAS,IApmBS;AAomBH,aAAU,IApmBP;AAqmBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CArmBU;AAqmBO,WAAQ,MArmBf;AAsmBlB,YAAS,MAtmBS;AAsmBD,cAAW,MAtmBV;AAumBlB,YAAS,MAvmBS;AAumBD,aAAU,MAvmBT;AAwmBlB,YAAS,MAxmBS;AAwmBD,SAAM,MAxmBL;AAymBlB,aAAU,KAzmBQ;AAymBD,YAAS,KAzmBR;AA0mBlB,UAAO,IA1mBW;AA0mBL,WAAQ,IA1mBH;AA2mBlB,YAAS,KA3mBS;AA2mBF,UAAO,KA3mBL;AA4mBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA5mBW;AA4mBM,YAAS,KA5mBf;AA6mBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7mBU;AA6mBO,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7mBf;AA8mBlB,aAAU,KA9mBQ;AA8mBD,YAAS,KA9mBR;AA+mBlB,YAAS,KA/mBS;AA+mBF,aAAU,KA/mBR;AAgnBlB,aAAU,KAhnBQ;AAgnBD,UAAO,KAhnBN;AAinBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAjnBW;AAinBM,aAAU,KAjnBhB;AAknBlB,WAAQ,KAlnBU;AAknBH,WAAQ,KAlnBL;AAmnBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAnnBU;AAmnBO,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAnnBf;AAonBlB,YAAS,MApnBS;AAonBD,WAAQ,MApnBP;AAqnBlB,aAAU,MArnBQ;AAqnBA,YAAS,MArnBT;AAsnBlB,SAAM,MAtnBY;AAsnBJ,UAAO,MAtnBH;AAunBlB,WAAQ,MAvnBU;AAunBF,aAAU,KAvnBR;AAwnBlB,eAAY,MAxnBM;AAwnBE,aAAU,MAxnBZ;AAynBlB,aAAU,KAznBQ;AAynBD,WAAQ,MAznBP;AA0nBlB,YAAS,MA1nBS;AA0nBD,aAAU,MA1nBT;AA2nBlB,UAAO,MA3nBW;AA2nBH,WAAQ,IA3nBL;AA4nBlB,YAAS,IA5nBS;AA4nBH,WAAQ,MA5nBL;AA6nBlB,YAAS,MA7nBS;AA6nBD,cAAW,MA7nBV;AA8nBlB,aAAU,MA9nBQ;AA8nBA,aAAU,MA9nBV;AA+nBlB,aAAU,MA/nBQ;AA+nBA,aAAU,MA/nBV;AAgoBlB,cAAW,MAhoBO;AAgoBC,aAAU,MAhoBX;AAioBlB,UAAO,MAjoBW;AAioBH,aAAU,MAjoBP;AAkoBlB,WAAQ,MAloBU;AAkoBF,YAAS,CAAC,MAAD,EAAQ,MAAR,CAloBP;AAmoBlB,YAAS,MAnoBS;AAmoBD,YAAS,MAnoBR;AAooBlB,aAAU,IApoBQ;AAooBF,aAAU,IApoBR;AAqoBlB,YAAS,MAroBS;AAqoBD,cAAW,MAroBV;AAsoBlB,cAAW,MAtoBO;AAsoBC,aAAU,KAtoBX;AAuoBlB,aAAU,KAvoBQ;AAuoBD,YAAS,MAvoBR;AAwoBlB,WAAQ,IAxoBU;AAwoBJ,UAAO,KAxoBH;AAyoBlB,WAAQ,MAzoBU;AAyoBF,YAAS,MAzoBP;AA0oBlB,aAAU,MA1oBQ;AA0oBA,cAAW,MA1oBX;AA2oBlB,eAAY,MA3oBM;AA2oBE,WAAQ,MA3oBV;AA4oBlB,SAAM,MA5oBY;AA4oBJ,gBAAa,MA5oBT;AA6oBlB,oBAAiB,MA7oBC;AA6oBO,sBAAmB,MA7oB1B;AA8oBlB,oBAAiB,MA9oBC;AA8oBO,qBAAkB,MA9oBzB;AA+oBlB,qBAAkB,MA/oBA;AA+oBQ,sBAAmB,MA/oB3B;AAgpBlB,wBAAqB,MAhpBH;AAgpBW,0BAAuB,MAhpBlC;AAipBlB,qBAAkB,MAjpBA;AAipBQ,UAAO,MAjpBf;AAkpBlB,UAAO,MAlpBW;AAkpBH,WAAQ,MAlpBL;AAmpBlB,eAAY,MAnpBM;AAmpBE,UAAO,MAnpBT;AAopBlB,YAAS,MAppBS;AAopBD,aAAU,MAppBT;AAqpBlB,cAAW,MArpBO;AAqpBC,eAAY,MArpBb;AAspBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAtpBU;AAspBO,aAAU,MAtpBjB;AAupBlB,iBAAc,MAvpBI;AAupBI,cAAW,MAvpBf;AAwpBlB,gBAAa,MAxpBK;AAwpBG,iBAAc,MAxpBjB;AAypBlB,cAAW,MAzpBO;AAypBC,cAAW,MAzpBZ;AA0pBlB,aAAU,MA1pBQ;AA0pBA,aAAU,MA1pBV;AA2pBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA3pBW;AA2pBM,SAAM,MA3pBZ;AA4pBlB,UAAO,MA5pBW;AA4pBH,YAAS,MA5pBN;AA6pBlB,YAAS,MA7pBS;AA6pBD,aAAU,MA7pBT;AA8pBlB,YAAS,MA9pBS;AA8pBD,WAAQ,KA9pBP;AA+pBlB,SAAM,MA/pBY;AA+pBJ,YAAS,MA/pBL;AAgqBlB,eAAY,MAhqBM;AAgqBE,aAAU,MAhqBZ;AAiqBlB,YAAS,MAjqBS;AAiqBD,aAAU,KAjqBT;AAkqBlB,aAAU,MAlqBQ;AAkqBA,iBAAc,MAlqBd;AAmqBlB,UAAO,MAnqBW;AAmqBH,WAAQ,MAnqBL;AAoqBlB,eAAY,MApqBM;AAoqBE,UAAO,MApqBT;AAqqBlB,WAAQ,MArqBU;AAqqBF,YAAS,MArqBP;AAsqBlB,YAAS,MAtqBS;AAsqBD,YAAS,MAtqBR;AAuqBlB,YAAS,MAvqBS;AAuqBD,YAAS,MAvqBR;AAwqBlB,oBAAiB,MAxqBC;AAwqBO,yBAAsB,MAxqB7B;AAyqBlB,iBAAc,MAzqBI;AAyqBI,qBAAkB,MAzqBtB;AA0qBlB,oBAAiB,MA1qBC;AA0qBO,qBAAkB,MA1qBzB;AA2qBlB,YAAS,MA3qBS;AA2qBD,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3qBP;AA4qBlB,aAAU,MA5qBQ;AA4qBA,cAAW,MA5qBX;AA6qBlB,aAAU,MA7qBQ;AA6qBA,aAAU,IA7qBV;AA8qBlB,UAAO,MA9qBW;AA8qBH,cAAW,MA9qBR;AA+qBlB,WAAQ,MA/qBU;AA+qBF,WAAQ,IA/qBN;AAgrBlB,aAAU,MAhrBQ;AAgrBA,YAAS,MAhrBT;AAirBlB,eAAY,MAjrBM;AAirBE,YAAS,MAjrBX;AAkrBlB,aAAU,MAlrBQ;AAkrBA,UAAO,MAlrBP;AAmrBlB,YAAS,MAnrBS;AAmrBD,aAAU,MAnrBT;AAorBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAprBU;AAorBO,UAAO,MAprBd;AAqrBlB,WAAQ,MArrBU;AAqrBF,YAAS,MArrBP;AAsrBlB,YAAS,MAtrBS;AAsrBD,WAAQ,IAtrBP;AAurBlB,YAAS,MAvrBS;AAurBD,aAAU,MAvrBT;AAwrBlB,aAAU,KAxrBQ;AAwrBD,QAAK,IAxrBJ;AAyrBlB,SAAM,IAzrBY;AAyrBN,WAAQ,MAzrBF;AA0rBlB,YAAS,MA1rBS;AA0rBD,YAAS,MA1rBR;AA2rBlB,aAAU,MA3rBQ;AA2rBA,aAAU,MA3rBV;AA4rBlB,aAAU,MA5rBQ;AA4rBA,cAAW,MA5rBX;AA6rBlB,aAAU,MA7rBQ;AA6rBA,WAAQ,MA7rBR;AA8rBlB,YAAS,MA9rBS;AA8rBD,YAAS,MA9rBR;AA+rBlB,eAAY,MA/rBM;AA+rBE,cAAW,MA/rBb;AAgsBlB,gBAAa,CAAC,MAAD,EAAQ,MAAR,CAhsBK;AAgsBY,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAhsBpB;AAisBlB,YAAS,MAjsBS;AAisBD,UAAO,IAjsBN;AAksBlB,WAAQ,IAlsBU;AAksBJ,WAAQ,MAlsBJ;AAmsBlB,WAAQ,MAnsBU;AAmsBF,cAAW,MAnsBT;AAosBlB,UAAO,MApsBW;AAosBH,aAAU,MApsBP;AAqsBlB,iBAAc,MArsBI;AAqsBI,iBAAc,MArsBlB;AAssBlB,eAAY,MAtsBM;AAssBE,aAAU,MAtsBZ;AAusBlB,aAAU,MAvsBQ;AAusBA,UAAO,KAvsBP;AAwsBlB,YAAS,MAxsBS;AAwsBD,oBAAiB,MAxsBhB;AAysBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAzsBW;AAysBM,UAAO,MAzsBb;AA0sBlB,WAAQ,IA1sBU;AA0sBJ,YAAS,IA1sBL;AA2sBlB,UAAO,MA3sBW;AA2sBH,aAAU,IA3sBP;AA4sBlB,aAAU,MA5sBQ;AA4sBA,YAAS,IA5sBT;AA6sBlB,aAAU,IA7sBQ;AA6sBF,YAAS,MA7sBP;AA8sBlB,aAAU,MA9sBQ;AA8sBA,aAAU,MA9sBV;AA+sBlB,cAAW,MA/sBO;AA+sBC,WAAQ,MA/sBT;AAgtBlB,WAAQ,MAhtBU;AAgtBF,aAAU,MAhtBR;AAitBlB,aAAU,MAjtBQ;AAitBA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjtBR;AAktBlB,SAAM,MAltBY;AAktBJ,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAltBJ;AAmtBlB,aAAU,MAntBQ;AAmtBA,SAAM,KAntBN;AAotBlB,eAAY,MAptBM;AAotBE,YAAS,MAptBX;AAqtBlB,UAAO,CAAC,MAAD,EAAQ,KAAR,CArtBW;AAqtBK,UAAO,CAAC,MAAD,EAAQ,MAAR,CArtBZ;AAstBlB,WAAQ,CAAC,MAAD,EAAQ,KAAR,CAttBU;AAstBM,iBAAc,MAttBpB;AAutBlB,sBAAmB,MAvtBD;AAutBS,UAAO,CAAC,MAAD,EAAQ,KAAR,CAvtBhB;AAwtBlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAxtBW;AAwtBM,WAAQ,CAAC,MAAD,EAAQ,KAAR,CAxtBd;AAytBlB,kBAAe,MAztBG;AAytBK,aAAU,MAztBf;AA0tBlB,aAAU,MA1tBQ;AA0tBA,YAAS,MA1tBT;AA2tBlB,aAAU,KA3tBQ;AA2tBD,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3tBP;AA4tBlB,UAAO,MA5tBW;AA4tBH,WAAQ,CAAC,MAAD,EAAQ,KAAR,CA5tBL;AA6tBlB,YAAS,CAAC,MAAD,EAAQ,KAAR,CA7tBS;AA6tBO,YAAS,KA7tBhB;AA8tBlB,cAAW,MA9tBO;AA8tBC,YAAS,MA9tBV;AA+tBlB,cAAW,MA/tBO;AA+tBC,eAAY,MA/tBb;AAguBlB,UAAO,IAhuBW;AAguBL,WAAQ,IAhuBH;AAiuBlB,YAAS,CAAC,MAAD,EAAQ,KAAR,CAjuBS;AAiuBO,aAAU,CAAC,MAAD,EAAQ,KAAR,CAjuBjB;AAkuBlB,WAAQ,MAluBU;AAkuBF,aAAU,KAluBR;AAmuBlB,aAAU,KAnuBQ;AAmuBD,YAAS,MAnuBR;AAouBlB,eAAY,CAAC,MAAD,EAAQ,KAAR,CApuBM;AAouBU,WAAQ,MApuBlB;AAquBlB,UAAO,KAruBW;AAquBJ,YAAS,MAruBL;AAsuBlB,SAAM,MAtuBY;AAsuBJ,YAAS,MAtuBL;AAuuBlB,aAAU,MAvuBQ;AAuuBA,YAAS,MAvuBT;AAwuBlB,cAAW,MAxuBO;AAwuBC,YAAS,CAAC,MAAD,EAAQ,KAAR,CAxuBV;AAyuBlB,aAAU,MAzuBQ;AAyuBA,aAAU,MAzuBV;AA0uBlB,YAAS,CAAC,MAAD,EAAQ,KAAR,CA1uBS;AA0uBO,aAAU,MA1uBjB;AA2uBlB,cAAW,MA3uBO;AA2uBC,UAAO,CAAC,MAAD,EAAQ,MAAR,CA3uBR;AA4uBlB,UAAO,CAAC,MAAD,EAAQ,KAAR,CA5uBW;AA4uBK,UAAO,MA5uBZ;AA6uBlB,WAAQ,MA7uBU;AA6uBF,YAAS,CAAC,MAAD,EAAQ,KAAR,CA7uBP;AA8uBlB,gBAAa,CAAC,MAAD,EAAQ,KAAR,CA9uBK;AA8uBW,WAAQ,CAAC,MAAD,EAAQ,KAAR,CA9uBnB;AA+uBlB,YAAS,MA/uBS;AA+uBD,UAAO,MA/uBN;AAgvBlB,WAAQ,MAhvBU;AAgvBF,YAAS,MAhvBP;AAivBlB,YAAS,MAjvBS;AAivBD,YAAS,MAjvBR;AAkvBlB,SAAM,MAlvBY;AAkvBJ,UAAO,MAlvBH;AAmvBlB,WAAQ,MAnvBU;AAmvBF,UAAO,MAnvBL;AAovBlB,WAAQ,KApvBU;AAovBH,YAAS,MApvBN;AAqvBlB,UAAO,CAAC,MAAD,EAAQ,KAAR,CArvBW;AAqvBK,YAAS,MArvBd;AAsvBlB,WAAQ,MAtvBU;AAsvBF,UAAO,MAtvBL;AAuvBlB,iBAAc,MAvvBI;AAuvBI,sBAAmB,MAvvBvB;AAwvBlB,WAAQ,MAxvBU;AAwvBF,YAAS,CAAC,MAAD,EAAQ,KAAR,CAxvBP;AAyvBlB,gBAAa,CAAC,MAAD,EAAQ,KAAR,CAzvBK;AAyvBW,WAAQ,CAAC,MAAD,EAAQ,KAAR,CAzvBnB;AA0vBlB,YAAS,MA1vBS;AA0vBD,YAAS,MA1vBR;AA2vBlB,UAAO,MA3vBW;AA2vBH,YAAS,MA3vBN;AA4vBlB,aAAU,MA5vBQ;AA4vBA,WAAQ,MA5vBR;AA6vBlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7vBU;AA6vBO,SAAM,IA7vBb;AA8vBlB,UAAO,IA9vBW;AA8vBL,YAAS,MA9vBJ;AA+vBlB,aAAU,CAAC,MAAD,EAAQ,KAAR,CA/vBQ;AA+vBQ,eAAY,CAAC,MAAD,EAAQ,KAAR,CA/vBpB;AAgwBlB,cAAW,MAhwBO;AAgwBC,cAAW,MAhwBZ;AAiwBlB,cAAW,MAjwBO;AAiwBC,YAAS,MAjwBV;AAkwBlB,cAAW,MAlwBO;AAkwBC,cAAW,MAlwBZ;AAmwBlB,cAAW,MAnwBO;AAmwBC,WAAQ,MAnwBT;AAowBlB,gBAAa,MApwBK;AAowBG,aAAU,CAAC,MAAD,EAAQ,MAAR,CApwBb;AAqwBlB,YAAS,CAAC,MAAD,EAAQ,KAAR,CArwBS;AAqwBO,cAAW,MArwBlB;AAswBlB,UAAO,MAtwBW;AAswBH,aAAU,MAtwBP;AAuwBlB,WAAQ,CAAC,MAAD,EAAQ,KAAR,CAvwBU;AAuwBM,YAAS,MAvwBf;AAwwBlB,cAAW,CAAC,MAAD,EAAQ,KAAR,CAxwBO;AAwwBS,YAAS,MAxwBlB;AAywBlB,YAAS,MAzwBS;AAywBD,aAAU,CAAC,MAAD,EAAQ,KAAR,CAzwBT;AA0wBlB,aAAU,CAAC,MAAD,EAAQ,KAAR,CA1wBQ;AA0wBQ,kBAAe,MA1wBvB;AA2wBlB,YAAS,MA3wBS;AA2wBD,aAAU,MA3wBT;AA4wBlB,UAAO,MA5wBW;AA4wBH,aAAU,MA5wBP;AA6wBlB,WAAQ,CAAC,MAAD,EAAQ,KAAR,CA7wBU;AA6wBM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7wBd;AA8wBlB,gBAAa,MA9wBK;AA8wBG,qBAAkB,MA9wBrB;AA+wBlB,WAAQ,MA/wBU;AA+wBF,YAAS,MA/wBP;AAgxBlB,aAAU,MAhxBQ;AAgxBA,YAAS,MAhxBT;AAixBlB,YAAS,MAjxBS;AAixBD,cAAW,MAjxBV;AAkxBlB,cAAW,MAlxBO;AAkxBC,WAAQ,MAlxBT;AAmxBlB,YAAS,CAAC,MAAD,EAAQ,KAAR,CAnxBS;AAmxBO,YAAS,MAnxBhB;AAoxBlB,cAAW,CAAC,MAAD,EAAQ,MAAR,CApxBO;AAoxBU,gBAAa,MApxBvB;AAqxBlB,iBAAc,CAAC,MAAD,EAAQ,KAAR,CArxBI;AAqxBY,YAAS,MArxBrB;AAsxBlB,cAAW,CAAC,MAAD,EAAQ,KAAR,CAtxBO;AAsxBS,WAAQ,MAtxBjB;AAuxBlB,YAAS,CAAC,MAAD,EAAQ,KAAR,CAvxBS;AAuxBO,YAAS,MAvxBhB;AAwxBlB,cAAW,CAAC,MAAD,EAAQ,MAAR,CAxxBO;AAwxBU,gBAAa,MAxxBvB;AAyxBlB,iBAAc,CAAC,MAAD,EAAQ,KAAR,CAzxBI;AAyxBY,WAAQ,MAzxBpB;AA0xBlB,YAAS,IA1xBS;AA0xBH,aAAU,IA1xBP;AA2xBlB,WAAQ,MA3xBU;AA2xBF,oBAAiB,MA3xBf;AA4xBlB,sBAAmB,MA5xBD;AA4xBS,qBAAkB,MA5xB3B;AA6xBlB,uBAAoB,MA7xBF;AA6xBU,SAAM,KA7xBhB;AA8xBlB,UAAO,IA9xBW;AA8xBL,aAAU,MA9xBL;AA+xBlB,YAAS,MA/xBS;AA+xBD,aAAU,MA/xBT;AAgyBlB,aAAU,MAhyBQ;AAgyBA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAhyBR;AAiyBlB,aAAU,MAjyBQ;AAiyBA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjyBR;AAkyBlB,WAAQ,CAAC,IAAD,EAAM,MAAN,CAlyBU;AAkyBK,cAAW,MAlyBhB;AAmyBlB,aAAU,MAnyBQ;AAmyBA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAnyBR;AAoyBlB,WAAQ,CAAC,IAAD,EAAM,MAAN,CApyBU;AAoyBK,cAAW,CAAC,MAAD,EAAQ,MAAR,CApyBhB;AAqyBlB,aAAU,MAryBQ;AAqyBA,cAAW,CAAC,MAAD,EAAQ,MAAR,CAryBX;AAsyBlB,YAAS,CAAC,MAAD,EAAQ,MAAR,CAtyBS;AAsyBQ,YAAS,MAtyBjB;AAuyBlB,aAAU,MAvyBQ;AAuyBA,YAAS,MAvyBT;AAwyBlB,cAAW,MAxyBO;AAwyBC,aAAU,MAxyBX;AAyyBlB,SAAM,MAzyBY;AAyyBJ,YAAS,IAzyBL;AA0yBlB,aAAU,IA1yBQ;AA0yBF,WAAQ,MA1yBN;AA2yBlB,WAAQ,MA3yBU;AA2yBF,WAAQ,IA3yBN;AA4yBlB,YAAS,IA5yBS;AA4yBH,UAAO,KA5yBJ;AA6yBlB,YAAS,MA7yBS;AA6yBD,aAAU,KA7yBT;AA8yBlB,WAAQ,MA9yBU;AA8yBF,WAAQ,MA9yBN;AA+yBlB,aAAU,MA/yBQ;AA+yBA,YAAS,KA/yBT;AAgzBlB,YAAS,MAhzBS;AAgzBD,UAAO,CAAC,MAAD,EAAQ,MAAR,CAhzBN;AAizBlB,WAAQ,KAjzBU;AAizBH,YAAS,IAjzBN;AAkzBlB,aAAU,IAlzBQ;AAkzBF,UAAO,MAlzBL;AAmzBlB,YAAS,MAnzBS;AAmzBD,UAAO,KAnzBN;AAozBlB,WAAQ,MApzBU;AAozBF,YAAS,MApzBP;AAqzBlB,YAAS,MArzBS;AAqzBD,cAAW,MArzBV;AAszBlB,YAAS,MAtzBS;AAszBD,UAAO,MAtzBN;AAuzBlB,YAAS,KAvzBS;AAuzBF,YAAS,KAvzBP;AAwzBlB,cAAW,KAxzBO;AAwzBA,WAAQ,MAxzBR;AAyzBlB,aAAU,MAzzBQ;AAyzBA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAzzBR;AA0zBlB,WAAQ,MA1zBU;AA0zBF,YAAS,MA1zBP;AA2zBlB,YAAS,MA3zBS;AA2zBD,SAAM,MA3zBL;AA4zBlB,YAAS,MA5zBS;AA4zBD,UAAO,MA5zBN;AA6zBlB,YAAS,MA7zBS;AA6zBD,cAAW,MA7zBV;AA8zBlB,UAAO,IA9zBW;AA8zBL,WAAQ,IA9zBH;AA+zBlB,UAAO,IA/zBW;AA+zBL,WAAQ,IA/zBH;AAg0BlB,aAAU,MAh0BQ;AAg0BA,WAAQ,MAh0BR;AAi0BlB,cAAW,MAj0BO;AAi0BC,UAAO,MAj0BR;AAk0BlB,WAAQ,MAl0BU;AAk0BF,YAAS,IAl0BP;AAm0BlB,aAAU,IAn0BQ;AAm0BF,WAAQ,MAn0BN;AAo0BlB,YAAS,IAp0BS;AAo0BH,aAAU,IAp0BP;AAq0BlB,aAAU,MAr0BQ;AAq0BA,eAAY,MAr0BZ;AAs0BlB,UAAO,IAt0BW;AAs0BL,WAAQ,IAt0BH;AAu0BlB,YAAS,MAv0BS;AAu0BD,UAAO,MAv0BN;AAw0BlB,UAAO,IAx0BW;AAw0BL,WAAQ,IAx0BH;AAy0BlB,eAAY,MAz0BM;AAy0BE,aAAU,MAz0BZ;AA00BlB,YAAS,MA10BS;AA00BD,WAAQ,MA10BP;AA20BlB,UAAO,KA30BW;AA20BJ,aAAU,IA30BN;AA40BlB,aAAU,IA50BQ;AA40BF,aAAU,MA50BR;AA60BlB,WAAQ,MA70BU;AA60BF,cAAW,MA70BT;AA80BlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA90BW;AA80BM,UAAO,KA90Bb;AA+0BlB,WAAQ,KA/0BU;AA+0BH,aAAU,MA/0BP;AAg1BlB,YAAS,MAh1BS;AAg1BD,SAAM,KAh1BL;AAi1BlB,gBAAa,MAj1BK;AAi1BG,UAAO,KAj1BV;AAk1BlB,aAAU,MAl1BQ;AAk1BA,cAAW,MAl1BX;AAm1BlB,aAAU,MAn1BQ;AAm1BA,WAAQ,IAn1BR;AAo1BlB,eAAY,MAp1BM;AAo1BE,YAAS,MAp1BX;AAq1BlB,cAAW,MAr1BO;AAq1BC,aAAU,MAr1BX;AAs1BlB,aAAU,MAt1BQ;AAs1BA,YAAS,MAt1BT;AAu1BlB,YAAS,IAv1BS;AAu1BH,aAAU,IAv1BP;AAw1BlB,cAAW,MAx1BO;AAw1BC,cAAW,MAx1BZ;AAy1BlB,SAAM,IAz1BY;AAy1BN,eAAY,MAz1BN;AA01BlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA11BU;AA01BO,WAAQ,IA11Bf;AA21BlB,YAAS,IA31BS;AA21BH,SAAM,MA31BH;AA41BlB,UAAO,MA51BW;AA41BH,WAAQ,MA51BL;AA61BlB,YAAS,MA71BS;AA61BD,UAAO,MA71BN;AA81BlB,WAAQ,MA91BU;AA81BF,iBAAc,MA91BZ;AA+1BlB,kBAAe,MA/1BG;AA+1BK,aAAU,MA/1Bf;AAg2BlB,kBAAe,MAh2BG;AAg2BK,eAAY,MAh2BjB;AAi2BlB,eAAY,MAj2BM;AAi2BE,cAAW,MAj2Bb;AAk2BlB,YAAS,MAl2BS;AAk2BD,aAAU,MAl2BT;AAm2BlB,WAAQ,MAn2BU;AAm2BF,YAAS,MAn2BP;AAo2BlB,aAAU,MAp2BQ;AAo2BA,WAAQ,MAp2BR;AAq2BlB,eAAY,MAr2BM;AAq2BE,eAAY,MAr2Bd;AAs2BlB,eAAY,MAt2BM;AAs2BE,WAAQ,MAt2BV;AAu2BlB,aAAU,MAv2BQ;AAu2BA,YAAS,MAv2BT;AAw2BlB,aAAU,MAx2BQ;AAw2BA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAx2BR;AAy2BlB,UAAO,KAz2BW;AAy2BJ,aAAU,MAz2BN;AA02BlB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA12BW;AA02BM,WAAQ,MA12Bd;AA22BlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA32BU;AA22BO,aAAU,MA32BjB;AA42BlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA52BU;AA42BO,kBAAe,MA52BtB;AA62BlB,cAAW,MA72BO;AA62BC,YAAS,IA72BV;AA82BlB,cAAW,MA92BO;AA82BC,UAAO,IA92BR;AA+2BlB,WAAQ,IA/2BU;AA+2BJ,YAAS,MA/2BL;AAg3BlB,WAAQ,MAh3BU;AAg3BF,aAAU,MAh3BR;AAi3BlB,YAAS,MAj3BS;AAi3BD,WAAQ,MAj3BP;AAk3BlB,WAAQ,CAAC,MAAD,EAAQ,KAAR,CAl3BU;AAk3BM,aAAU,KAl3BhB;AAm3BlB,YAAS,MAn3BS;AAm3BD,eAAY,MAn3BX;AAo3BlB,WAAQ,MAp3BU;AAo3BF,YAAS,MAp3BP;AAq3BlB,YAAS,MAr3BS;AAq3BD,aAAU,MAr3BT;AAs3BlB,WAAQ,IAt3BU;AAs3BJ,YAAS,IAt3BL;AAu3BlB,WAAQ,MAv3BU;AAu3BF,aAAU,MAv3BR;AAw3BlB,YAAS,MAx3BS;AAw3BD,cAAW,MAx3BV;AAy3BlB,YAAS,MAz3BS;AAy3BD,aAAU,MAz3BT;AA03BlB,aAAU,MA13BQ;AA03BA,aAAU,MA13BV;AA23BlB,aAAU,MA33BQ;AA23BA,cAAW,MA33BX;AA43BlB,aAAU,MA53BQ;AA43BA,YAAS,MA53BT;AA63BlB,aAAU,MA73BQ;AA63BA,YAAS,MA73BT;AA83BlB,gBAAa,MA93BK;AA83BG,YAAS,MA93BZ;AA+3BlB,YAAS,MA/3BS;AA+3BD,aAAU,IA/3BT;AAg4BlB,aAAU,IAh4BQ;AAg4BF,YAAS,MAh4BP;AAi4BlB,cAAW,MAj4BO;AAi4BC,cAAW,MAj4BZ;AAk4BlB,aAAU,KAl4BQ;AAk4BD,aAAU,KAl4BT;AAm4BlB,YAAS,MAn4BS;AAm4BD,WAAQ,IAn4BP;AAo4BlB,UAAO,KAp4BW;AAo4BJ,WAAQ,MAp4BJ;AAq4BlB,cAAW,MAr4BO;AAq4BC,YAAS,MAr4BV;AAs4BlB,aAAU,MAt4BQ;AAs4BA,WAAQ,MAt4BR;AAu4BlB,WAAQ,MAv4BU;AAu4BF,cAAW,MAv4BT;AAw4BlB,eAAY,MAx4BM;AAw4BE,YAAS,MAx4BX;AAy4BlB,WAAQ,MAz4BU;AAy4BF,SAAM,IAz4BJ;AA04BlB,UAAO,IA14BW;AA04BL,aAAU,MA14BL;AA24BlB,aAAU,MA34BQ;AA24BA,UAAO,CAAC,MAAD,EAAQ,MAAR,CA34BP;AA44BlB,YAAS,MA54BS;AA44BD,YAAS,MA54BR;AA64BlB,aAAU,MA74BQ;AA64BA,UAAO,KA74BP;AA84BlB,WAAQ,KA94BU;AA84BH,iBAAc,MA94BX;AA+4BlB,qBAAkB,MA/4BA;AA+4BQ,uBAAoB,MA/4B5B;AAg5BlB,qBAAkB,MAh5BA;AAg5BQ,sBAAmB,MAh5B3B;AAi5BlB,wBAAqB,MAj5BH;AAi5BW,uBAAoB,MAj5B/B;AAk5BlB,sBAAmB,MAl5BD;AAk5BS,sBAAmB,MAl5B5B;AAm5BlB,WAAQ,KAn5BU;AAm5BH,mBAAgB,MAn5Bb;AAo5BlB,YAAS,MAp5BS;AAo5BD,YAAS,MAp5BR;AAq5BlB,UAAO,MAr5BW;AAq5BH,aAAU,MAr5BP;AAs5BlB,iBAAc,MAt5BI;AAs5BI,YAAS,MAt5Bb;AAu5BlB,YAAS,MAv5BS;AAu5BD,YAAS,MAv5BR;AAw5BlB,YAAS,MAx5BS;AAw5BD,YAAS,MAx5BR;AAy5BlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAz5BU;AAy5BO,aAAU,MAz5BjB;AA05BlB,cAAW,MA15BO;AA05BC,WAAQ,IA15BT;AA25BlB,aAAU,MA35BQ;AA25BA,eAAY,MA35BZ;AA45BlB,YAAS,MA55BS;AA45BD,aAAU,MA55BT;AA65BlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA75BU;AA65BO,UAAO,MA75Bd;AA85BlB,WAAQ,IA95BU;AA85BJ,YAAS,MA95BL;AA+5BlB,aAAU,MA/5BQ;AA+5BA,aAAU,MA/5BV;AAg6BlB,aAAU,MAh6BQ;AAg6BA,WAAQ,MAh6BR;AAi6BlB,YAAS,MAj6BS;AAi6BD,YAAS,MAj6BR;AAk6BlB,eAAY,MAl6BM;AAk6BE,cAAW,MAl6Bb;AAm6BlB,SAAM,MAn6BY;AAm6BJ,aAAU,KAn6BN;AAo6BlB,YAAS,MAp6BS;AAo6BD,SAAM,MAp6BL;AAq6BlB,UAAO,MAr6BW;AAq6BH,WAAQ,MAr6BL;AAs6BlB,aAAU,KAt6BQ;AAs6BD,YAAS,MAt6BR;AAu6BlB,UAAO,MAv6BW;AAu6BH,aAAU,KAv6BP;AAw6BlB,YAAS,KAx6BS;AAw6BF,WAAQ,MAx6BN;AAy6BlB,YAAS,MAz6BS;AAy6BD,aAAU,MAz6BT;AA06BlB,eAAY,MA16BM;AA06BE,YAAS,MA16BX;AA26BlB,UAAO,KA36BW;AA26BJ,WAAQ,MA36BJ;AA46BlB,YAAS,MA56BS;AA46BD,YAAS,MA56BR;AA66BlB,YAAS,MA76BS;AA66BD,aAAU,MA76BT;AA86BlB,YAAS,MA96BS;AA86BD,cAAW,MA96BV;AA+6BlB,UAAO,IA/6BW;AA+6BL,WAAQ,IA/6BH;AAg7BlB,WAAQ,IAh7BU;AAg7BJ,aAAU,MAh7BN;AAi7BlB,eAAY,MAj7BM;AAi7BE,YAAS,MAj7BX;AAk7BlB,WAAQ,MAl7BU;AAk7BF,UAAO,CAAC,MAAD,EAAQ,MAAR,CAl7BL;AAm7BlB,aAAU,MAn7BQ;AAm7BA,YAAS,MAn7BT;AAo7BlB,aAAU,KAp7BQ;AAo7BD,WAAQ,KAp7BP;AAq7BlB,eAAY,MAr7BM;AAq7BE,oBAAiB,MAr7BnB;AAs7BlB,SAAM,IAt7BY;AAs7BN,UAAO,IAt7BD;AAu7BlB,YAAS,KAv7BS;AAu7BF,aAAU,KAv7BR;AAw7BlB,aAAU,KAx7BQ;AAw7BD,UAAO,MAx7BN;AAy7BlB,aAAU,MAz7BQ;AAy7BA,WAAQ,MAz7BR;AA07BlB,YAAS,MA17BS;AA07BD,WAAQ,MA17BP;AA27BlB,YAAS,MA37BS;AA27BD,WAAQ,MA37BP;AA47BlB,YAAS,MA57BS;AA47BD,YAAS,MA57BR;AA67BlB,cAAW,MA77BO;AA67BC,cAAW,MA77BZ;AA87BlB,YAAS,MA97BS;AA87BD,oBAAiB,MA97BhB;AA+7BlB,aAAU,MA/7BQ;AA+7BA,eAAY,MA/7BZ;AAg8BlB,WAAQ,MAh8BU;AAg8BF,YAAS,MAh8BP;AAi8BlB,UAAO,MAj8BW;AAi8BH,WAAQ,MAj8BL;AAk8BlB,YAAS,CAAC,MAAD,EAAQ,MAAR,CAl8BS;AAk8BQ,aAAU,KAl8BlB;AAm8BlB,UAAO,IAn8BW;AAm8BL,WAAQ,MAn8BH;AAo8BlB,aAAU,MAp8BQ;AAo8BA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAp8BR;AAq8BlB,aAAU,MAr8BQ;AAq8BA,gBAAa,MAr8Bb;AAs8BlB,WAAQ,MAt8BU;AAs8BF,YAAS,MAt8BP;AAu8BlB,aAAU,CAAC,MAAD,EAAQ,MAAR,CAv8BQ;AAu8BS,YAAS,MAv8BlB;AAw8BlB,aAAU,CAAC,MAAD,EAAQ,MAAR,CAx8BQ;AAw8BS,YAAS,MAx8BlB;AAy8BlB,aAAU,MAz8BQ;AAy8BA,eAAY,MAz8BZ;AA08BlB,iBAAc,MA18BI;AA08BI,YAAS,MA18Bb;AA28BlB,aAAU,MA38BQ;AA28BA,eAAY,MA38BZ;AA48BlB,iBAAc,MA58BI;AA48BI,UAAO,MA58BX;AA68BlB,aAAU,MA78BQ;AA68BA,aAAU,MA78BV;AA88BlB,WAAQ,MA98BU;AA88BF,YAAS,MA98BP;AA+8BlB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA/8BU;AA+8BO,aAAU,MA/8BjB;AAg9BlB,aAAU,MAh9BQ;AAg9BA,aAAU,MAh9BV;AAi9BlB,WAAQ,MAj9BU;AAi9BF,YAAS,MAj9BP;AAk9BlB,sBAAmB,KAl9BD;AAk9BQ,kBAAe,KAl9BvB;AAm9BlB,YAAS,IAn9BS;AAm9BH,UAAO,MAn9BJ;AAo9BlB,WAAQ,MAp9BU;AAo9BF,aAAU,MAp9BR;AAq9BlB,WAAQ,MAr9BU;AAq9BF,cAAW,MAr9BT;AAs9BlB,cAAW,MAt9BO;AAs9BC,YAAS,MAt9BV;AAu9BlB,YAAS,MAv9BS;AAu9BD,cAAW,MAv9BV;AAw9BlB,cAAW,MAx9BO;AAw9BC,aAAU,MAx9BX;AAy9BlB,eAAY,MAz9BM;AAy9BE,gBAAa,MAz9Bf;AA09BlB,gBAAa,MA19BK;AA09BG,iBAAc,MA19BjB;AA29BlB,aAAU,MA39BQ;AA29BA,aAAU,MA39BV;AA49BlB,aAAU,MA59BQ;AA49BA,WAAQ,MA59BR;AA69BlB,iBAAc,MA79BI;AA69BI,kBAAe,MA79BnB;AA89BlB,aAAU,MA99BQ;AA89BA,kBAAe,MA99Bf;AA+9BlB,eAAY,MA/9BM;AA+9BE,eAAY,MA/9Bd;AAg+BlB,cAAW,MAh+BO;AAg+BC,UAAO,MAh+BR;AAi+BlB,WAAQ,MAj+BU;AAi+BF,UAAO,IAj+BL;AAk+BlB,WAAQ,IAl+BU;AAk+BJ,UAAO,IAl+BH;AAm+BlB,WAAQ,IAn+BU;AAm+BJ,UAAO,IAn+BH;AAo+BlB,WAAQ,IAp+BU;AAo+BJ,UAAO,MAp+BH;AAq+BlB,WAAQ,MAr+BU;AAq+BF,aAAU,MAr+BR;AAs+BlB,cAAW,MAt+BO;AAs+BC,WAAQ,MAt+BT;AAu+BlB,cAAW,MAv+BO;AAu+BC,cAAW,MAv+BZ;AAw+BlB,cAAW,MAx+BO;AAw+BC,cAAW,MAx+BZ;AAy+BlB,cAAW,MAz+BO;AAy+BC,YAAS,MAz+BV;AA0+BlB,YAAS,MA1+BS;AA0+BD,cAAW,MA1+BV;AA2+BlB,aAAU,MA3+BQ;AA2+BA,eAAY,MA3+BZ;AA4+BlB,gBAAa,MA5+BK;AA4+BG,gBAAa,MA5+BhB;AA6+BlB,iBAAc,MA7+BI;AA6+BI,aAAU,MA7+Bd;AA8+BlB,aAAU,MA9+BQ;AA8+BA,aAAU,MA9+BV;AA++BlB,YAAS,MA/+BS;AA++BD,aAAU,MA/+BT;AAg/BlB,YAAS,MAh/BS;AAg/BD,cAAW,MAh/BV;AAi/BlB,aAAU,MAj/BQ;AAi/BA,WAAQ,IAj/BR;AAk/BlB,YAAS,IAl/BS;AAk/BH,aAAU,MAl/BP;AAm/BlB,UAAO,KAn/BW;AAm/BJ,WAAQ,MAn/BJ;AAo/BlB,aAAU,KAp/BQ;AAo/BD,aAAU,KAp/BT;AAq/BlB,UAAO,KAr/BW;AAq/BJ,WAAQ,MAr/BJ;AAs/BlB,aAAU,MAt/BQ;AAs/BA,UAAO,CAAC,MAAD,EAAQ,MAAR,CAt/BP;AAu/BlB,aAAU,MAv/BQ;AAu/BA,gBAAa,MAv/Bb;AAw/BlB,YAAS,KAx/BS;AAw/BF,eAAY,KAx/BV;AAy/BlB,aAAU,KAz/BQ;AAy/BD,kBAAe,MAz/Bd;AA0/BlB,eAAY,MA1/BM;AA0/BE,aAAU,MA1/BZ;AA2/BlB,YAAS,MA3/BS;AA2/BD,aAAU,MA3/BT;AA4/BlB,WAAQ,IA5/BU;AA4/BJ,YAAS,IA5/BL;AA6/BlB,YAAS,KA7/BS;AA6/BF,WAAQ,IA7/BN;AA8/BlB,YAAS,IA9/BS;AA8/BH,aAAU,MA9/BP;AA+/BlB,eAAY,MA//BM;AA+/BE,aAAU,MA//BZ;AAggClB,WAAQ,MAhgCU;AAggCF,WAAQ,MAhgCN;AAigClB,UAAO,MAjgCW;AAigCH,aAAU,MAjgCP;AAkgClB,aAAU,MAlgCQ;AAkgCA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAlgCR;AAmgClB,cAAW,MAngCO;AAmgCC,WAAQ,MAngCT;AAogClB,aAAU,MApgCQ;AAogCA,YAAS,MApgCT;AAqgClB,eAAY,MArgCM;AAqgCE,mBAAgB,MArgClB;AAsgClB,mBAAgB,MAtgCE;AAsgCM,qBAAkB,MAtgCxB;AAugClB,gBAAa,MAvgCK;AAugCG,oBAAiB,MAvgCpB;AAwgClB,sBAAmB,MAxgCD;AAwgCS,aAAU,MAxgCnB;AAygClB,WAAQ,MAzgCU;AAygCF,eAAY,MAzgCV;AA0gClB,cAAW,MA1gCO;AA0gCC,YAAS,MA1gCV;AA2gClB,cAAW,MA3gCO;AA2gCC,eAAY,MA3gCb;AA4gClB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA5gCU;AA4gCO,WAAQ,KA5gCf;AA6gClB,YAAS,KA7gCS;AA6gCF,aAAU,KA7gCR;AA8gClB,YAAS,MA9gCS;AA8gCD,uBAAoB,MA9gCnB;AA+gClB,wBAAqB,MA/gCH;AA+gCW,WAAQ,MA/gCnB;AAghClB,WAAQ,MAhhCU;AAghCF,YAAS,IAhhCP;AAihClB,aAAU,IAjhCQ;AAihCF,WAAQ,MAjhCN;AAkhClB,YAAS,KAlhCS;AAkhCF,aAAU,KAlhCR;AAmhClB,WAAQ,IAnhCU;AAmhCJ,YAAS,IAnhCL;AAohClB,UAAO,KAphCW;AAohCJ,YAAS,MAphCL;AAqhClB,aAAU,KArhCQ;AAqhCD,YAAS,MArhCR;AAshClB,aAAU,MAthCQ;AAshCA,UAAO,CAAC,MAAD,EAAQ,MAAR,CAthCP;AAuhClB,YAAS,IAvhCS;AAuhCH,aAAU,IAvhCP;AAwhClB,YAAS,MAxhCS;AAwhCD,YAAS,MAxhCR;AAyhClB,YAAS,MAzhCS;AAyhCD,aAAU,MAzhCT;AA0hClB,eAAY,MA1hCM;AA0hCE,aAAU,MA1hCZ;AA2hClB,YAAS,MA3hCS;AA2hCD,YAAS,KA3hCR;AA4hClB,SAAM,IA5hCY;AA4hCN,UAAO,IA5hCD;AA6hClB,YAAS,KA7hCS;AA6hCF,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7hCN;AA8hClB,cAAW,MA9hCO;AA8hCC,kBAAe,MA9hChB;AA+hClB,oBAAiB,MA/hCC;AA+hCO,qBAAkB,MA/hCzB;AAgiClB,YAAS,MAhiCS;AAgiCD,WAAQ,KAhiCP;AAiiClB,YAAS,KAjiCS;AAiiCF,cAAW,KAjiCT;AAkiClB,iBAAc,MAliCI;AAkiCI,aAAU,MAliCd;AAmiClB,eAAY,MAniCM;AAmiCE,aAAU,MAniCZ;AAoiClB,YAAS,KApiCS;AAoiCF,YAAS,MApiCP;AAqiClB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAriCU;AAqiCO,YAAS,MAriChB;AAsiClB,aAAU,KAtiCQ;AAsiCD,WAAQ,MAtiCP;AAuiClB,YAAS,MAviCS;AAuiCD,YAAS,MAviCR;AAwiClB,UAAO,IAxiCW;AAwiCL,WAAQ,IAxiCH;AAyiClB,cAAW,MAziCO;AAyiCC,WAAQ,MAziCT;AA0iClB,WAAQ,MA1iCU;AA0iCF,YAAS,MA1iCP;AA2iClB,YAAS,MA3iCS;AA2iCD,aAAU,MA3iCT;AA4iClB,iBAAc,KA5iCI;AA4iCG,eAAY,KA5iCf;AA6iClB,iBAAc,MA7iCI;AA6iCI,aAAU,KA7iCd;AA8iClB,YAAS,KA9iCS;AA8iCF,gBAAa,MA9iCX;AA+iClB,WAAQ,MA/iCU;AA+iCF,aAAU,KA/iCR;AAgjClB,eAAY,KAhjCM;AAgjCC,mBAAgB,CAAC,MAAD,EAAQ,MAAR,CAhjCjB;AAijClB,oBAAiB,CAAC,MAAD,EAAQ,MAAR,CAjjCC;AAijCgB,mBAAgB,CAAC,MAAD,EAAQ,MAAR,CAjjChC;AAkjClB,oBAAiB,CAAC,MAAD,EAAQ,MAAR,CAljCC;AAkjCgB,eAAY,KAljC5B;AAmjClB,sBAAmB,MAnjCD;AAmjCS,uBAAoB,MAnjC7B;AAojClB,UAAO,KApjCW;AAojCJ,YAAS,MApjCL;AAqjClB,UAAO,MArjCW;AAqjCH,aAAU,MArjCP;AAsjClB,YAAS,MAtjCS;AAsjCD,aAAU,MAtjCT;AAujClB,aAAU,IAvjCQ;AAujCF,WAAQ,IAvjCN;AAwjClB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAxjCW;AAwjCM,YAAS,MAxjCf;AAyjClB,YAAS,CAAC,MAAD,EAAQ,MAAR,CAzjCS;AAyjCQ,YAAS,CAAC,MAAD,EAAQ,MAAR,CAzjCjB;AA0jClB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA1jCU;AA0jCO,YAAS,MA1jChB;AA2jClB,YAAS,MA3jCS;AA2jCD,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3jCP;AA4jClB,aAAU,CAAC,MAAD,EAAQ,MAAR,CA5jCQ;AA4jCS,aAAU,CAAC,MAAD,EAAQ,MAAR,CA5jCnB;AA6jClB,aAAU,CAAC,MAAD,EAAQ,MAAR,CA7jCQ;AA6jCS,aAAU,CAAC,MAAD,EAAQ,MAAR,CA7jCnB;AA8jClB,cAAW,MA9jCO;AA8jCC,YAAS,KA9jCV;AA+jClB,aAAU,MA/jCQ;AA+jCA,YAAS,MA/jCT;AAgkClB,aAAU,MAhkCQ;AAgkCA,aAAU,MAhkCV;AAikClB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAjkCW;AAikCM,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAjkCd;AAkkClB,SAAM,MAlkCY;AAkkCJ,SAAM,MAlkCF;AAmkClB,aAAU,MAnkCQ;AAmkCA,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAnkCR;AAokClB,WAAQ,MApkCU;AAokCF,YAAS,MApkCP;AAqkClB,WAAQ,MArkCU;AAqkCF,YAAS,MArkCP;AAskClB,UAAO,CAAC,MAAD,EAAQ,MAAR,CAtkCW;AAskCM,YAAS,MAtkCf;AAukClB,YAAS,MAvkCS;AAukCD,SAAM,KAvkCL;AAwkClB,YAAS,MAxkCS;AAwkCD,YAAS,MAxkCR;AAykClB,WAAQ,MAzkCU;AAykCF,WAAQ,MAzkCN;AA0kClB,YAAS,MA1kCS;AA0kCD,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA1kCP;AA2kClB,aAAU,MA3kCQ;AA2kCA,aAAU,MA3kCV;AA4kClB,YAAS,MA5kCS;AA4kCD,YAAS,MA5kCR;AA6kClB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA7kCU;AA6kCO,aAAU,MA7kCjB;AA8kClB,aAAU,MA9kCQ;AA8kCA,YAAS,MA9kCT;AA+kClB,WAAQ,MA/kCU;AA+kCF,aAAU,MA/kCR;AAglClB,YAAS,IAhlCS;AAglCH,aAAU,IAhlCP;AAilClB,WAAQ,KAjlCU;AAilCH,YAAS,KAjlCN;AAklClB,UAAO,KAllCW;AAklCJ,SAAM,IAllCF;AAmlClB,UAAO,IAnlCW;AAmlCL,UAAO,CAAC,MAAD,EAAQ,MAAR,CAnlCF;AAolClB,WAAQ,KAplCU;AAolCH,WAAQ,CAAC,MAAD,EAAQ,MAAR,CAplCL;AAqlClB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CArlCU;AAqlCO,WAAQ,KArlCf;AAslClB,UAAO,IAtlCW;AAslCL,WAAQ,IAtlCH;AAulClB,aAAU,KAvlCQ;AAulCD,aAAU,KAvlCT;AAwlClB,UAAO,KAxlCW;AAwlCJ,WAAQ,KAxlCJ;AAylClB,aAAU,MAzlCQ;AAylCA,WAAQ,KAzlCR;AA0lClB,UAAO,CAAC,MAAD,EAAQ,MAAR,CA1lCW;AA0lCM,WAAQ,KA1lCd;AA2lClB,cAAW,MA3lCO;AA2lCC,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA3lCT;AA4lClB,WAAQ,CAAC,MAAD,EAAQ,MAAR,CA5lCU;AA4lCO,UAAO,MA5lCd;AA6lClB,WAAQ;AA7lCU,CAApB;AA+lCA;AACA;AACA;AACA;AACA;;AACA,IAAImI,YAAY,GAAG,2weAAnB;AAEA,IAAIC,mBAAmB,GAAG,EAA1B,C,CAEA;AAEA;AACA;;AACA,IAAIC,eAAe,GAAG,iBAAtB;AACA,IAAIC,kBAAkB,GAAG,iBAAzB;AACA,IAAIC,eAAe,GAAG,wBAAtB;AACA,IAAIC,OAAO,GAAG,4BAAd;AACA,IAAIC,QAAQ,GAAG,6BAAf;AAEA,IAAIC,SAAS,GAAG,uBAAhB;AACA,IAAIC,QAAQ,GAAG,uBAAf;AACA,IAAIC,OAAO,GAAG,sBAAd;AACA,IAAIC,SAAS,GAAG,qBAAhB,C,CACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,4BAAhB;AACA,IAAIC,UAAU,GAAG,oIAAjB;AAEA,IAAIC,KAAK,GAAG,yBAAZ;AACA,IAAIC,QAAQ,GAAG,0BAAf,C,CAA2C;;AAC3C,IAAIC,WAAW,GAAG,6BAAlB,C,CAAiD;;AACjD,IAAIC,SAAS,GAAG,0BAAhB;AACA,IAAIC,QAAQ,GAAG,OAAf;AAEA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,MAAIC,SAAS,GAAC,KAAd;;AACA,MAAID,GAAG,CAACE,MAAJ,GAAaD,SAAjB,EAA4B;AAC1B,WAAOE,MAAM,CAACC,YAAP,CAAoB7K,KAApB,CAA0B4K,MAA1B,EAAkCH,GAAlC,CAAP;AACD,GAJmB,CAKpB;;;AACA,MAAIK,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACE,MAAxB,EAAgCI,CAAC,IAAIL,SAArC,EAAgD;AAC9CI,IAAAA,MAAM,IAAIF,MAAM,CAACC,YAAP,CAAoB7K,KAApB,CAA0B4K,MAA1B,EAAkCH,GAAG,CAACO,KAAJ,CAAUD,CAAV,EAAaA,CAAC,GAACL,SAAf,CAAlC,CAAV;AACD;;AACD,SAAOI,MAAP;AACD;;AAED,SAASG,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,MAAIJ,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACG,CAAC,CAACP,MAAlB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYG,CAAC,CAACC,UAAF,CAAaJ,CAAb,CAAZ;AACD;;AACD,SAAOD,MAAP;AACD,C,CAED;AACA;AACA;;;AACA,SAASM,GAAT,CAAaC,GAAb,EAAkBC,GAAlB,EAAuB;AACrB,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACA,WAAOD,GAAG,CAACE,YAAJ,KAAqB9L,SAAS,CAACyB,IAA/B,IACLmK,GAAG,CAACG,SAAJ,KAAkBF,GADpB;AAED;;AACD,MAAIG,QAAQ,GAAGH,GAAG,CAACD,GAAG,CAACE,YAAL,CAAlB;AACA,SAAOE,QAAQ,IAAIA,QAAQ,CAACJ,GAAG,CAACG,SAAL,CAA3B;AACD;;AAED,SAASE,4BAAT,CAAsCC,CAAtC,EAAyC;AACvC,SAAOP,GAAG,CAACO,CAAD,EAAIpJ,6BAAJ,CAAV;AACD;;AAED,SAASqJ,sBAAT,CAAgCD,CAAhC,EAAmC;AACjC,MAAIP,GAAG,CAACO,CAAD,EAAI9I,uBAAJ,CAAP,EAAqC,OAAO,IAAP;;AACrC,MAAI8I,CAAC,CAACJ,YAAF,KAAmB9L,SAAS,CAAC4B,MAA7B,IACFsK,CAAC,CAACH,SAAF,KAAgB,gBADlB,EACoC;AAClC,QAAIK,QAAQ,GAAGF,CAAC,CAACG,YAAF,CAAe,UAAf,CAAf;AACA,QAAID,QAAJ,EAAcA,QAAQ,GAAGA,QAAQ,CAACE,WAAT,EAAX;AACd,QAAIF,QAAQ,KAAK,WAAb,IACFA,QAAQ,KAAK,uBADf,EAEE,OAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACD;;AAED,SAASG,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,MAAIA,IAAI,IAAIjF,qBAAZ,EACE,OAAOA,qBAAqB,CAACiF,IAAD,CAA5B,CADF,KAGE,OAAOA,IAAP;AACH;;AAED,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,OAAI,IAAIpB,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGQ,KAAK,CAACxB,MAAzB,EAAiCI,CAAC,GAAGY,CAArC,EAAwCZ,CAAC,EAAzC,EAA6C;AAC3C,QAAIoB,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,KAAe1H,kBAAnB,EAAuC;AACrC8I,MAAAA,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,IAAc1H,kBAAkB,CAAC8I,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,CAAD,CAAhC;AACD;AACF;AACF;;AAED,SAASqB,sBAAT,CAAgCD,KAAhC,EAAuC;AACrC,OAAI,IAAIpB,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGQ,KAAK,CAACxB,MAAzB,EAAiCI,CAAC,GAAGY,CAArC,EAAwCZ,CAAC,EAAzC,EAA6C;AAC3C,QAAIoB,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,MAAgB,eAApB,EAAqC;AACnCoB,MAAAA,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,IAAc,eAAd;AACA;AACD;AACF;AACF;;AAED,SAASsB,uBAAT,CAAiCF,KAAjC,EAAwC;AACtC,OAAI,IAAIpB,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGQ,KAAK,CAACxB,MAAzB,EAAiCI,CAAC,GAAGY,CAArC,EAAwCZ,CAAC,EAAzC,EAA6C;AAC3C,QAAIoB,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,KAAe9H,iBAAnB,EAAsC;AACpC;AACA;AACAkJ,MAAAA,KAAK,CAACpB,CAAD,CAAL,CAAS5K,IAAT,CAAc8C,iBAAiB,CAACkJ,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,CAAD,CAA/B;AACD;AACF;AACF,C,CAED;AACA;AACA;;;AACA,SAASuB,kBAAT,CAA4BH,KAA5B,EAAmCd,GAAnC,EAAwC;AACtC,OAAI,IAAIN,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGQ,KAAK,CAACxB,MAAzB,EAAiCI,CAAC,GAAGY,CAArC,EAAwCZ,CAAC,EAAzC,EAA6C;AAC3C,QAAIkB,IAAI,GAAGE,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,CAAX;AAAA,QAAwBwB,KAAK,GAAGJ,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,CAAhC;AACA,QAAIM,GAAG,CAACmB,YAAJ,CAAiBP,IAAjB,CAAJ,EAA4B;;AAC5BZ,IAAAA,GAAG,CAACoB,aAAJ,CAAkBR,IAAlB,EAAwBM,KAAxB;AACD;AACF;AAED;AACA;AACA;;;AACAnN,UAAU,CAACsN,YAAX,GAA0B,SAASA,YAAT,GAAwB;AAChD,OAAK9M,QAAL,GAAgB,EAAhB;AACA,OAAK+M,GAAL,GAAW,IAAX,CAFgD,CAE/B;AAClB,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAvN,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCI,IAAlC,GAAyC,UAASyM,CAAT,EAAY;AACnD,OAAKhN,QAAL,CAAcO,IAAd,CAAmByM,CAAnB;AACA,OAAKD,GAAL,GAAWC,CAAX;AACD,CAHD;;AAKAxN,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkC8M,GAAlC,GAAwC,UAASD,CAAT,EAAY;AAClD,OAAKhN,QAAL,CAAciN,GAAd;AACA,OAAKF,GAAL,GAAW,KAAK/M,QAAL,CAAc,KAAKA,QAAL,CAAc+K,MAAd,GAAqB,CAAnC,CAAX;AACD,CAHD,C,CAKA;AACA;;;AACAvL,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkC+M,MAAlC,GAA2C,UAASC,GAAT,EAAc;AACvD,OAAI,IAAIhC,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,GAAG,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,QAAI6B,CAAC,GAAG,KAAKhN,QAAL,CAAcmL,CAAd,CAAR;AACA,QAAIK,GAAG,CAACwB,CAAD,EAAIG,GAAJ,CAAP,EAAiB;AAClB;;AACD,OAAKnN,QAAL,CAAc+K,MAAd,GAAuBI,CAAvB;AACA,OAAK4B,GAAL,GAAW,KAAK/M,QAAL,CAAcmL,CAAC,GAAC,CAAhB,CAAX;AACD,CAPD,C,CASA;AACA;;;AACA3L,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCiN,cAAlC,GAAmD,UAASC,IAAT,EAAe;AAChE,OAAI,IAAIlC,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,GAAG,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,QAAI,KAAKnL,QAAL,CAAcmL,CAAd,aAA4BkC,IAAhC,EAAsC;AACvC;;AACD,OAAKrN,QAAL,CAAc+K,MAAd,GAAuBI,CAAvB;AACA,OAAK4B,GAAL,GAAW,KAAK/M,QAAL,CAAcmL,CAAC,GAAC,CAAhB,CAAX;AACD,CAND,C,CAQA;AACA;AACA;;;AACA3L,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCmN,UAAlC,GAA+C,UAASN,CAAT,EAAY;AACzD,OAAI,IAAI7B,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,GAAG,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,QAAI,KAAKnL,QAAL,CAAcmL,CAAd,MAAqB6B,CAAzB,EAA4B;AAC7B;;AACD,OAAKhN,QAAL,CAAc+K,MAAd,GAAuBI,CAAvB;AACA,OAAK4B,GAAL,GAAW,KAAK/M,QAAL,CAAcmL,CAAC,GAAC,CAAhB,CAAX;AACD,CAND,C,CAQA;AACA;;;AACA3L,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCoN,aAAlC,GAAkD,UAASP,CAAT,EAAY;AAC5D,MAAI,KAAKD,GAAL,KAAaC,CAAjB,EAAoB,KAAKC,GAAL,GAApB,KACK;AACH,QAAIO,GAAG,GAAG,KAAKxN,QAAL,CAAcyN,WAAd,CAA0BT,CAA1B,CAAV;AACA,QAAIQ,GAAG,KAAK,CAAC,CAAb,EACE,KAAKxN,QAAL,CAAc0N,MAAd,CAAqBF,GAArB,EAA0B,CAA1B;AACH;AACF,CAPD;;AASAhO,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCwN,cAAlC,GAAmD,UAASjC,GAAT,EAAc;AAC/D;AACA,OAAI,IAAIP,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,GAAG,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,QAAIK,GAAG,CAAC,KAAKxL,QAAL,CAAcmL,CAAd,CAAD,EAAmBO,GAAnB,CAAP,EAAgC;AACjC;;AACD,OAAK1L,QAAL,CAAc+K,MAAd,GAAuBI,CAAC,GAAC,CAAzB;AACA,OAAK4B,GAAL,GAAW,KAAK/M,QAAL,CAAcmL,CAAd,CAAX;AACD,CAPD;;AASA3L,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCyN,QAAlC,GAA6C,UAAST,GAAT,EAAc;AACzD,SAAO,KAAKU,eAAL,CAAqBV,GAArB,EAA0B/L,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B,CAAP;AACD,CAFD;;AAIA7B,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkC0N,eAAlC,GAAoD,UAASV,GAAT,EAAczB,GAAd,EAAmB;AACrE,OAAI,IAAIP,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/C,QAAIM,GAAG,GAAG,KAAKzL,QAAL,CAAcmL,CAAd,CAAV;AACA,QAAIK,GAAG,CAACC,GAAD,EAAM0B,GAAN,CAAP,EAAmB,OAAO,IAAP;AACnB,QAAI3B,GAAG,CAACC,GAAD,EAAMC,GAAN,CAAP,EAAmB,OAAO,KAAP;AACpB;;AACD,SAAO,KAAP;AACD,CAPD,C,CASA;;;AACAlM,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkC2N,sBAAlC,GAA2D,UAASC,MAAT,EAAiBrC,GAAjB,EAAsB;AAC/E,OAAI,IAAIP,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/C,QAAIM,GAAG,GAAG,KAAKzL,QAAL,CAAcmL,CAAd,CAAV;AACA,QAAIM,GAAG,KAAKsC,MAAZ,EAAoB,OAAO,IAAP;AACpB,QAAIvC,GAAG,CAACC,GAAD,EAAMC,GAAN,CAAP,EAAmB,OAAO,KAAP;AACpB;;AACD,SAAO,KAAP;AACD,CAPD,C,CASA;;;AACAlM,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkC6N,0BAAlC,GAA+D,UAASD,MAAT,EAAiBrC,GAAjB,EAAsB;AACnF,OAAI,IAAIP,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/C,QAAIM,GAAG,GAAG,KAAKzL,QAAL,CAAcmL,CAAd,CAAV;AACA,QAAIM,GAAG,YAAYsC,MAAnB,EAA2B,OAAO,IAAP;AAC3B,QAAIvC,GAAG,CAACC,GAAD,EAAMC,GAAN,CAAP,EAAmB,OAAO,KAAP;AACpB;;AACD,SAAO,KAAP;AACD,CAPD;;AASAlM,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkC8N,OAAlC,GAA4C,UAASd,GAAT,EAAc;AACxD,SAAO,KAAKU,eAAL,CAAqBV,GAArB,EAA0BhL,UAA1B,CAAP;AACD,CAFD;;AAIA3C,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkC+N,cAAlC,GAAmD,UAASlB,CAAT,EAAY;AAC7D,SAAO,KAAKc,sBAAL,CAA4Bd,CAA5B,EAA+B7K,UAA/B,CAAP;AACD,CAFD;;AAIA3C,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCgO,kBAAlC,GAAuD,UAASd,IAAT,EAAe;AACpE,SAAO,KAAKW,0BAAL,CAAgCX,IAAhC,EAAsClL,UAAtC,CAAP;AACD,CAFD;;AAIA3C,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCiO,aAAlC,GAAkD,UAASjB,GAAT,EAAc;AAC9D,SAAO,KAAKU,eAAL,CAAqBV,GAArB,EAA0B5K,gBAA1B,CAAP;AACD,CAFD;;AAIA/C,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCkO,eAAlC,GAAoD,UAASlB,GAAT,EAAc;AAChE,SAAO,KAAKU,eAAL,CAAqBV,GAArB,EAA0B/K,kBAA1B,CAAP;AACD,CAFD;;AAIA5C,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCmO,YAAlC,GAAiD,UAASnB,GAAT,EAAc;AAC7D,SAAO,KAAKU,eAAL,CAAqBV,GAArB,EAA0B1K,eAA1B,CAAP;AACD,CAFD;;AAIAjD,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCoO,aAAlC,GAAkD,UAASpB,GAAT,EAAc;AAC9D;AACA;AACA,OAAI,IAAIhC,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/C,QAAIM,GAAG,GAAG,KAAKzL,QAAL,CAAcmL,CAAd,CAAV;AACA,QAAIM,GAAG,CAACE,YAAJ,KAAqB9L,SAAS,CAACyB,IAAnC,EAAyC,OAAO,KAAP;AACzC,QAAIkN,SAAS,GAAG/C,GAAG,CAACG,SAApB;AACA,QAAI4C,SAAS,KAAKrB,GAAlB,EAAuB,OAAO,IAAP;AACvB,QAAIqB,SAAS,KAAK,UAAd,IAA4BA,SAAS,KAAK,QAA9C,EACE,OAAO,KAAP;AACH;;AACD,SAAO,KAAP;AACD,CAZD;;AAcAhP,UAAU,CAACsN,YAAX,CAAwB3M,SAAxB,CAAkCsO,sBAAlC,GAA2D,UAASC,MAAT,EAAiBC,QAAjB,EAA2B;AACpF,MAAIC,SAAS,GAAGD,QAAQ,GAAG7M,yBAAH,GAA+BD,iBAAvD;;AACA,OAAI,IAAIsJ,CAAC,GAAG,KAAKnL,QAAL,CAAc+K,MAAd,GAAqB,CAAjC,EAAoCI,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/C,QAAI6B,CAAC,GAAG,KAAKhN,QAAL,CAAcmL,CAAd,CAAR;AACA,QAAIuD,MAAM,IAAIlD,GAAG,CAACwB,CAAD,EAAI0B,MAAJ,CAAjB,EAA8B;AAC9B,QAAI,CAAClD,GAAG,CAAC,KAAKxL,QAAL,CAAcmL,CAAd,CAAD,EAAmByD,SAAnB,CAAR,EAAuC;AACxC;;AAED,OAAK5O,QAAL,CAAc+K,MAAd,GAAuBI,CAAC,GAAC,CAAzB;AACA,OAAK4B,GAAL,GAAW,KAAK/M,QAAL,CAAcmL,CAAd,CAAX;AACD,CAVD;AAYA;AACA;AACA;;;AACA3L,UAAU,CAACqP,wBAAX,GAAsC,SAASC,GAAT,GAAe;AACnD,OAAKC,IAAL,GAAY,EAAZ,CADmD,CACnC;;AAChB,OAAKxC,KAAL,GAAa,EAAb,CAFmD,CAElC;AAClB,CAHD;;AAKA/M,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8C6O,MAA9C,GAAuD;AAAEpD,EAAAA,SAAS,EAAE;AAAb,CAAvD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApM,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8C8O,YAA9C,GAA6D,YAAW;AACtE,OAAKF,IAAL,CAAUxO,IAAV,CAAe,KAAKyO,MAApB;AACA,OAAKzC,KAAL,CAAWhM,IAAX,CAAgB,KAAKyO,MAArB;AACD,CAHD;;AAKAxP,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8CI,IAA9C,GAAqD,UAASkL,GAAT,EAAcc,KAAd,EAAqB;AACxE;AACA;AACA,MAAI2C,KAAK,GAAG,CAAZ;;AACA,OAAI,IAAI/D,CAAC,GAAG,KAAK4D,IAAL,CAAUhE,MAAV,GAAiB,CAA7B,EAAgCI,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,QAAI,KAAK4D,IAAL,CAAU5D,CAAV,MAAiB,KAAK6D,MAA1B,EAAkC,MADS,CAE3C;;AACA,QAAIG,KAAK,CAAC1D,GAAD,EAAM,KAAKsD,IAAL,CAAU5D,CAAV,CAAN,EAAoB,KAAKoB,KAAL,CAAWpB,CAAX,CAApB,CAAT,EAA6C;AAC3C+D,MAAAA,KAAK;;AACL,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,aAAKH,IAAL,CAAUrB,MAAV,CAAiBvC,CAAjB,EAAoB,CAApB;AACA,aAAKoB,KAAL,CAAWmB,MAAX,CAAkBvC,CAAlB,EAAqB,CAArB;AACA;AACD;AACF;AACF,GAfuE,CAkBxE;;;AACA,OAAK4D,IAAL,CAAUxO,IAAV,CAAekL,GAAf,EAnBwE,CAqBxE;;AACA,MAAI2D,QAAQ,GAAG,EAAf;;AACA,OAAI,IAAIC,EAAE,GAAG,CAAb,EAAgBA,EAAE,GAAG9C,KAAK,CAACxB,MAA3B,EAAmCsE,EAAE,EAArC,EAAyC;AACvCD,IAAAA,QAAQ,CAACC,EAAD,CAAR,GAAe9C,KAAK,CAAC8C,EAAD,CAApB;AACD;;AAED,OAAK9C,KAAL,CAAWhM,IAAX,CAAgB6O,QAAhB,EA3BwE,CA6BxE;AACA;AACA;AACA;AACA;;AACA,WAASD,KAAT,CAAeG,MAAf,EAAuBC,MAAvB,EAA+BC,QAA/B,EAAyC;AACvC,QAAIF,MAAM,CAAC1D,SAAP,KAAqB2D,MAAM,CAAC3D,SAAhC,EAA2C,OAAO,KAAP;AAC3C,QAAI0D,MAAM,CAACG,SAAP,KAAqBD,QAAQ,CAACzE,MAAlC,EAA0C,OAAO,KAAP;;AAC1C,SAAI,IAAII,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGyD,QAAQ,CAACzE,MAA5B,EAAoCI,CAAC,GAAGY,CAAxC,EAA2CZ,CAAC,EAA5C,EAAgD;AAC9C,UAAIuE,OAAO,GAAGF,QAAQ,CAACrE,CAAD,CAAR,CAAY,CAAZ,CAAd;AACA,UAAIwE,MAAM,GAAGH,QAAQ,CAACrE,CAAD,CAAR,CAAY,CAAZ,CAAb;AACA,UAAI,CAACmE,MAAM,CAAC1C,YAAP,CAAoB8C,OAApB,CAAL,EAAmC,OAAO,KAAP;AACnC,UAAIJ,MAAM,CAACpD,YAAP,CAAoBwD,OAApB,MAAiCC,MAArC,EAA6C,OAAO,KAAP;AAC9C;;AACD,WAAO,IAAP;AACD;AACF,CA7CD;;AA+CAnQ,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8CyP,aAA9C,GAA8D,YAAW;AACvE,OAAI,IAAIzE,CAAC,GAAG,KAAK4D,IAAL,CAAUhE,MAAV,GAAiB,CAA7B,EAAgCI,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,QAAI,KAAK4D,IAAL,CAAU5D,CAAV,MAAiB,KAAK6D,MAA1B,EAAkC;AACnC;;AACD,MAAI7D,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,CAAJ;AACX,OAAK4D,IAAL,CAAUhE,MAAV,GAAmBI,CAAnB;AACA,OAAKoB,KAAL,CAAWxB,MAAX,GAAoBI,CAApB;AACD,CAPD,C,CASA;AACA;AACA;;;AACA3L,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8C0P,gBAA9C,GAAiE,UAAS1C,GAAT,EAAc;AAC7E,OAAI,IAAIhC,CAAC,GAAG,KAAK4D,IAAL,CAAUhE,MAAV,GAAiB,CAA7B,EAAgCI,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,QAAIM,GAAG,GAAG,KAAKsD,IAAL,CAAU5D,CAAV,CAAV;AACA,QAAIM,GAAG,KAAK,KAAKuD,MAAjB,EAAyB;AACzB,QAAIvD,GAAG,CAACG,SAAJ,KAAkBuB,GAAtB,EAA2B,OAAO1B,GAAP;AAC5B;;AACD,SAAO,IAAP;AACD,CAPD;;AASAjM,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8C2P,OAA9C,GAAwD,UAAS9C,CAAT,EAAY;AAClE,SAAO,KAAK+B,IAAL,CAAUtB,WAAV,CAAsBT,CAAtB,CAAP;AACD,CAFD,C,CAIA;AACA;;;AACAxN,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8C4P,MAA9C,GAAuD,UAAS/C,CAAT,EAAY;AACjE,MAAIQ,GAAG,GAAG,KAAKuB,IAAL,CAAUtB,WAAV,CAAsBT,CAAtB,CAAV;;AACA,MAAIQ,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,SAAKuB,IAAL,CAAUrB,MAAV,CAAiBF,GAAjB,EAAsB,CAAtB;AACA,SAAKjB,KAAL,CAAWmB,MAAX,CAAkBF,GAAlB,EAAuB,CAAvB;AACD;AACF,CAND,C,CAQA;AACA;;;AACAhO,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8C6P,OAA9C,GAAwD,UAASC,CAAT,EAAYC,CAAZ,EAAe3D,KAAf,EAAsB;AAC5E,MAAIiB,GAAG,GAAG,KAAKuB,IAAL,CAAUtB,WAAV,CAAsBwC,CAAtB,CAAV;;AACA,MAAIzC,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,SAAKuB,IAAL,CAAUvB,GAAV,IAAiB0C,CAAjB;AACA,SAAK3D,KAAL,CAAWiB,GAAX,IAAkBjB,KAAlB;AACD;AACF,CAND,C,CAQA;AACA;AACA;;;AACA/M,UAAU,CAACqP,wBAAX,CAAoC1O,SAApC,CAA8CgQ,WAA9C,GAA4D,UAASF,CAAT,EAAWC,CAAX,EAAc;AACxE,MAAI1C,GAAG,GAAG,KAAKuB,IAAL,CAAUtB,WAAV,CAAsBwC,CAAtB,CAAV;;AACA,MAAIzC,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,SAAKuB,IAAL,CAAUrB,MAAV,CAAiBF,GAAjB,EAAsB,CAAtB,EAAyB0C,CAAzB;AACA,SAAK3D,KAAL,CAAWmB,MAAX,CAAkBF,GAAlB,EAAuB,CAAvB,EAA0B0C,CAA1B;AACD;AACF,CAND;AAWA;AACA;AACA;AACA;AACA;;;AACA,SAAS1Q,UAAT,CAAoB4Q,OAApB,EAA6BC,eAA7B,EAA8CC,OAA9C,EAAuD;AACrD;AACF;AACA;AACE;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,QAAQ,GAAG,CAAf,CANqD,CAMnC;;AAClB,MAAIC,QAAQ,GAAG,CAAf,CAPqD,CAOnC;;AAClB,MAAIC,cAAc,GAAG,KAArB,CARqD,CAQzB;;AAC5B,MAAIC,oBAAoB,GAAG,KAA3B,CATqD,CASnB;;AAClC,MAAIC,qBAAqB,GAAG,CAA5B;AACA,MAAIC,mBAAmB,GAAG,EAA1B;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,MAAM,GAAG,CAAb,CAdqD,CAcrC;AAGhB;;AACA,MAAIC,SAAS,GAAGC,UAAhB,CAlBqD,CAkBzB;;AAC5B,MAAIC,YAAJ;AACA,MAAIC,wBAAJ;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,WAAW,GAAG,EAAlB,CAtBqD,CAsB/B;;AACtB,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,UAAU,GAAG,KAAjB,CA/BqD,CAiCrD;;AACA,MAAIC,MAAM,GAAGC,YAAb,CAlCqD,CAkC1B;;AAC3B,MAAIC,qBAAqB,GAAG,IAA5B,CAnCqD,CAmCnB;;AAClC,MAAIC,sBAAsB,GAAG,EAA7B,CApCqD,CAoCpB;;AACjC,MAAIC,KAAK,GAAG,IAAI5S,UAAU,CAACsN,YAAf,EAAZ,CArCqD,CAqCV;;AAC3C,MAAIuF,GAAG,GAAG,IAAI7S,UAAU,CAACqP,wBAAf,EAAV,CAtCqD,CAsCA;;AACrD,MAAIyD,QAAQ,GAAIjC,eAAe,KAAGkC,SAAlC,CAvCqD,CAuCP;;AAC9C,MAAIC,oBAAoB,GAAG,IAA3B;AACA,MAAIC,oBAAoB,GAAG,IAA3B;AACA,MAAIC,iBAAiB,GAAG,IAAxB;;AACA,MAAIrC,eAAJ,EAAqB;AACtBqC,IAAAA,iBAAiB,GAAGrC,eAAe,CAACsC,aAAhB,CAA8BC,kBAAlD;AACE;;AACD,MAAItC,OAAO,IAAIA,OAAO,CAACoC,iBAAR,KAA8B,KAA7C,EACEA,iBAAiB,GAAG,KAApB;AACF,MAAIG,WAAW,GAAG,IAAlB;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,kBAAJ;AACA,MAAIC,qBAAJ,CAnDqD,CAmD1B;AAE3B;AACA;;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,eAAe,GAAG,KAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,MAAIC,UAAU,GAAG;AACfC,IAAAA,QAAQ,EAAE,YAAW;AACnB,aAAOC,GAAP;AACD,KAHc;AAKf;AACA;AACAC,IAAAA,mBAAmB,EAAE,YAAW;AAC9B,UAAIC,IAAI,GAAGF,GAAG,CAACG,sBAAJ,EAAX;AACA,UAAIC,IAAI,GAAGJ,GAAG,CAACK,UAAf;;AACA,aAAMD,IAAI,CAACE,aAAL,EAAN,EAA4B;AAC1BJ,QAAAA,IAAI,CAACK,WAAL,CAAiBH,IAAI,CAACC,UAAtB;AACD;;AACD,aAAOH,IAAP;AACD,KAdc;AAgBf;AACA;AACAM,IAAAA,KAAK,EAAE,YAAW;AAChB;AACA9C,MAAAA,MAAM;AACP,KArBc;AAuBf;AACA+C,IAAAA,MAAM,EAAE,YAAW;AACjB;AACA/C,MAAAA,MAAM,GAFW,CAGjB;AACA;;AACA,WAAKgD,KAAL,CAAW,EAAX;AACD,KA9Bc;AAgCf;AACA;AACA;AACA;AACA;AACAA,IAAAA,KAAK,EAAE,UAAS1I,CAAT,EAAY2I,GAAZ,EAAiBC,eAAjB,EAAkC;AACvC,UAAIC,QAAJ,CADuC,CAGvC;AACA;AACA;;AACA,UAAInD,MAAM,GAAG,CAAb,EAAgB;AACdF,QAAAA,SAAS,IAAIxF,CAAb;AACA,eAAO,IAAP,CAFc,CAED;AACd;;AAGD,UAAIsF,qBAAqB,KAAK,CAA9B,EAAiC;AAC/B;AACA,YAAIE,SAAJ,EAAe;AACbxF,UAAAA,CAAC,GAAGwF,SAAS,GAAGxF,CAAhB;AACAwF,UAAAA,SAAS,GAAG,EAAZ;AACD,SAL8B,CAO/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAImD,GAAJ,EAAS;AACP3I,UAAAA,CAAC,IAAI,QAAL;AACAoF,UAAAA,cAAc,GAAG,IAAjB,CAFO,CAEgB;AACxB;;AAEDH,QAAAA,KAAK,GAAGjF,CAAR;AACAkF,QAAAA,QAAQ,GAAGlF,CAAC,CAACP,MAAb;AACA0F,QAAAA,QAAQ,GAAG,CAAX;;AAEA,YAAIM,WAAJ,EAAiB;AACf;AACA;AACAA,UAAAA,WAAW,GAAG,KAAd;AACA,cAAIR,KAAK,CAAChF,UAAN,CAAiB,CAAjB,MAAwB,MAA5B,EAAoCkF,QAAQ,GAAG,CAAX;AACrC;;AAEDG,QAAAA,qBAAqB;AACrBuD,QAAAA,QAAQ,GAAGC,SAAS,CAACF,eAAD,CAApB;AACApD,QAAAA,SAAS,GAAGP,KAAK,CAAC8D,SAAN,CAAgB5D,QAAhB,EAA0BD,QAA1B,CAAZ;AACAI,QAAAA,qBAAqB;AACtB,OAnCD,MAoCK;AACH;AACA;AACAA,QAAAA,qBAAqB,GAHlB,CAKH;;AACAC,QAAAA,mBAAmB,CAACtQ,IAApB,CAAyBgQ,KAAzB,EAAgCC,QAAhC,EAA0CC,QAA1C,EANG,CAQH;;AACAF,QAAAA,KAAK,GAAGjF,CAAR;AACAkF,QAAAA,QAAQ,GAAGlF,CAAC,CAACP,MAAb;AACA0F,QAAAA,QAAQ,GAAG,CAAX,CAXG,CAaH;;AACA2D,QAAAA,SAAS;AACTD,QAAAA,QAAQ,GAAG,KAAX;AAEArD,QAAAA,SAAS,GAAGP,KAAK,CAAC8D,SAAN,CAAgB5D,QAAhB,EAA0BD,QAA1B,CAAZ,CAjBG,CAmBH;;AACAC,QAAAA,QAAQ,GAAGI,mBAAmB,CAAC5D,GAApB,EAAX;AACAuD,QAAAA,QAAQ,GAAGK,mBAAmB,CAAC5D,GAApB,EAAX;AACAsD,QAAAA,KAAK,GAAGM,mBAAmB,CAAC5D,GAApB,EAAR,CAtBG,CAwBH;AACA;AACA;;AACA,YAAI6D,SAAJ,EAAe;AACbP,UAAAA,KAAK,GAAGO,SAAS,GAAGP,KAAK,CAAC8D,SAAN,CAAgB5D,QAAhB,CAApB;AACAD,UAAAA,QAAQ,GAAGD,KAAK,CAACxF,MAAjB;AACA0F,UAAAA,QAAQ,GAAG,CAAX;AACAK,UAAAA,SAAS,GAAG,EAAZ;AACD,SAhCE,CAkCH;;;AACAF,QAAAA,qBAAqB;AACtB;;AACD,aAAOuD,QAAP;AACD;AA3Hc,GAAjB,CAlEqD,CAiMrD;;AACA,MAAIb,GAAG,GAAG,IAAI7T,QAAJ,CAAa,IAAb,EAAmB2Q,OAAnB,CAAV,CAlMqD,CAoMrD;AACA;;AACAkD,EAAAA,GAAG,CAACgB,OAAJ,GAAclB,UAAd,CAtMqD,CAwMrD;AACA;AACA;AACA;;AACAE,EAAAA,GAAG,CAACV,kBAAJ,GAAyBF,iBAAzB;AAGA;AACF;AACA;;AAEE,MAAIrC,eAAJ,EAAqB;AAAE;AACrB,QAAIA,eAAe,CAACsC,aAAhB,CAA8B4B,OAAlC,EACEjB,GAAG,CAACiB,OAAJ,GAAc,IAAd;AACF,QAAIlE,eAAe,CAACsC,aAAhB,CAA8B6B,cAAlC,EACElB,GAAG,CAACkB,cAAJ,GAAqB,IAArB,CAJiB,CAMnB;;AACA,QAAInE,eAAe,CAAC1E,YAAhB,KAAiC9L,SAAS,CAACyB,IAA/C,EAAqD;AACnD,cAAO+O,eAAe,CAACzE,SAAvB;AACA,aAAK,OAAL;AACA,aAAK,UAAL;AACEqF,UAAAA,SAAS,GAAGwD,YAAZ;AACA;;AACF,aAAK,OAAL;AACA,aAAK,KAAL;AACA,aAAK,QAAL;AACA,aAAK,SAAL;AACA,aAAK,UAAL;AACA,aAAK,QAAL;AACA,aAAK,WAAL;AACExD,UAAAA,SAAS,GAAGyD,eAAZ;AACA;;AACF,aAAK,UAAL;AACE,cAAIhC,iBAAJ,EACEzB,SAAS,GAAGyD,eAAZ;AAhBJ;AAkBD;;AAED,QAAIhB,IAAI,GAAGJ,GAAG,CAACqB,aAAJ,CAAkB,MAAlB,CAAX;;AACArB,IAAAA,GAAG,CAACsB,YAAJ,CAAiBlB,IAAjB;;AACAtB,IAAAA,KAAK,CAAC7R,IAAN,CAAWmT,IAAX;;AACA,QAAIrD,eAAe,YAAYtQ,IAAI,CAAC8U,mBAApC,EAAyD;AACvD1C,MAAAA,sBAAsB,CAAC5R,IAAvB,CAA4BuU,gBAA5B;AACD;;AACDC,IAAAA,kBAAkB;;AAElB,SAAI,IAAI/H,CAAC,GAAGqD,eAAZ,EAA6BrD,CAAC,KAAK,IAAnC,EAAyCA,CAAC,GAAGA,CAAC,CAACgI,aAA/C,EAA8D;AAC5D,UAAIhI,CAAC,YAAYjN,IAAI,CAACkV,eAAtB,EAAuC;AACrCxC,QAAAA,oBAAoB,GAAGzF,CAAvB;AACA;AACD;AACF;AACF;AAED;AACF;AACA;AACE;AACA;AACA;AACA;AACA;;;AACA,WAASoH,SAAT,CAAmBF,eAAnB,EAAoC;AAClC,QAAIgB,SAAJ,EAAe5J,CAAf,EAAkB6J,OAAlB,EAA2BC,GAA3B;;AAEA,WAAM3E,QAAQ,GAAGD,QAAjB,EAA2B;AAEzB;AACA;AACA;AACA,UAAIQ,MAAM,GAAG,CAAT,IAAekD,eAAe,IAAIA,eAAe,EAArD,EAA0D;AACxD,eAAO,IAAP;AACD;;AAGD,cAAO,OAAOjD,SAAS,CAACoE,SAAxB;AACA,aAAK,WAAL;AACEH,UAAAA,SAAS,GAAG3E,KAAK,CAAChF,UAAN,CAAiBkF,QAAQ,EAAzB,CAAZ;;AACA,cAAIE,oBAAJ,EAA0B;AACxBA,YAAAA,oBAAoB,GAAG,KAAvB;;AACA,gBAAIuE,SAAS,KAAK,MAAlB,EAA0B;AACxBzE,cAAAA,QAAQ;AACR;AACD;AACF;;AACD,kBAAOyE,SAAP;AACA,iBAAK,MAAL;AACE;AACA;AACA,kBAAIzE,QAAQ,GAAGD,QAAf,EAAyB;AACvB,oBAAID,KAAK,CAAChF,UAAN,CAAiBkF,QAAjB,MAA+B,MAAnC,EACEA,QAAQ;AACX,eAHD,MAIK;AACH;AACA;AACAE,gBAAAA,oBAAoB,GAAG,IAAvB;AACD,eAXH,CAaE;;;AACAM,cAAAA,SAAS,CAAC,MAAD,CAAT;AAEA;;AACF,iBAAK,MAAL;AACE,kBAAIP,cAAc,IAAID,QAAQ,KAAKD,QAAnC,EAA6C;AAC3CS,gBAAAA,SAAS,CAACzQ,GAAD,CAAT,CAD2C,CAC3B;;AAChB;AACD;;AACD;;AACF;AACEyQ,cAAAA,SAAS,CAACiE,SAAD,CAAT;AACA;AA1BF;;AA4BA;;AAEF,aAAK,QAAL;AACEA,UAAAA,SAAS,GAAG3E,KAAK,CAAChF,UAAN,CAAiBkF,QAAjB,CAAZ,CADF,CAGE;AACA;AACA;AAEA;;AACA,cAAI1E,CAAC,GAAGkF,SAAS,CAACoE,SAAlB;AACA,cAAIC,WAAW,GAAG,IAAlB;;AACA,cAAIvJ,CAAC,GAAG,CAAR,EAAW;AACTuJ,YAAAA,WAAW,GAAG,KAAd;AACAvJ,YAAAA,CAAC,GAAG,CAACA,CAAL;AACD;;AAED,cAAIA,CAAC,GAAGyE,QAAQ,GAAGC,QAAnB,EAA6B;AAC3B;AACAnF,YAAAA,CAAC,GAAGgK,WAAW,GAAG/E,KAAK,CAAC8D,SAAN,CAAgB5D,QAAhB,EAA0BA,QAAQ,GAAC1E,CAAnC,CAAH,GAA2C,IAA1D;AACAqJ,YAAAA,GAAG,GAAG,KAAN;AACD,WAJD,MAKK;AAAE;AACL,gBAAI1E,cAAJ,EAAoB;AAAE;AACpB;AACApF,cAAAA,CAAC,GAAGgK,WAAW,GAAG/E,KAAK,CAAC8D,SAAN,CAAgB5D,QAAhB,EAA0BD,QAA1B,CAAH,GAAyC,IAAxD;AACA4E,cAAAA,GAAG,GAAG,IAAN;AACA,kBAAIF,SAAS,KAAK,MAAd,IAAwBzE,QAAQ,KAAKD,QAAQ,GAAC,CAAlD,EACE0E,SAAS,GAAG1U,GAAZ;AACH,aAND,MAOK;AACH;AACA,qBAAO,IAAP;AACD;AACF;;AACDyQ,UAAAA,SAAS,CAACiE,SAAD,EAAY5J,CAAZ,EAAe8J,GAAf,CAAT;AACA;;AACF,aAAK,QAAL;AACEF,UAAAA,SAAS,GAAG3E,KAAK,CAAChF,UAAN,CAAiBkF,QAAjB,CAAZ,CADF,CAGE;;AACA0E,UAAAA,OAAO,GAAGlE,SAAS,CAACoE,SAApB;AACA,cAAIE,GAAG,GAAGhF,KAAK,CAACT,OAAN,CAAcqF,OAAd,EAAuB1E,QAAvB,CAAV;;AACA,cAAI8E,GAAG,KAAK,CAAC,CAAb,EAAgB;AACdjK,YAAAA,CAAC,GAAGiF,KAAK,CAAC8D,SAAN,CAAgB5D,QAAhB,EAA0B8E,GAAG,GAAGJ,OAAO,CAACpK,MAAxC,CAAJ;AACAqK,YAAAA,GAAG,GAAG,KAAN;AACD,WAHD,MAIK;AAAG;AACN;AACA,gBAAI,CAAC1E,cAAL,EAAqB,OAAO,IAAP,CAFlB,CAIH;;AACApF,YAAAA,CAAC,GAAGiF,KAAK,CAAC8D,SAAN,CAAgB5D,QAAhB,EAA0BD,QAA1B,CAAJ;AACA,gBAAI0E,SAAS,KAAK,MAAd,IAAwBzE,QAAQ,KAAKD,QAAQ,GAAC,CAAlD,EACE0E,SAAS,GAAG1U,GAAZ;AACF4U,YAAAA,GAAG,GAAG,IAAN;AACD,WAnBH,CAqBE;AACA;AACA;;;AACAnE,UAAAA,SAAS,CAACiE,SAAD,EAAY5J,CAAZ,EAAe8J,GAAf,CAAT;AACA;AApGF;AAsGD;;AACD,WAAO,KAAP,CApHkC,CAoHpB;AACf;AAGD;AACF;AACA;;;AACE,WAASI,YAAT,CAAsBnJ,IAAtB,EAA2BM,KAA3B,EAAkC;AAChC;AACA;AACA,SAAI,IAAIxB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG2G,UAAU,CAAC/G,MAA9B,EAAsCI,CAAC,EAAvC,EAA2C;AACzC,UAAI2G,UAAU,CAAC3G,CAAD,CAAV,CAAc,CAAd,MAAqBkB,IAAzB,EAA+B;AAChC;;AAED,QAAIM,KAAK,KAAK4F,SAAd,EAAyB;AACvBT,MAAAA,UAAU,CAACvR,IAAX,CAAgB,CAAC8L,IAAD,EAAOM,KAAP,CAAhB;AACD,KAFD,MAGK;AACHmF,MAAAA,UAAU,CAACvR,IAAX,CAAgB,CAAC8L,IAAD,CAAhB;AACD;AACF,GA/YoD,CAiZrD;;;AACA,WAASoJ,qBAAT,GAAiC;AAC/BnL,IAAAA,UAAU,CAACoL,SAAX,GAAuBjF,QAAQ,GAAC,CAAhC;AACA,QAAIkF,OAAO,GAAGrL,UAAU,CAACsL,IAAX,CAAgBrF,KAAhB,CAAd;AACA,QAAI,CAACoF,OAAL,EAAc,MAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;AACd,QAAIxJ,IAAI,GAAGsJ,OAAO,CAAC,CAAD,CAAlB;AACA,QAAI,CAACtJ,IAAL,EAAW,OAAO,KAAP;AACX,QAAIM,KAAK,GAAGgJ,OAAO,CAAC,CAAD,CAAnB;AACA,QAAIG,GAAG,GAAGnJ,KAAK,CAAC5B,MAAhB;;AACA,YAAO4B,KAAK,CAAC,CAAD,CAAZ;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACEA,QAAAA,KAAK,GAAGA,KAAK,CAAC0H,SAAN,CAAgB,CAAhB,EAAmByB,GAAG,GAAC,CAAvB,CAAR;AACArF,QAAAA,QAAQ,IAAKkF,OAAO,CAAC,CAAD,CAAP,CAAW5K,MAAX,GAAkB,CAA/B;AACAkG,QAAAA,SAAS,GAAG8E,kCAAZ;AACA;;AACF;AACE9E,QAAAA,SAAS,GAAG+E,2BAAZ;AACAvF,QAAAA,QAAQ,IAAKkF,OAAO,CAAC,CAAD,CAAP,CAAW5K,MAAX,GAAkB,CAA/B;AACA4B,QAAAA,KAAK,GAAGA,KAAK,CAAC0H,SAAN,CAAgB,CAAhB,EAAmByB,GAAG,GAAC,CAAvB,CAAR;AACA;AAXF,KAR+B,CAsB/B;AACA;;;AACA,SAAI,IAAI3K,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG2G,UAAU,CAAC/G,MAA9B,EAAsCI,CAAC,EAAvC,EAA2C;AACzC,UAAI2G,UAAU,CAAC3G,CAAD,CAAV,CAAc,CAAd,MAAqBkB,IAAzB,EAA+B,OAAO,IAAP;AAChC;;AAEDyF,IAAAA,UAAU,CAACvR,IAAX,CAAgB,CAAC8L,IAAD,EAAOM,KAAP,CAAhB;AACA,WAAO,IAAP;AACD;;AAED,WAASsJ,YAAT,GAAwB;AACtBlE,IAAAA,UAAU,GAAG,KAAb;AACAV,IAAAA,UAAU,GAAG,EAAb;AACAS,IAAAA,UAAU,CAAC/G,MAAX,GAAoB,CAApB;AACD;;AACD,WAASmL,eAAT,GAA2B;AACzBnE,IAAAA,UAAU,GAAG,IAAb;AACAV,IAAAA,UAAU,GAAG,EAAb;AACAS,IAAAA,UAAU,CAAC/G,MAAX,GAAoB,CAApB;AACD;;AAED,WAASoL,YAAT,GAAwB;AAAE5E,IAAAA,OAAO,CAACxG,MAAR,GAAiB,CAAjB;AAAqB;;AAC/C,WAASqL,aAAT,GAAyB;AAAE5E,IAAAA,WAAW,GAAG,EAAd;AAAmB;;AAC9C,WAAS6E,cAAT,GAA0B;AAAE5E,IAAAA,YAAY,GAAG,EAAf;AAAoB;;AAChD,WAAS6E,YAAT,GAAwB;AAAE5E,IAAAA,UAAU,CAAC3G,MAAX,GAAoB,CAApB;AAAwB;;AAClD,WAASwL,YAAT,GAAwB;AACtB5E,IAAAA,cAAc,CAAC5G,MAAf,GAAwB,CAAxB;AACA6G,IAAAA,gBAAgB,GAAG,IAAnB;AACAC,IAAAA,gBAAgB,GAAG,IAAnB;AACD;;AACD,WAAS2E,oBAAT,GAAgC;AAAE5E,IAAAA,gBAAgB,GAAG,EAAnB;AAAwB;;AAC1D,WAAS6E,oBAAT,GAAgC;AAAE5E,IAAAA,gBAAgB,GAAG,EAAnB;AAAwB;;AAC1D,WAAS6E,WAAT,GAAuB;AAAE5D,IAAAA,YAAY,GAAG,IAAf;AAAsB;;AAC/C,WAAS6D,YAAT,GAAwB;AACtB,WAAOvE,KAAK,CAACrF,GAAN,IACLqF,KAAK,CAACrF,GAAN,CAAUpB,YAAV,KAA2B,8BAD7B;AAED,GA5coD,CA8crD;AACA;;;AACA,WAASiL,iBAAT,CAA2B/L,GAA3B,EAAgC;AAC9B,WAAOyG,WAAW,KAAKzG,GAAvB;AACD;;AAED,WAASgM,SAAT,GAAqB;AACnB,QAAI5D,OAAO,CAAClI,MAAR,GAAiB,CAArB,EAAwB;AACtB,UAAIO,CAAC,GAAGV,OAAO,CAACqI,OAAD,CAAf;AACAA,MAAAA,OAAO,CAAClI,MAAR,GAAiB,CAAjB;;AAEA,UAAIoI,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,GAAG,KAAlB;AACA,YAAI7H,CAAC,CAAC,CAAD,CAAD,KAAS,IAAb,EAAmBA,CAAC,GAAGA,CAAC,CAAC+I,SAAF,CAAY,CAAZ,CAAJ;AACnB,YAAI/I,CAAC,CAACP,MAAF,KAAa,CAAjB,EAAoB;AACrB;;AAED+L,MAAAA,WAAW,CAACrW,IAAD,EAAO6K,CAAP,CAAX;AACA4H,MAAAA,eAAe,GAAG,KAAlB;AACD;;AACDC,IAAAA,eAAe,GAAG,KAAlB;AACD,GAneoD,CAqerD;AACA;AACA;;;AACA,WAAS4D,gBAAT,CAA0B5B,OAA1B,EAAmC;AACjCA,IAAAA,OAAO,CAACO,SAAR,GAAoBjF,QAAQ,GAAG,CAA/B;AACA,QAAIuG,KAAK,GAAG7B,OAAO,CAACS,IAAR,CAAarF,KAAb,CAAZ;;AACA,QAAIyG,KAAK,IAAIA,KAAK,CAACC,KAAN,KAAgBxG,QAAQ,GAAG,CAAxC,EAA2C;AACzCuG,MAAAA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAb;AACAvG,MAAAA,QAAQ,IAAIuG,KAAK,CAACjM,MAAN,GAAe,CAA3B;AACA;;AACA,UAAI2F,cAAc,IAAID,QAAQ,KAAKD,QAAnC,EAA6C;AAC3C;AACAwG,QAAAA,KAAK,GAAGA,KAAK,CAAC5L,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAR;AACAqF,QAAAA,QAAQ;AACT;;AACD,aAAOuG,KAAP;AACD,KAVD,MAUO;AACL,YAAM,IAAInB,KAAJ,CAAU,qBAAV,CAAN;AACD;AACF,GAxfoD,CA0frD;AACA;;;AACA,WAASqB,cAAT,CAAwB/B,OAAxB,EAAiC;AAC/BA,IAAAA,OAAO,CAACO,SAAR,GAAoBjF,QAAQ,GAAC,CAA7B;AACA,QAAIuG,KAAK,GAAG7B,OAAO,CAACS,IAAR,CAAarF,KAAb,EAAoB,CAApB,CAAZ;AACA,QAAI,CAACyG,KAAL,EAAY,OAAO,KAAP;AACZG,IAAAA,cAAc,CAACH,KAAD,CAAd;AACAvG,IAAAA,QAAQ,IAAIuG,KAAK,CAACjM,MAAN,GAAe,CAA3B;AACA,WAAO,IAAP;AACD,GAngBoD,CAqgBrD;;;AACA,WAASoM,cAAT,CAAwB7L,CAAxB,EAA2B;AACzB,QAAI2H,OAAO,CAAClI,MAAR,GAAiB,CAArB,EAAwB8L,SAAS;;AAEjC,QAAI1D,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,GAAG,KAAlB;AACA,UAAI7H,CAAC,CAAC,CAAD,CAAD,KAAS,IAAb,EAAmBA,CAAC,GAAGA,CAAC,CAAC+I,SAAF,CAAY,CAAZ,CAAJ;AACnB,UAAI/I,CAAC,CAACP,MAAF,KAAa,CAAjB,EAAoB;AACrB;;AAED+L,IAAAA,WAAW,CAACrW,IAAD,EAAO6K,CAAP,CAAX;AACD;;AAED,WAAS8L,OAAT,GAAmB;AACjB,QAAIrF,UAAJ,EAAgB+E,WAAW,CAACnW,MAAD,EAAS0Q,UAAT,CAAX,CAAhB,KACK;AACH;AACA,UAAIgG,OAAO,GAAGhG,UAAd;AACAA,MAAAA,UAAU,GAAG,EAAb;AACAC,MAAAA,WAAW,GAAG+F,OAAd;AACAP,MAAAA,WAAW,CAACpW,GAAD,EAAM2W,OAAN,EAAevF,UAAf,CAAX;AACD;AACF,GA3hBoD,CA8hBrD;AACA;;;AACA,WAASwF,aAAT,GAAyB;AACvB,QAAI7G,QAAQ,KAAKD,QAAjB,EAA2B;AAAE,aAAO,KAAP;AAAc;AAA4B;;AACvEnG,IAAAA,SAAS,CAACqL,SAAV,GAAsBjF,QAAtB;AACA,QAAIkF,OAAO,GAAGtL,SAAS,CAACuL,IAAV,CAAerF,KAAf,CAAd;AACA,QAAI,CAACoF,OAAL,EAAc,MAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;AACd,QAAIwB,OAAO,GAAG1B,OAAO,CAAC,CAAD,CAArB;AACA,QAAI,CAAC0B,OAAL,EAAc,OAAO,KAAP;AACd,QAAIE,MAAM,GAAG5B,OAAO,CAAC,CAAD,CAApB;;AACA,QAAI4B,MAAJ,EAAY;AACV9G,MAAAA,QAAQ,IAAK4G,OAAO,CAACtM,MAAR,GAAe,CAA5B;AACA+L,MAAAA,WAAW,CAACnW,MAAD,EAAS0W,OAAT,CAAX;AACD,KAHD,MAIK;AACH5G,MAAAA,QAAQ,IAAK4G,OAAO,CAACtM,MAAR,GAAe,CAA5B;AACAuG,MAAAA,WAAW,GAAG+F,OAAd;AACAP,MAAAA,WAAW,CAACpW,GAAD,EAAM2W,OAAN,EAAevW,OAAf,CAAX;AACD;;AACD,WAAO,IAAP;AACD;;AAED,WAAS0W,kBAAT,GAA8B;AAC5B,QAAIzF,UAAJ,EAAgB+E,WAAW,CAACnW,MAAD,EAAS0Q,UAAT,EAAqB,IAArB,EAA2B,IAA3B,CAAX,CAAhB,KACK;AACHyF,MAAAA,WAAW,CAACpW,GAAD,EAAM2Q,UAAN,EAAkBS,UAAlB,EAA8B,IAA9B,CAAX;AACD;AACF;;AAED,WAAS2F,WAAT,GAAuB;AACrBX,IAAAA,WAAW,CAACjW,OAAD,EACL+J,OAAO,CAAC+G,cAAD,CADF,EAELC,gBAAgB,GAAGhH,OAAO,CAACgH,gBAAD,CAAV,GAA+BW,SAF1C,EAGLV,gBAAgB,GAAGjH,OAAO,CAACiH,gBAAD,CAAV,GAA+BU,SAH1C,CAAX;AAID;;AAED,WAASmF,OAAT,GAAmB;AACjBb,IAAAA,SAAS;AACT7E,IAAAA,MAAM,CAACxR,GAAD,CAAN,CAFiB,CAEJ;;AACb8S,IAAAA,GAAG,CAACqE,QAAJ,GAAe,CAAf,CAHiB,CAGC;AACnB,GAtkBoD,CAwkBrD;AACA;;;AACA,MAAIb,WAAW,GAAG1D,UAAU,CAAC0D,WAAX,GAAyB,SAASA,WAAT,CAAqBc,CAArB,EAAwBjL,KAAxB,EAA+BkL,IAA/B,EAAqCC,IAArC,EAA2C;AACpFjB,IAAAA,SAAS;AACT,QAAIkB,OAAO,GAAG3F,KAAK,CAACrF,GAApB;;AAEA,QAAI,CAACgL,OAAD,IAAYA,OAAO,CAACpM,YAAR,KAAyB9L,SAAS,CAACyB,IAAnD,EAAyD;AACvD;AACA0Q,MAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD,KAHD,MAIK;AACH;AACA,UAAIF,CAAC,KAAKlX,GAAN,IAAakX,CAAC,KAAKnX,IAAvB,EAA6B;AAC3BuX,QAAAA,kBAAkB,CAACJ,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAlB;AACD,OAFD,MAGK;AACH;AACA,YAAKhM,4BAA4B,CAACiM,OAAD,CAA5B,KACDH,CAAC,KAAKnX,IAAN,IACCmX,CAAC,KAAKlX,GAAN,IACAiM,KAAK,KAAK,QADV,IACsBA,KAAK,KAAK,YAHhC,CAAD,IAIDiL,CAAC,KAAKlX,GAAN,IACAiM,KAAK,KAAK,KADV,IAEAoL,OAAO,CAACpM,YAAR,KAAyB9L,SAAS,CAAC4B,MAFnC,IAGAsW,OAAO,CAACnM,SAAR,KAAsB,gBAPrB,IAQFI,sBAAsB,CAAC+L,OAAD,CARxB,EAQmC;AAEjC;AACA;AACA/E,UAAAA,qBAAqB,GAAG,IAAxB;AACAhB,UAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA9E,UAAAA,qBAAqB,GAAG,KAAxB;AACD,SAfD,CAgBA;AAhBA,aAiBK;AACHgF,UAAAA,kBAAkB,CAACJ,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAlB;AACD;AACF;AACF;AACF,GArCD;AAwCA;AACF;AACA;;;AACE,WAASG,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,QAAIC,MAAM,GAAG/F,KAAK,CAACrF,GAAnB;;AACA,QAAIqL,kBAAkB,IAAI5M,GAAG,CAAC2M,MAAD,EAASvW,kBAAT,CAA7B,EAA2D;AACzDyW,MAAAA,YAAY,CAAC,UAAS/E,GAAT,EAAc;AAAE,eAAOA,GAAG,CAACgF,aAAJ,CAAkBJ,IAAlB,CAAP;AAAiC,OAAlD,CAAZ;AACD,KAFD,MAEO;AACL;AACA;AACA,UAAIC,MAAM,YAAYpY,IAAI,CAAC8U,mBAA3B,EAAgD;AAC9CsD,QAAAA,MAAM,GAAGA,MAAM,CAACI,OAAhB;AACD;;AACDJ,MAAAA,MAAM,CAACvD,YAAP,CAAoBuD,MAAM,CAACxF,aAAP,CAAqB2F,aAArB,CAAmCJ,IAAnC,CAApB;AACD;AACF;;AAED,WAASM,UAAT,CAAoBlN,CAApB,EAAuB;AACrB,QAAI6M,MAAM,GAAG/F,KAAK,CAACrF,GAAnB;;AACA,QAAIqL,kBAAkB,IAAI5M,GAAG,CAAC2M,MAAD,EAASvW,kBAAT,CAA7B,EAA2D;AACzDyW,MAAAA,YAAY,CAAC,UAAS/E,GAAT,EAAc;AAAE,eAAOA,GAAG,CAACmF,cAAJ,CAAmBnN,CAAnB,CAAP;AAA+B,OAAhD,CAAZ;AACD,KAFD,MAEO;AACL;AACA;AACA,UAAI6M,MAAM,YAAYpY,IAAI,CAAC8U,mBAA3B,EAAgD;AAC9CsD,QAAAA,MAAM,GAAGA,MAAM,CAACI,OAAhB;AACD,OALI,CAML;AACA;;;AACA,UAAIG,SAAS,GAAGP,MAAM,CAACO,SAAvB;;AACA,UAAIA,SAAS,IAAIA,SAAS,CAACC,QAAV,KAAuB/Y,IAAI,CAACgZ,SAA7C,EAAwD;AACtDF,QAAAA,SAAS,CAACG,UAAV,CAAqBvN,CAArB;AACD,OAFD,MAEO;AACL6M,QAAAA,MAAM,CAACvD,YAAP,CAAoBuD,MAAM,CAACxF,aAAP,CAAqB8F,cAArB,CAAoCnN,CAApC,CAApB;AACD;AACF;AACF;;AAED,WAASwN,aAAT,CAAuBxF,GAAvB,EAA4BjH,IAA5B,EAAkCE,KAAlC,EAAyC;AACvC;AACA;AACA;AACA,QAAId,GAAG,GAAG3L,IAAI,CAAC6U,aAAL,CAAmBrB,GAAnB,EAAwBjH,IAAxB,EAA8B,IAA9B,CAAV;;AAEA,QAAIE,KAAJ,EAAW;AACT,WAAI,IAAIpB,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGQ,KAAK,CAACxB,MAAzB,EAAiCI,CAAC,GAAGY,CAArC,EAAwCZ,CAAC,EAAzC,EAA6C;AAC3C;AACA;AACAM,QAAAA,GAAG,CAACoB,aAAJ,CAAkBN,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,CAAlB,EAA+BoB,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,CAA/B;AACD;AACF,KAZsC,CAavC;AACA;AACA;AACA;AACA;;;AACA,WAAOM,GAAP;AACD,GA3qBoD,CA6qBrD;AACA;AACA;;;AACA,MAAI2M,kBAAkB,GAAG,KAAzB;;AAEA,WAASW,iBAAT,CAA2B1M,IAA3B,EAAiCE,KAAjC,EAAwC;AACtC,QAAId,GAAG,GAAGuN,aAAa,CAAC,UAAS1F,GAAT,EAAc;AACpC,aAAOwF,aAAa,CAACxF,GAAD,EAAMjH,IAAN,EAAYE,KAAZ,CAApB;AACD,KAFsB,CAAvB,CADsC,CAKtC;AACA;;AACA,QAAIf,GAAG,CAACC,GAAD,EAAMvJ,iBAAN,CAAP,EAAiC;AAC/BuJ,MAAAA,GAAG,CAACwN,KAAJ,GAAYxG,oBAAZ;AACD;;AAED,WAAOhH,GAAP;AACD,GA9rBoD,CAgsBrD;;;AACA,WAASuN,aAAT,CAAuBE,OAAvB,EAAgC;AAC9B,QAAIzN,GAAJ;;AACA,QAAI2M,kBAAkB,IAAI5M,GAAG,CAAC4G,KAAK,CAACrF,GAAP,EAAYnL,kBAAZ,CAA7B,EAA8D;AAC5D6J,MAAAA,GAAG,GAAG4M,YAAY,CAACa,OAAD,CAAlB;AACD,KAFD,MAGK,IAAI9G,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAAC8U,mBAA9B,EAAmD;AACtD;AACA;AACApJ,MAAAA,GAAG,GAAGyN,OAAO,CAAC9G,KAAK,CAACrF,GAAN,CAAUwL,OAAV,CAAkB5F,aAAnB,CAAb;;AACAP,MAAAA,KAAK,CAACrF,GAAN,CAAUwL,OAAV,CAAkB3D,YAAlB,CAA+BnJ,GAA/B;AACD,KALI,MAKE;AACLA,MAAAA,GAAG,GAAGyN,OAAO,CAAC9G,KAAK,CAACrF,GAAN,CAAU4F,aAAX,CAAb;;AACAP,MAAAA,KAAK,CAACrF,GAAN,CAAU6H,YAAV,CAAuBnJ,GAAvB;AACD;;AAED2G,IAAAA,KAAK,CAAC7R,IAAN,CAAWkL,GAAX;AACA,WAAOA,GAAP;AACD;;AAED,WAAS0N,oBAAT,CAA8B9M,IAA9B,EAAoCE,KAApC,EAA2C6M,EAA3C,EAA+C;AAC7C,WAAOJ,aAAa,CAAC,UAAS1F,GAAT,EAAc;AACjC;AACA;AACA,UAAI7H,GAAG,GAAG6H,GAAG,CAAC+F,gBAAJ,CAAqBhN,IAArB,EAA2B+M,EAA3B,EAA+B,IAA/B,CAAV;;AACA,UAAI7M,KAAJ,EAAW;AACT,aAAI,IAAIpB,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGQ,KAAK,CAACxB,MAAzB,EAAiCI,CAAC,GAAGY,CAArC,EAAwCZ,CAAC,EAAzC,EAA6C;AAC3C,cAAImO,IAAI,GAAG/M,KAAK,CAACpB,CAAD,CAAhB;AACA,cAAImO,IAAI,CAACvO,MAAL,KAAgB,CAApB,EACEU,GAAG,CAACoB,aAAJ,CAAkByM,IAAI,CAAC,CAAD,CAAtB,EAA2BA,IAAI,CAAC,CAAD,CAA/B,EADF,KAEK;AACH7N,YAAAA,GAAG,CAAC8N,eAAJ,CAAoBD,IAAI,CAAC,CAAD,CAAxB,EAA6BA,IAAI,CAAC,CAAD,CAAjC,EAAsCA,IAAI,CAAC,CAAD,CAA1C;AACD;AACF;AACF;;AACD,aAAO7N,GAAP;AACD,KAfmB,CAApB;AAgBD;;AAED,WAAS+N,iBAAT,CAA2BnM,IAA3B,EAAiC;AAC/B,SAAI,IAAIlC,CAAC,GAAGiH,KAAK,CAACpS,QAAN,CAAe+K,MAAf,GAAsB,CAAlC,EAAqCI,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChD,UAAIiH,KAAK,CAACpS,QAAN,CAAemL,CAAf,aAA6BkC,IAAjC,EAAuC;AACrC,eAAOlC,CAAP;AACD;AACF;;AACD,WAAO,CAAC,CAAR;AACD;;AAED,WAASkN,YAAT,CAAsBa,OAAtB,EAA+B;AAC7B,QAAIf,MAAJ;AAAA,QAAYsB,MAAZ;AAAA,QAAoBC,SAAS,GAAG,CAAC,CAAjC;AAAA,QAAoCC,YAAY,GAAG,CAAC,CAApD;AAAA,QAAuDlO,GAAvD;AAEAiO,IAAAA,SAAS,GAAGF,iBAAiB,CAACzZ,IAAI,CAAC6Z,gBAAN,CAA7B;AACAD,IAAAA,YAAY,GAAGH,iBAAiB,CAACzZ,IAAI,CAAC8U,mBAAN,CAAhC;;AAEA,QAAI8E,YAAY,IAAI,CAAhB,KAAsBD,SAAS,GAAG,CAAZ,IAAiBC,YAAY,GAAGD,SAAtD,CAAJ,EAAsE;AACpEvB,MAAAA,MAAM,GAAG/F,KAAK,CAACpS,QAAN,CAAe2Z,YAAf,CAAT;AACD,KAFD,MAEO,IAAID,SAAS,IAAI,CAAjB,EAAoB;AACzBvB,MAAAA,MAAM,GAAG/F,KAAK,CAACpS,QAAN,CAAe0Z,SAAf,EAA0BG,UAAnC;;AACA,UAAI1B,MAAJ,EAAY;AACVsB,QAAAA,MAAM,GAAGrH,KAAK,CAACpS,QAAN,CAAe0Z,SAAf,CAAT;AACD,OAFD,MAEO;AACLvB,QAAAA,MAAM,GAAG/F,KAAK,CAACpS,QAAN,CAAe0Z,SAAS,GAAG,CAA3B,CAAT;AACD;AACF;;AACD,QAAI,CAACvB,MAAL,EAAaA,MAAM,GAAG/F,KAAK,CAACpS,QAAN,CAAe,CAAf,CAAT,CAhBgB,CAgBY;AAEzC;AACA;;AACA,QAAImY,MAAM,YAAYpY,IAAI,CAAC8U,mBAA3B,EAAgD;AAC9CsD,MAAAA,MAAM,GAAGA,MAAM,CAACI,OAAhB;AACD,KAtB4B,CAuB7B;;;AACA9M,IAAAA,GAAG,GAAGyN,OAAO,CAACf,MAAM,CAACxF,aAAR,CAAb;;AAEA,QAAIlH,GAAG,CAACkN,QAAJ,KAAiB/Y,IAAI,CAACgZ,SAA1B,EAAqC;AACnC,UAAIkB,IAAJ;AACA,UAAIL,MAAJ,EAAYK,IAAI,GAAGL,MAAM,CAACM,eAAd,CAAZ,KACKD,IAAI,GAAG3B,MAAM,CAACO,SAAd;;AACL,UAAIoB,IAAI,IAAIA,IAAI,CAACnB,QAAL,KAAkB/Y,IAAI,CAACgZ,SAAnC,EAA8C;AAC5CkB,QAAAA,IAAI,CAACjB,UAAL,CAAgBpN,GAAG,CAACyM,IAApB;AACA,eAAOzM,GAAP;AACD;AACF;;AACD,QAAIgO,MAAJ,EACEtB,MAAM,CAAC6B,YAAP,CAAoBvO,GAApB,EAAyBgO,MAAzB,EADF,KAGEtB,MAAM,CAACvD,YAAP,CAAoBnJ,GAApB;AACF,WAAOA,GAAP;AACD;;AAGD,WAASsJ,kBAAT,GAA8B;AAC5B,QAAIkF,IAAI,GAAG,KAAX;;AACA,SAAI,IAAI9O,CAAC,GAAGiH,KAAK,CAACpS,QAAN,CAAe+K,MAAf,GAAsB,CAAlC,EAAqCI,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChD,UAAI+O,IAAI,GAAG9H,KAAK,CAACpS,QAAN,CAAemL,CAAf,CAAX;;AACA,UAAIA,CAAC,KAAK,CAAV,EAAa;AACX8O,QAAAA,IAAI,GAAG,IAAP;;AACA,YAAI3H,QAAJ,EAAc;AACZ4H,UAAAA,IAAI,GAAG7J,eAAP;AACD;AACF;;AACD,UAAI6J,IAAI,CAACvO,YAAL,KAAsB9L,SAAS,CAACyB,IAApC,EAA0C;AACxC,YAAI6L,GAAG,GAAG+M,IAAI,CAACtO,SAAf;;AACA,gBAAOuB,GAAP;AACA,eAAK,QAAL;AACE,iBAAI,IAAIgN,CAAC,GAAGhP,CAAZ,EAAegP,CAAC,GAAG,CAAnB,GAAwB;AACtB,kBAAIC,QAAQ,GAAGhI,KAAK,CAACpS,QAAN,CAAe,EAAEma,CAAjB,CAAf;;AACA,kBAAIC,QAAQ,YAAYra,IAAI,CAAC8U,mBAA7B,EAAkD;AAChD;AACD,eAFD,MAEO,IAAIuF,QAAQ,YAAYra,IAAI,CAAC6Z,gBAA7B,EAA+C;AACpD5H,gBAAAA,MAAM,GAAGqI,uBAAT;AACA;AACD;AACF;;AACDrI,YAAAA,MAAM,GAAGsI,cAAT;AACA;;AACF,eAAK,IAAL;AACEtI,YAAAA,MAAM,GAAGuI,WAAT;AACA;;AACF,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACEvI,YAAAA,MAAM,GAAGwI,kBAAT;AACA;;AACF,eAAK,SAAL;AACExI,YAAAA,MAAM,GAAGyI,eAAT;AACA;;AACF,eAAK,UAAL;AACEzI,YAAAA,MAAM,GAAG0I,oBAAT;AACA;;AACF,eAAK,OAAL;AACE1I,YAAAA,MAAM,GAAG2I,aAAT;AACA;;AACF,eAAK,UAAL;AACE3I,YAAAA,MAAM,GAAGG,sBAAsB,CAACA,sBAAsB,CAACpH,MAAvB,GAA8B,CAA/B,CAA/B;AACA;;AACF,eAAK,MAAL;AACEiH,YAAAA,MAAM,GAAG4I,YAAT;AACA;;AACF,eAAK,UAAL;AACE5I,YAAAA,MAAM,GAAG6I,gBAAT;AACA;;AACF,eAAK,MAAL;AACE,gBAAIrI,oBAAoB,KAAK,IAA7B,EAAmC;AACjCR,cAAAA,MAAM,GAAG8I,gBAAT;AACD,aAFD,MAEO;AACL9I,cAAAA,MAAM,GAAG+I,eAAT;AACD;;AACD;;AACF;AACE,gBAAI,CAACd,IAAL,EAAW;AACT,kBAAI9M,GAAG,KAAK,MAAZ,EAAoB;AAClB6E,gBAAAA,MAAM,GAAGgJ,YAAT;AACA;AACD;;AACD,kBAAI7N,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,IAA5B,EAAkC;AAChC6E,gBAAAA,MAAM,GAAGiJ,YAAT;AACA;AACD;AACF;;AAxDH;AA0DD;;AACD,UAAIhB,IAAJ,EAAU;AACRjI,QAAAA,MAAM,GAAG4I,YAAT;AACA;AACD;AACF;AACF;;AAGD,WAASM,YAAT,CAAsB7O,IAAtB,EAA4BE,KAA5B,EAAmC;AACjCwM,IAAAA,iBAAiB,CAAC1M,IAAD,EAAOE,KAAP,CAAjB;AACA0E,IAAAA,SAAS,GAAGkK,aAAZ;AACAjJ,IAAAA,qBAAqB,GAAGF,MAAxB;AACAA,IAAAA,MAAM,GAAGoJ,SAAT;AACD;;AAED,WAASC,WAAT,CAAqBhP,IAArB,EAA2BE,KAA3B,EAAkC;AAChCwM,IAAAA,iBAAiB,CAAC1M,IAAD,EAAOE,KAAP,CAAjB;AACA0E,IAAAA,SAAS,GAAGwD,YAAZ;AACAvC,IAAAA,qBAAqB,GAAGF,MAAxB;AACAA,IAAAA,MAAM,GAAGoJ,SAAT;AACD,GAt3BoD,CAw3BrD;AACA;AACA;;;AACA,WAASE,QAAT,CAAkBhI,GAAlB,EAAuBnI,CAAvB,EAA0B;AACxB,WAAO;AACLM,MAAAA,GAAG,EAAEqN,aAAa,CAACxF,GAAD,EAAMjB,GAAG,CAACtD,IAAJ,CAAS5D,CAAT,EAAYS,SAAlB,EAA6ByG,GAAG,CAAC9F,KAAJ,CAAUpB,CAAV,CAA7B,CADb;AAELoB,MAAAA,KAAK,EAAE8F,GAAG,CAAC9F,KAAJ,CAAUpB,CAAV;AAFF,KAAP;AAID;;AAGD,WAASoQ,cAAT,GAA0B;AACxB,QAAIlJ,GAAG,CAACtD,IAAJ,CAAShE,MAAT,KAAoB,CAAxB,EAA2B;AAC3B,QAAIyQ,KAAK,GAAGnJ,GAAG,CAACtD,IAAJ,CAASsD,GAAG,CAACtD,IAAJ,CAAShE,MAAT,GAAgB,CAAzB,CAAZ,CAFwB,CAGxB;;AACA,QAAIyQ,KAAK,KAAKnJ,GAAG,CAACrD,MAAlB,EAA0B,OAJF,CAKxB;;AACA,QAAIoD,KAAK,CAACpS,QAAN,CAAeyN,WAAf,CAA2B+N,KAA3B,MAAsC,CAAC,CAA3C,EAA8C,OANtB,CAQxB;AACA;;AACA,SAAI,IAAIrQ,CAAC,GAAGkH,GAAG,CAACtD,IAAJ,CAAShE,MAAT,GAAgB,CAA5B,EAA+BI,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AAC1CqQ,MAAAA,KAAK,GAAGnJ,GAAG,CAACtD,IAAJ,CAAS5D,CAAT,CAAR;AACA,UAAIqQ,KAAK,KAAKnJ,GAAG,CAACrD,MAAlB,EAA0B;AAC1B,UAAIoD,KAAK,CAACpS,QAAN,CAAeyN,WAAf,CAA2B+N,KAA3B,MAAsC,CAAC,CAA3C,EAA8C;AAC/C,KAduB,CAgBxB;AACA;AACA;;;AACA,SAAIrQ,CAAC,GAAGA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGkH,GAAG,CAACtD,IAAJ,CAAShE,MAA1B,EAAkCI,CAAC,EAAnC,EAAuC;AACrC,UAAImE,MAAM,GAAG0J,aAAa,CAAC,UAAS1F,GAAT,EAAc;AAAE,eAAOgI,QAAQ,CAAChI,GAAD,EAAMnI,CAAN,CAAR,CAAiBM,GAAxB;AAA8B,OAA/C,CAA1B;AACA4G,MAAAA,GAAG,CAACtD,IAAJ,CAAS5D,CAAT,IAAcmE,MAAd;AACD;AACF,GA15BoD,CA45BrD;;;AACA,MAAImM,QAAQ,GAAG;AAAC7P,IAAAA,SAAS,EAAC;AAAX,GAAf;;AAEA,WAAS8P,cAAT,CAAwBvO,GAAxB,EAA6B;AAC3B;AACA;AACA;AACA;AACA,QAAI3B,GAAG,CAAC4G,KAAK,CAACrF,GAAP,EAAYI,GAAZ,CAAH,IAAuBkF,GAAG,CAACvC,OAAJ,CAAYsC,KAAK,CAACrF,GAAlB,MAA2B,CAAC,CAAvD,EAA0D;AACxDqF,MAAAA,KAAK,CAACnF,GAAN;AACA,aAAO,IAAP,CAFwD,CAE3C;AACd,KAR0B,CAU3B;;;AACA,QAAI0O,KAAK,GAAG,CAAZ,CAX2B,CAa3B;AACA;;AACA,WAAMA,KAAK,GAAG,CAAd,EAAiB;AACf;AACAA,MAAAA,KAAK,GAFU,CAIf;AACA;AACA;AACA;AACA;;AACA,UAAIC,MAAM,GAAGvJ,GAAG,CAACxC,gBAAJ,CAAqB1C,GAArB,CAAb,CATe,CAWf;AACA;;AACA,UAAI,CAACyO,MAAL,EAAa;AACX,eAAO,KAAP,CADW,CACG;AACf,OAfc,CAiBf;AACA;AACA;;;AACA,UAAI3E,KAAK,GAAG7E,KAAK,CAACpS,QAAN,CAAeyN,WAAf,CAA2BmO,MAA3B,CAAZ;;AACA,UAAI3E,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB5E,QAAAA,GAAG,CAACtC,MAAJ,CAAW6L,MAAX;AACA,eAAO,IAAP,CAFgB,CAED;AAChB,OAxBc,CA0Bf;AACA;AACA;AACA;;;AACA,UAAI,CAACxJ,KAAK,CAAClE,cAAN,CAAqB0N,MAArB,CAAL,EAAmC;AACjC,eAAO,IAAP;AACD,OAhCc,CAkCf;AACA;AACA;AACA;;;AACA,UAAIC,aAAa,GAAG,IAApB;AAAA,UAA0BC,kBAA1B;;AACA,WAAI,IAAI3Q,CAAC,GAAG8L,KAAK,GAAC,CAAlB,EAAqB9L,CAAC,GAAGiH,KAAK,CAACpS,QAAN,CAAe+K,MAAxC,EAAgDI,CAAC,EAAjD,EAAqD;AACnD,YAAIK,GAAG,CAAC4G,KAAK,CAACpS,QAAN,CAAemL,CAAf,CAAD,EAAoBhK,UAApB,CAAP,EAAwC;AACtC0a,UAAAA,aAAa,GAAGzJ,KAAK,CAACpS,QAAN,CAAemL,CAAf,CAAhB;AACA2Q,UAAAA,kBAAkB,GAAG3Q,CAArB;AACA;AACD;AACF,OA7Cc,CA+Cf;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAI,CAAC0Q,aAAL,EAAoB;AAClBzJ,QAAAA,KAAK,CAAC9E,UAAN,CAAiBsO,MAAjB;AACAvJ,QAAAA,GAAG,CAACtC,MAAJ,CAAW6L,MAAX;AACA,eAAO,IAAP;AACD,OAJD,MAKK;AACH;AACA;AACA,YAAIxB,QAAQ,GAAGhI,KAAK,CAACpS,QAAN,CAAeiX,KAAK,GAAC,CAArB,CAAf,CAHG,CAKH;AACA;AACA;AACA;;AACA5E,QAAAA,GAAG,CAAClC,WAAJ,CAAgByL,MAAhB,EAAwBH,QAAxB,EATG,CAWH;;AACA,YAAIvB,IAAI,GAAG2B,aAAX;AACA,YAAIE,QAAQ,GAAGF,aAAf;AACA,YAAIG,SAAS,GAAGF,kBAAhB;AACA,YAAIG,YAAJ,CAfG,CAiBH;;AACA,YAAIC,KAAK,GAAG,CAAZ;;AAEA,eAAO,IAAP,EAAa;AAEX;AACAA,UAAAA,KAAK,GAHM,CAKX;AACA;AACA;AACA;AACA;AACA;;AACAhC,UAAAA,IAAI,GAAG9H,KAAK,CAACpS,QAAN,CAAe,EAAEgc,SAAjB,CAAP,CAXW,CAaX;AACA;;AACA,cAAI9B,IAAI,KAAK0B,MAAb,EAAqB,MAfV,CAiBX;AACA;AACA;;AACAK,UAAAA,YAAY,GAAG5J,GAAG,CAACvC,OAAJ,CAAYoK,IAAZ,CAAf;;AACA,cAAIgC,KAAK,GAAG,CAAR,IAAaD,YAAY,KAAK,CAAC,CAAnC,EAAsC;AACpC5J,YAAAA,GAAG,CAACtC,MAAJ,CAAWmK,IAAX;AACA+B,YAAAA,YAAY,GAAG,CAAC,CAAhB;AACD,WAxBU,CA0BX;AACA;AACA;AACA;;;AACA,cAAIA,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB7J,YAAAA,KAAK,CAAC7E,aAAN,CAAoB2M,IAApB;AACA;AACD,WAjCU,CAmCX;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,cAAI5K,MAAM,GAAGgM,QAAQ,CAAClB,QAAQ,CAACzH,aAAV,EAAyBsJ,YAAzB,CAArB;AACA5J,UAAAA,GAAG,CAACrC,OAAJ,CAAYkK,IAAZ,EAAkB5K,MAAM,CAAC7D,GAAzB,EAA8B6D,MAAM,CAAC/C,KAArC;AACA6F,UAAAA,KAAK,CAACpS,QAAN,CAAegc,SAAf,IAA4B1M,MAAM,CAAC7D,GAAnC;AACAyO,UAAAA,IAAI,GAAG5K,MAAM,CAAC7D,GAAd,CA7CW,CA+CX;AACA;AACA;;AACA,cAAIsQ,QAAQ,KAAKF,aAAjB,EAAgC;AAC9BxJ,YAAAA,GAAG,CAACtC,MAAJ,CAAW0L,QAAX;AACApJ,YAAAA,GAAG,CAAClC,WAAJ,CAAgBb,MAAM,CAAC7D,GAAvB,EAA4BgQ,QAA5B;AACD,WArDU,CAuDX;AACA;;;AACAvB,UAAAA,IAAI,CAACtF,YAAL,CAAkBmH,QAAlB,EAzDW,CA2DX;;;AACAA,UAAAA,QAAQ,GAAG7B,IAAX;AACD,SAjFE,CAmFH;AACA;AACA;AACA;;;AACA,YAAI9B,kBAAkB,IAAI5M,GAAG,CAAC4O,QAAD,EAAWxY,kBAAX,CAA7B,EAA6D;AAC3DyW,UAAAA,YAAY,CAAC,YAAW;AAAE,mBAAO0D,QAAP;AAAkB,WAAhC,CAAZ;AACD,SAFD,CAGA;AACA;AACA;AALA,aAMK,IAAI3B,QAAQ,YAAYra,IAAI,CAAC8U,mBAA7B,EAAkD;AACrDuF,UAAAA,QAAQ,CAAC7B,OAAT,CAAiB3D,YAAjB,CAA8BmH,QAA9B;AACD,SAFI,MAEE;AACL3B,UAAAA,QAAQ,CAACxF,YAAT,CAAsBmH,QAAtB;AACD,SAjGE,CAmGH;AACA;AACA;;;AACA,YAAII,OAAO,GAAGb,QAAQ,CAACO,aAAa,CAAClJ,aAAf,EAA8BN,GAAG,CAACvC,OAAJ,CAAY8L,MAAZ,CAA9B,CAAtB,CAtGG,CAwGH;AACA;;AACA,eAAMC,aAAa,CAACjI,aAAd,EAAN,EAAqC;AACnCuI,UAAAA,OAAO,CAAC1Q,GAAR,CAAYmJ,YAAZ,CAAyBiH,aAAa,CAAClI,UAAvC;AACD,SA5GE,CA8GH;;;AACAkI,QAAAA,aAAa,CAACjH,YAAd,CAA2BuH,OAAO,CAAC1Q,GAAnC,EA/GG,CAiHH;AACA;AACA;AACA;;;AACA4G,QAAAA,GAAG,CAACtC,MAAJ,CAAW6L,MAAX;AACAvJ,QAAAA,GAAG,CAACrC,OAAJ,CAAYyL,QAAZ,EAAsBU,OAAO,CAAC1Q,GAA9B,EAAmC0Q,OAAO,CAAC5P,KAA3C,EAtHG,CAwHH;AACA;AACA;AACA;;AACA6F,QAAAA,KAAK,CAAC7E,aAAN,CAAoBqO,MAApB;AACA,YAAIrG,GAAG,GAAGnD,KAAK,CAACpS,QAAN,CAAeyN,WAAf,CAA2BoO,aAA3B,CAAV;AACAzJ,QAAAA,KAAK,CAACpS,QAAN,CAAe0N,MAAf,CAAsB6H,GAAG,GAAC,CAA1B,EAA6B,CAA7B,EAAgC4G,OAAO,CAAC1Q,GAAxC;AACD;AACF;;AAED,WAAO,IAAP;AACD,GA3mCoD,CA6mCrD;;;AACA,WAAS2Q,eAAT,GAA2B;AACzB;AACA;AACA;AACA;AACA;AAEA;AACAhK,IAAAA,KAAK,CAACnF,GAAN;AACA+E,IAAAA,MAAM,GAAGE,qBAAT,CATyB,CAUzB;;AACA,WAXyB,CAazB;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGD;;AAED,WAASmK,WAAT,GAAuB;AACrB;AACA;AAEA;AACA;AACA;AACA,WAAO/I,GAAG,CAACgB,OAAX;AAEAlC,IAAAA,KAAK,CAACpS,QAAN,CAAe+K,MAAf,GAAwB,CAAxB,CATqB,CASM;AAE3B;AACA;;AACA,QAAIuI,GAAG,CAACgJ,WAAR,EAAqB;AACnBhJ,MAAAA,GAAG,CAACgJ,WAAJ,CAAgBC,aAAhB,CAA8B,IAAIxc,IAAI,CAACyc,KAAT,CAAe,MAAf,EAAsB,EAAtB,CAA9B;AACD;AAEF;AAED;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASC,SAAT,CAAmBC,CAAnB,EAAsBC,SAAtB,EAAiC;AAC/B1L,IAAAA,SAAS,GAAG0L,SAAZ;AACAlM,IAAAA,QAAQ,GAFuB,CAEnB;AACb;;AAED,WAASS,UAAT,CAAoBwL,CAApB,EAAuB;AACrB,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXvL,QAAAA,YAAY,GAAGD,UAAf;AACAD,QAAAA,SAAS,GAAG2L,yBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX,YAAItF,aAAa,EAAjB,EAAqB;AACnB;AACFrG,QAAAA,SAAS,GAAG4L,cAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX;AACA;AACA;AACA;AACA;AACA5J,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACAxJ,QAAAA,eAAe,GAAG,IAAlB;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPwE,QAAAA,OAAO;AACP;;AACF;AACE;AACA;AACA;;AACA;AACAR,QAAAA,cAAc,CAAChN,QAAD,CAAd,IAA4B+I,OAAO,CAAC1S,IAAR,CAAamc,CAAb,CAA5B;AACA;AA5BF;AA8BD;;AAED,WAASjI,YAAT,CAAsBiI,CAAtB,EAAyB;AACvB;AACA,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXvL,QAAAA,YAAY,GAAGsD,YAAf;AACAxD,QAAAA,SAAS,GAAG2L,yBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX3L,QAAAA,SAAS,GAAG6L,2BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX7J,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB2S,QAAAA,eAAe,GAAG,IAAlB;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPwE,QAAAA,OAAO;AACP;;AACF;AACEzE,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;AAjBF;AAmBD;;AAED,WAASvB,aAAT,CAAuBuB,CAAvB,EAA0B;AACxB,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG8L,4BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX9J,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACE;AACAR,QAAAA,cAAc,CAAC/M,OAAD,CAAd,IAA2B8I,OAAO,CAAC1S,IAAR,CAAamc,CAAb,CAA3B;AACA;AAbF;AAeD;;AAED,WAASM,iBAAT,CAA2BN,CAA3B,EAA8B;AAC5B,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGgM,gCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXhK,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACE;AACAR,QAAAA,cAAc,CAAC/M,OAAD,CAAd,IAA2B8I,OAAO,CAAC1S,IAAR,CAAamc,CAAb,CAA3B;AACA;AAbF;AAeD;;AAED,WAAShI,eAAT,CAAyBgI,CAAzB,EAA4B;AAC1B,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzJ,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACE;AACAR,QAAAA,cAAc,CAAC9M,SAAD,CAAd,IAA6B6I,OAAO,CAAC1S,IAAR,CAAamc,CAAb,CAA7B;AACA;AAVF;AAYD;;AAED,WAASG,cAAT,CAAwBH,CAAxB,EAA2B;AACzB,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGiM,6BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjM,QAAAA,SAAS,GAAGkM,kBAAZ;AACA;;AACF,WAAK,MAAL,CAPA,CAOc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL,CAbA,CAac;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9ClH,QAAAA,YAAY;AACZwG,QAAAA,SAAS,CAACC,CAAD,EAAIU,cAAJ,CAAT;AACA;;AACF,WAAK,MAAL;AAAa;AACXX,QAAAA,SAAS,CAACC,CAAD,EAAIW,mBAAJ,CAAT;AACA;;AACF;AACEpK,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtBkc,QAAAA,SAAS,CAACC,CAAD,EAAIxL,UAAJ,CAAT;AACA;AA5BF;AA8BD;;AAED,WAASiM,kBAAT,CAA4BT,CAA5B,EAA+B;AAC7B,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL,CAPA,CAOc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CxG,QAAAA,eAAe;AACfuG,QAAAA,SAAS,CAACC,CAAD,EAAIU,cAAJ,CAAT;AACA;;AACF,WAAK,MAAL;AAAa;AACXnM,QAAAA,SAAS,GAAGC,UAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACP+B,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtBmX,QAAAA,OAAO;AACP;;AACF;AACE+E,QAAAA,SAAS,CAACC,CAAD,EAAIW,mBAAJ,CAAT;AACA;AA1BF;AA4BD;;AAED,WAASD,cAAT,CAAwBV,CAAxB,EAA2B;AACzB,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG+E,2BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX/E,QAAAA,SAAS,GAAGqM,4BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXrM,QAAAA,SAAS,GAAGC,UAAZ;AACAkG,QAAAA,OAAO;AACP;;AACF,WAAK,MAAL,CAdA,CAcc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9C/F,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAAC,GAAG,MAAxB,CAAd;AACA;;AACF,WAAK,MAAL;AAAa;AACXrL,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoB;AAAO;AAA3B,SAAd;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPyM,QAAAA,OAAO;AACP;;AACF;AACErG,QAAAA,UAAU,IAAI0F,gBAAgB,CAAChN,OAAD,CAA9B;AACA;AA9BF;AAgCD;;AAED,WAAS+S,2BAAT,CAAqCJ,CAArC,EAAwC;AACtC;AACA,QAAIA,CAAC,KAAK,MAAV,EAAkB;AAAG;AACnBvG,MAAAA,YAAY;AACZlF,MAAAA,SAAS,GAAGsM,yBAAZ;AACD,KAHD,MAIK;AACHtK,MAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADG,CACmB;;AACtBkc,MAAAA,SAAS,CAACC,CAAD,EAAIjI,YAAJ,CAAT;AACD;AACF;;AAED,WAAS8I,yBAAT,CAAmCb,CAAnC,EAAsC;AACpC;AACA,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL,CAPA,CAOc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CxG,QAAAA,eAAe;AACfuG,QAAAA,SAAS,CAACC,CAAD,EAAIc,yBAAJ,CAAT;AACA;;AACF;AACEvK,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtBkc,QAAAA,SAAS,CAACC,CAAD,EAAIjI,YAAJ,CAAT;AACA;AApBF;AAsBD;;AAED,WAAS+I,yBAAT,CAAmCd,CAAnC,EAAsC;AACpC;AACA,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACX,YAAI9F,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAG+E,2BAAZ;AACA;AACD;;AACD;;AACF,WAAK,MAAL;AAAa;AACX,YAAIY,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAGqM,4BAAZ;AACA;AACD;;AACD;;AACF,WAAK,MAAL;AAAa;AACX,YAAI1G,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAGC,UAAZ;AACAkG,UAAAA,OAAO;AACP;AACD;;AACD;;AACF,WAAK,MAAL,CAvBA,CAuBc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAE9C/F,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAAC,GAAG,MAAxB,CAAd;AACAnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACA;;AACF,WAAK,MAAL,CAjCA,CAiCc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAE9CrL,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAApB,CAAd;AACAnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACA;;AACF;AACE;AA5CF,KAFoC,CAiDpC;AACA;AACA;;;AACAzJ,IAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EApDoC,CAoDd;;AACtB0S,IAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EArDoC,CAqDd;;AACtBN,IAAAA,OAAO,CAACgT,OAAD,EAAU1B,OAAV,CAAP;AACAkL,IAAAA,SAAS,CAACC,CAAD,EAAIjI,YAAJ,CAAT;AACD;;AAED,WAASsI,4BAAT,CAAsCL,CAAtC,EAAyC;AACvC;AACJ;AACI,QAAIA,CAAC,KAAK,MAAV,EAAkB;AAAE;AAClBvG,MAAAA,YAAY;AACZlF,MAAAA,SAAS,GAAGwM,0BAAZ;AACD,KAHD,MAIK;AACHxK,MAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADG,CACmB;;AACtBkc,MAAAA,SAAS,CAACC,CAAD,EAAIvB,aAAJ,CAAT;AACD;AACF;;AAED,WAASsC,0BAAT,CAAoCf,CAApC,EAAuC;AACrC;AACA,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL,CAPA,CAOc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CxG,QAAAA,eAAe;AACfuG,QAAAA,SAAS,CAACC,CAAD,EAAIgB,0BAAJ,CAAT;AACA;;AACF;AACEzK,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtBkc,QAAAA,SAAS,CAACC,CAAD,EAAIvB,aAAJ,CAAT;AACA;AApBF;AAsBD;;AAED,WAASuC,0BAAT,CAAoChB,CAApC,EAAuC;AACrC;AACA,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACX,YAAI9F,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAG+E,2BAAZ;AACA;AACD;;AACD;;AACF,WAAK,MAAL;AAAa;AACX,YAAIY,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAGqM,4BAAZ;AACA;AACD;;AACD;;AACF,WAAK,MAAL;AAAa;AACX,YAAI1G,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAGC,UAAZ;AACAkG,UAAAA,OAAO;AACP;AACD;;AACD;;AACF,WAAK,MAAL,CAvBA,CAuBc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9C/F,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAAC,GAAG,MAAxB,CAAd;AACAnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACA;;AACF,WAAK,MAAL,CAhCA,CAgCc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CrL,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAApB,CAAd;AACAnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACA;;AACF;AACE;AA1CF,KAFqC,CA+CrC;AACA;AACA;;;AACAzJ,IAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAlDqC,CAkDf;;AACtB0S,IAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAnDqC,CAmDf;;AACtBN,IAAAA,OAAO,CAACgT,OAAD,EAAS1B,OAAT,CAAP;AACAkL,IAAAA,SAAS,CAACC,CAAD,EAAIvB,aAAJ,CAAT;AACD;;AAED,WAAS8B,gCAAT,CAA0CP,CAA1C,EAA6C;AAC3C,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXvG,QAAAA,YAAY;AACZlF,QAAAA,SAAS,GAAG0M,8BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX1M,QAAAA,SAAS,GAAG2M,8BAAZ;AACA3K,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAHF,CAGwB;;AACtB;;AACF;AACE0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtBkc,QAAAA,SAAS,CAACC,CAAD,EAAIM,iBAAJ,CAAT;AACA;AAbF;AAeD;;AAED,WAASW,8BAAT,CAAwCjB,CAAxC,EAA2C;AACzC;AACA,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL,CAPA,CAOc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CxG,QAAAA,eAAe;AACfuG,QAAAA,SAAS,CAACC,CAAD,EAAImB,8BAAJ,CAAT;AACA;;AACF;AACE5K,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtBkc,QAAAA,SAAS,CAACC,CAAD,EAAIM,iBAAJ,CAAT;AACA;AApBF;AAsBD;;AAED,WAASa,8BAAT,CAAwCnB,CAAxC,EAA2C;AACzC;AACA,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACX,YAAI9F,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAG+E,2BAAZ;AACA;AACD;;AACD;;AACF,WAAK,MAAL;AAAa;AACX,YAAIY,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAGqM,4BAAZ;AACA;AACD;;AACD;;AACF,WAAK,MAAL;AAAa;AACX,YAAI1G,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAGC,UAAZ;AACAkG,UAAAA,OAAO;AACP;AACD;;AACD;;AACF,WAAK,MAAL,CAvBA,CAuBc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAE9C/F,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAAC,GAAG,MAAxB,CAAd;AACAnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACA;;AACF,WAAK,MAAL,CAjCA,CAiCc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAE9CrL,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAApB,CAAd;AACAnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACA;;AACF;AACE;AA5CF,KAFyC,CAiDzC;AACA;AACA;;;AACAzJ,IAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EApDyC,CAoDnB;;AACtB0S,IAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EArDyC,CAqDnB;;AACtBN,IAAAA,OAAO,CAACgT,OAAD,EAAS1B,OAAT,CAAP;AACAkL,IAAAA,SAAS,CAACC,CAAD,EAAIM,iBAAJ,CAAT;AACD;;AAED,WAASY,8BAAT,CAAwClB,CAAxC,EAA2C;AACzC,QAAIA,CAAC,KAAK,MAAV,EAAkB;AAAE;AAClBzL,MAAAA,SAAS,GAAG6M,mCAAZ;AACA7K,MAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFgB,CAEM;AACvB,KAHD,MAIK;AACHkc,MAAAA,SAAS,CAACC,CAAD,EAAIM,iBAAJ,CAAT;AACD;AACF;;AAED,WAASc,mCAAT,CAA6CpB,CAA7C,EAAgD;AAC9C,QAAIA,CAAC,KAAK,MAAV,EAAkB;AAAE;AAClBzL,MAAAA,SAAS,GAAG8M,mCAAZ;AACA9K,MAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFgB,CAEM;AACvB,KAHD,MAIK;AACHkc,MAAAA,SAAS,CAACC,CAAD,EAAIM,iBAAJ,CAAT;AACD;AACF;;AAED,WAASgB,yBAAT,CAAmCtB,CAAnC,EAAsC;AACpC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGgN,8BAAZ;AACAhL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAGiN,wCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACEzE,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;AAhBF;AAkBD;;AAED,WAASuB,8BAAT,CAAwCvB,CAAxC,EAA2C;AACzC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG8M,mCAAZ;AACA9K,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAGiN,wCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjN,QAAAA,SAAS,GAAG+M,yBAAZ;AACA/K,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACEzG,QAAAA,SAAS,GAAG+M,yBAAZ;AACA/K,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;AAlBF;AAoBD;;AAED,WAASqB,mCAAT,CAA6CrB,CAA7C,EAAgD;AAC9C,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzJ,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAGiN,wCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjN,QAAAA,SAAS,GAAG+L,iBAAZ;AACA/J,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAG+M,yBAAZ;AACA/K,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACEzG,QAAAA,SAAS,GAAG+M,yBAAZ;AACA/K,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;AArBF;AAuBD;;AAED,WAASwB,wCAAT,CAAkDxB,CAAlD,EAAqD;AACnD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXvG,QAAAA,YAAY;AACZlF,QAAAA,SAAS,GAAGkN,sCAAZ;AACA;;AACF,WAAK,MAAL,CALA,CAKc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL,CAXA,CAWc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9ChI,QAAAA,YAAY;AACZlD,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAF8C,CAExB;;AACtBkc,QAAAA,SAAS,CAACC,CAAD,EAAI0B,qCAAJ,CAAT;AACA;;AACF;AACEnL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtBkc,QAAAA,SAAS,CAACC,CAAD,EAAIsB,yBAAJ,CAAT;AACA;AAxBF;AA0BD;;AAED,WAASG,sCAAT,CAAgDzB,CAAhD,EAAmD;AACjD,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL,CAPA,CAOc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CxG,QAAAA,eAAe;AACfuG,QAAAA,SAAS,CAACC,CAAD,EAAI2B,sCAAJ,CAAT;AACA;;AACF;AACEpL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtBkc,QAAAA,SAAS,CAACC,CAAD,EAAIsB,yBAAJ,CAAT;AACA;AApBF;AAsBD;;AAED,WAASK,sCAAT,CAAgD3B,CAAhD,EAAmD;AACjD,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACX,YAAI9F,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAG+E,2BAAZ;AACA;AACD;;AACD;;AACF,WAAK,MAAL;AAAa;AACX,YAAIY,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAGqM,4BAAZ;AACA;AACD;;AACD;;AACF,WAAK,MAAL;AAAa;AACX,YAAI1G,iBAAiB,CAACvF,UAAD,CAArB,EAAmC;AACjCJ,UAAAA,SAAS,GAAGC,UAAZ;AACAkG,UAAAA,OAAO;AACP;AACD;;AACD;;AACF,WAAK,MAAL,CAvBA,CAuBc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9C/F,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAAC,GAAG,MAAxB,CAAd;AACAnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACA;;AACF,WAAK,MAAL,CAhCA,CAgCc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CrL,QAAAA,UAAU,IAAIrG,MAAM,CAACC,YAAP,CAAoByR,CAApB,CAAd;AACAnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACA;;AACF;AACE;AA1CF,KADiD,CA8CjD;AACA;;;AACAzJ,IAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAhDiD,CAgD3B;;AACtB0S,IAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAjDiD,CAiD3B;;AACtBN,IAAAA,OAAO,CAACgT,OAAD,EAAS1B,OAAT,CAAP;AACAkL,IAAAA,SAAS,CAACC,CAAD,EAAIsB,yBAAJ,CAAT;AACD;;AAED,WAASI,qCAAT,CAA+C1B,CAA/C,EAAkD;AAChD,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL,CAJA,CAIa;;AACb,WAAK,MAAL,CALA,CAKa;;AACb,WAAK,MAAL;AAAa;AACX,YAAI9R,OAAO,CAAC2G,OAAD,CAAP,KAAqB,QAAzB,EAAmC;AACjCN,UAAAA,SAAS,GAAGqN,gCAAZ;AACD,SAFD,MAGK;AACHrN,UAAAA,SAAS,GAAG+M,yBAAZ;AACD;;AACD/K,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;;AACF,WAAK,MAAL,CAfA,CAec;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAC,GAAG,MAAjB;AACAzJ,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;;AACF,WAAK,MAAL,CAxBA,CAwBc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACAzJ,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;;AACF;AACED,QAAAA,SAAS,CAACC,CAAD,EAAIsB,yBAAJ,CAAT;AACA;AAnCF;AAqCD;;AAED,WAASM,gCAAT,CAA0C5B,CAA1C,EAA6C;AAC3C,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGsN,qCAAZ;AACAtL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAGuN,+CAAZ;AACAvL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACEzE,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;AAjBF;AAmBD;;AAED,WAAS6B,qCAAT,CAA+C7B,CAA/C,EAAkD;AAChD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGwN,0CAAZ;AACAxL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAGuN,+CAAZ;AACAvL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAGqN,gCAAZ;AACArL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACEzG,QAAAA,SAAS,GAAGqN,gCAAZ;AACArL,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;AAnBF;AAqBD;;AAED,WAAS+B,0CAAT,CAAoD/B,CAApD,EAAuD;AACrD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzJ,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EADF,CACwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAGuN,+CAAZ;AACAvL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAG+L,iBAAZ;AACA/J,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,MAAL;AAAa;AACX0Q,QAAAA,SAAS,GAAGqN,gCAAZ;AACArL,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAFF,CAEwB;;AACtB;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmX,QAAAA,OAAO;AACP;;AACF;AACEzG,QAAAA,SAAS,GAAGqN,gCAAZ;AACArL,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;AAtBF;AAwBD;;AAED,WAAS8B,+CAAT,CAAyD9B,CAAzD,EAA4D;AAC1D,QAAIA,CAAC,KAAK,MAAV,EAAkB;AAAE;AAClBvG,MAAAA,YAAY;AACZlF,MAAAA,SAAS,GAAGyN,mCAAZ;AACAzL,MAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb,EAHgB,CAGM;AACvB,KAJD,MAKK;AACHkc,MAAAA,SAAS,CAACC,CAAD,EAAI4B,gCAAJ,CAAT;AACD;AACF;;AAED,WAASI,mCAAT,CAA6ChC,CAA7C,EAAgD;AAC9C,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL,CAJA,CAIa;;AACb,WAAK,MAAL,CALA,CAKa;;AACb,WAAK,MAAL;AAAa;AACX,YAAI9R,OAAO,CAAC2G,OAAD,CAAP,KAAqB,QAAzB,EAAmC;AACjCN,UAAAA,SAAS,GAAG+M,yBAAZ;AACD,SAFD,MAGK;AACH/M,UAAAA,SAAS,GAAGqN,gCAAZ;AACD;;AACDrL,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;;AACF,WAAK,MAAL,CAfA,CAec;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAC,GAAG,MAAjB;AACAzJ,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;;AACF,WAAK,MAAL,CAxBA,CAwBc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACAzJ,QAAAA,OAAO,CAAC1S,IAAR,CAAamc,CAAb;AACA;;AACF;AACED,QAAAA,SAAS,CAACC,CAAD,EAAI4B,gCAAJ,CAAT;AACA;AAnCF;AAqCD;;AAED,WAAStI,2BAAT,CAAqC0G,CAArC,EAAwC;AACtC,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;;AACX;AACA;AACF;AACA;AACA;AACA;;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGqM,4BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXrM,QAAAA,SAAS,GAAGC,UAAZ;AACAkG,QAAAA,OAAO;AACP;;AACF,WAAK,CAAC,CAAN;AAAS;AACPM,QAAAA,OAAO;AACP;;AACF,WAAK,MAAL;AAAa;AACXtB,QAAAA,aAAa;AACb5E,QAAAA,WAAW,IAAIxG,MAAM,CAACC,YAAP,CAAoByR,CAApB,CAAf;AACAzL,QAAAA,SAAS,GAAG0N,oBAAZ;AACA;;AACF;AACE,YAAIlJ,qBAAqB,EAAzB,EAA6B;AAC7BW,QAAAA,aAAa;AACbqG,QAAAA,SAAS,CAACC,CAAD,EAAIiC,oBAAJ,CAAT;AACA;AA9BF;AAgCD,GA5pEoD,CA8pErD;AACA;;;AACA,WAASA,oBAAT,CAA8BjC,CAA9B,EAAiC;AAC/B,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL,CAJA,CAIa;;AACb,WAAK,MAAL,CALA,CAKa;;AACb,WAAK,MAAL,CANA,CAMa;;AACb,WAAK,CAAC,CAAN;AAAS;AACPD,QAAAA,SAAS,CAACC,CAAD,EAAIkC,0BAAJ,CAAT;AACA;;AACF,WAAK,MAAL;AAAa;AACX3N,QAAAA,SAAS,GAAG4N,4BAAZ;AACA;;AACF,WAAK,MAAL,CAbA,CAac;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CrN,QAAAA,WAAW,IAAIxG,MAAM,CAACC,YAAP,CAAoByR,CAAC,GAAG,MAAxB,CAAf;AACA;;AACF,WAAK,MAAL;AAAa;AACXlL,QAAAA,WAAW,IAAIxG,MAAM,CAACC,YAAP,CAAoB;AAAO;AAA3B,SAAf;AACA;;AACF,WAAK,MAAL,CAxBA,CAwBa;;AACb,WAAK,MAAL,CAzBA,CAyBa;;AACb,WAAK,MAAL,CA1BA,CA0Ba;;AACX;;AACF;AACEuG,QAAAA,WAAW,IAAIuF,gBAAgB,CAAC/M,QAAD,CAA/B;AACA;AA9BF;AAgCD,GAjsEoD,CAmsErD;;;AACA,WAAS4U,0BAAT,CAAoClC,CAApC,EAAuC;AACrC,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;;AACX;AACA;;AACF,WAAK,MAAL;AAAa;AACX;AACAlH,QAAAA,YAAY,CAAChE,WAAD,CAAZ;AACAP,QAAAA,SAAS,GAAGqM,4BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXrM,QAAAA,SAAS,GAAG4N,4BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX;AACA5N,QAAAA,SAAS,GAAGC,UAAZ;AACAsE,QAAAA,YAAY,CAAChE,WAAD,CAAZ;AACA4F,QAAAA,OAAO;AACP;;AACF,WAAK,CAAC,CAAN;AAAS;AACP;AACA5B,QAAAA,YAAY,CAAChE,WAAD,CAAZ;AACAkG,QAAAA,OAAO;AACP;;AACF;AACElC,QAAAA,YAAY,CAAChE,WAAD,CAAZ;AACA4E,QAAAA,aAAa;AACbqG,QAAAA,SAAS,CAACC,CAAD,EAAIiC,oBAAJ,CAAT;AACA;AA9BF;AAgCD;;AAED,WAASE,4BAAT,CAAsCnC,CAAtC,EAAyC;AACvC,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;;AACX;AACA;;AACF,WAAK,MAAL;AAAa;AACXrG,QAAAA,cAAc;AACdpF,QAAAA,SAAS,GAAG6N,mCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXzI,QAAAA,cAAc;AACdpF,QAAAA,SAAS,GAAG8N,mCAAZ;AACA;;AACF,WAAK,MAAL,CAfA,CAea;;AACX;;AACF;AACE1I,QAAAA,cAAc;AACdoG,QAAAA,SAAS,CAACC,CAAD,EAAIsC,8BAAJ,CAAT;AACA;AApBF;AAsBD;;AAED,WAASF,mCAAT,CAA6CpC,CAA7C,EAAgD;AAC9C,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXlH,QAAAA,YAAY,CAAChE,WAAD,EAAcC,YAAd,CAAZ;AACAR,QAAAA,SAAS,GAAG8E,kCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX5E,QAAAA,YAAY,GAAG2N,mCAAf;AACA7N,QAAAA,SAAS,GAAG2L,yBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXnL,QAAAA,YAAY,IAAIzG,MAAM,CAACC,YAAP,CAAoB;AAAO;AAA3B,SAAhB;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPyM,QAAAA,OAAO;AACP;;AACF,WAAK,MAAL;AAAa;AACX;AACAjG,QAAAA,YAAY,IAAIzG,MAAM,CAACC,YAAP,CAAoByR,CAApB,CAAhB;AACA;;AACF;AACEjL,QAAAA,YAAY,IAAIsF,gBAAgB,CAACnN,eAAD,CAAhC;AACA;AArBF;AAuBD;;AAED,WAASmV,mCAAT,CAA6CrC,CAA7C,EAAgD;AAC9C,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXlH,QAAAA,YAAY,CAAChE,WAAD,EAAcC,YAAd,CAAZ;AACAR,QAAAA,SAAS,GAAG8E,kCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX5E,QAAAA,YAAY,GAAG4N,mCAAf;AACA9N,QAAAA,SAAS,GAAG2L,yBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXnL,QAAAA,YAAY,IAAIzG,MAAM,CAACC,YAAP,CAAoB;AAAO;AAA3B,SAAhB;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPyM,QAAAA,OAAO;AACP;;AACF,WAAK,MAAL;AAAa;AACX;AACAjG,QAAAA,YAAY,IAAIzG,MAAM,CAACC,YAAP,CAAoByR,CAApB,CAAhB;AACA;;AACF;AACEjL,QAAAA,YAAY,IAAIsF,gBAAgB,CAAClN,kBAAD,CAAhC;AACA;AArBF;AAuBD;;AAED,WAASmV,8BAAT,CAAwCtC,CAAxC,EAA2C;AACzC,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACXlH,QAAAA,YAAY,CAAChE,WAAD,EAAcC,YAAd,CAAZ;AACAR,QAAAA,SAAS,GAAG+E,2BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX7E,QAAAA,YAAY,GAAG6N,8BAAf;AACA/N,QAAAA,SAAS,GAAG2L,yBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXpH,QAAAA,YAAY,CAAChE,WAAD,EAAcC,YAAd,CAAZ;AACAR,QAAAA,SAAS,GAAGC,UAAZ;AACAkG,QAAAA,OAAO;AACP;;AACF,WAAK,MAAL;AAAa;AACX3F,QAAAA,YAAY,IAAIzG,MAAM,CAACC,YAAP,CAAoB;AAAO;AAA3B,SAAhB;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPwF,QAAAA,QAAQ,GADV,CACc;;AACZQ,QAAAA,SAAS,GAAGC,UAAZ;AACA;;AACF,WAAK,MAAL,CAxBA,CAwBa;;AACb,WAAK,MAAL,CAzBA,CAyBa;;AACb,WAAK,MAAL,CA1BA,CA0Ba;;AACb,WAAK,MAAL,CA3BA,CA2Ba;;AACb,WAAK,MAAL,CA5BA,CA4Ba;;AACX;;AACF;AACEO,QAAAA,YAAY,IAAIsF,gBAAgB,CAACjN,eAAD,CAAhC;AACA;AAhCF;AAkCD;;AAED,WAASiM,kCAAT,CAA4C2G,CAA5C,EAA+C;AAC7C,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG+E,2BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX/E,QAAAA,SAAS,GAAGqM,4BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXrM,QAAAA,SAAS,GAAGC,UAAZ;AACAkG,QAAAA,OAAO;AACP;;AACF,WAAK,CAAC,CAAN;AAAS;AACPM,QAAAA,OAAO;AACP;;AACF;AACE+E,QAAAA,SAAS,CAACC,CAAD,EAAI1G,2BAAJ,CAAT;AACA;AAnBF;AAqBD;;AAED,WAASsH,4BAAT,CAAsCZ,CAAtC,EAAyC;AACvC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACX;AACAzL,QAAAA,SAAS,GAAGC,UAAZ;AACAsG,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPE,QAAAA,OAAO;AACP;;AACF;AACE+E,QAAAA,SAAS,CAACC,CAAD,EAAI1G,2BAAJ,CAAT;AACA;AAXF;AAaD;;AAED,WAASqH,mBAAT,CAA6BX,CAA7B,EAAgCrH,SAAhC,EAA2CD,GAA3C,EAAgD;AAC9C,QAAIU,GAAG,GAAGT,SAAS,CAACtK,MAApB;;AAEA,QAAIqK,GAAJ,EAAS;AACP3E,MAAAA,QAAQ,IAAIqF,GAAG,GAAC,CAAhB,CADO,CACY;AACpB,KAFD,MAGK;AACHrF,MAAAA,QAAQ,IAAIqF,GAAZ;AACD;;AAED,QAAImJ,OAAO,GAAG5J,SAAS,CAAChB,SAAV,CAAoB,CAApB,EAAuByB,GAAG,GAAC,CAA3B,CAAd;AAEAmJ,IAAAA,OAAO,GAAGA,OAAO,CAACjP,OAAR,CAAgB,SAAhB,EAA0B,QAA1B,CAAV;AACAiP,IAAAA,OAAO,GAAGA,OAAO,CAACjP,OAAR,CAAgB,eAAhB,EAAgC,QAAhC,CAAV;AACAiP,IAAAA,OAAO,GAAGA,OAAO,CAACjP,OAAR,CAAgB,SAAhB,EAA0B,QAA1B,CAAV;AAEA8G,IAAAA,WAAW,CAAClW,OAAD,EAAUqe,OAAV,CAAX;AACAhO,IAAAA,SAAS,GAAGC,UAAZ;AACD;;AACDmM,EAAAA,mBAAmB,CAAChI,SAApB,GAAgC,GAAhC;;AAEA,WAAS6H,6BAAT,CAAuCR,CAAvC,EAA0CrH,SAA1C,EAAqDD,GAArD,EAA0D;AACxD,QAAIC,SAAS,CAAC,CAAD,CAAT,KAAiB,GAAjB,IAAwBA,SAAS,CAAC,CAAD,CAAT,KAAiB,GAA7C,EAAkD;AAChD5E,MAAAA,QAAQ,IAAI,CAAZ;AACA6F,MAAAA,YAAY;AACZrF,MAAAA,SAAS,GAAGiO,mBAAZ;AACA;AACD;;AAED,QAAI7J,SAAS,CAAC8J,WAAV,OAA4B,SAAhC,EAA2C;AACzC1O,MAAAA,QAAQ,IAAI,CAAZ;AACAQ,MAAAA,SAAS,GAAGmO,aAAZ;AACD,KAHD,MAIK,IAAI/J,SAAS,KAAK,SAAd,IAA2BsB,YAAY,EAA3C,EAA+C;AAClDlG,MAAAA,QAAQ,IAAI,CAAZ;AACAQ,MAAAA,SAAS,GAAGoO,mBAAZ;AACD,KAHI,MAIA;AACHpO,MAAAA,SAAS,GAAGoM,mBAAZ;AACD;AACF;;AACDH,EAAAA,6BAA6B,CAAC7H,SAA9B,GAA0C,CAA1C;;AAEA,WAAS6J,mBAAT,CAA6BxC,CAA7B,EAAgC;AAC9BpG,IAAAA,YAAY;;AACZ,YAAOoG,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGqO,wBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXrO,QAAAA,SAAS,GAAGC,UAAZ;AACA4F,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACA;;AAAO;;AACT;AACE+K,QAAAA,SAAS,CAACC,CAAD,EAAI6C,aAAJ,CAAT;AACA;AAVF;AAYD;;AAED,WAASD,wBAAT,CAAkC5C,CAAlC,EAAqC;AACnC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGuO,iBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXvO,QAAAA,SAAS,GAAGC,UAAZ;AACA4F,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPoF,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACAgG,QAAAA,OAAO;AACP;;AAAO;;AACT;AACEhG,QAAAA,UAAU,CAACnR,IAAX,CAAgB;AAAO;AAAvB;AACAkc,QAAAA,SAAS,CAACC,CAAD,EAAI6C,aAAJ,CAAT;AACA;AAfF;AAiBD;;AAED,WAASA,aAAT,CAAuB7C,CAAvB,EAA0B;AACxB,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXhL,QAAAA,UAAU,CAACnR,IAAX,CAAgBmc,CAAhB;AACAzL,QAAAA,SAAS,GAAGwO,4BAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXxO,QAAAA,SAAS,GAAGyO,sBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXhO,QAAAA,UAAU,CAACnR,IAAX,CAAgB;AAAO;AAAvB;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPuW,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACAgG,QAAAA,OAAO;AACP;;AAAO;;AACT;AACEhG,QAAAA,UAAU,CAACnR,IAAX,CAAgBmc,CAAhB;AACA;AAjBF;AAmBD;;AAED,WAAS+C,4BAAT,CAAsC/C,CAAtC,EAAyC;AACvC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXhL,QAAAA,UAAU,CAACnR,IAAX,CAAgBmc,CAAhB;AACAzL,QAAAA,SAAS,GAAG0O,iCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjO,QAAAA,UAAU,CAACnR,IAAX,CAAgBmc,CAAhB;AACA;;AACF;AACED,QAAAA,SAAS,CAACC,CAAD,EAAI6C,aAAJ,CAAT;AACA;AAVF;AAYD;;AAED,WAASI,iCAAT,CAA2CjD,CAA3C,EAA8C;AAC5C,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG2O,sCAAZ;AACA;;AACF;AACEnD,QAAAA,SAAS,CAACC,CAAD,EAAI6C,aAAJ,CAAT;AACA;AANF;AAQD;;AAED,WAASK,sCAAT,CAAgDlD,CAAhD,EAAmD;AACjD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG4O,2CAAZ;AACA;;AACF;AACEpD,QAAAA,SAAS,CAACC,CAAD,EAAIgD,sBAAJ,CAAT;AACA;AANF;AAQD;;AAED,WAASG,2CAAT,CAAqDnD,CAArD,EAAwD;AACtD,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,CAAC,CAAN;AAAS;AACPD,QAAAA,SAAS,CAACC,CAAD,EAAI8C,iBAAJ,CAAT;AACA;;AACF;AACE;AACA/C,QAAAA,SAAS,CAACC,CAAD,EAAI8C,iBAAJ,CAAT;AACA;AARF;AAUD;;AAED,WAASE,sBAAT,CAAgChD,CAAhC,EAAmC;AACjC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGuO,iBAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACP1I,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACAgG,QAAAA,OAAO;AACP;;AAAO;;AACT;AACEhG,QAAAA,UAAU,CAACnR,IAAX,CAAgB;AAAO;AAAvB;AACAkc,QAAAA,SAAS,CAACC,CAAD,EAAI6C,aAAJ,CAAT;AACA;AAXF;AAaD;;AAED,WAASC,iBAAT,CAA2B9C,CAA3B,EAA8B;AAC5B,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGC,UAAZ;AACA4F,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACA;;AACF,WAAK,MAAL;AAAa;AACXT,QAAAA,SAAS,GAAG6O,sBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXpO,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPuW,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACAgG,QAAAA,OAAO;AACP;;AAAO;;AACT;AACEhG,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACAmR,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACAkc,QAAAA,SAAS,CAACC,CAAD,EAAI6C,aAAJ,CAAT;AACA;AAnBF;AAqBD;;AAED,WAASO,sBAAT,CAAgCpD,CAAhC,EAAmC;AACjC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXhL,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACAmR,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACAmR,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACA0Q,QAAAA,SAAS,GAAGyO,sBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXzO,QAAAA,SAAS,GAAGC,UAAZ;AACA4F,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPoF,QAAAA,WAAW,CAAClW,OAAD,EAAUgK,OAAO,CAAC8G,UAAD,CAAjB,CAAX;AACAgG,QAAAA,OAAO;AACP;;AAAO;;AACT;AACEhG,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACAmR,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACAmR,QAAAA,UAAU,CAACnR,IAAX,CAAgB,MAAhB;AACAkc,QAAAA,SAAS,CAACC,CAAD,EAAI6C,aAAJ,CAAT;AACA;AApBF;AAsBD;;AAED,WAASH,aAAT,CAAuB1C,CAAvB,EAA0B;AACxB,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG8O,yBAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPxJ,QAAAA,YAAY;AACZG,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACE+E,QAAAA,SAAS,CAACC,CAAD,EAAIqD,yBAAJ,CAAT;AACA;AAfF;AAiBD;;AAED,WAASA,yBAAT,CAAmCrD,CAAnC,EAAsC;AACpC,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;;AACX;AACA;;AACF,WAAK,MAAL,CAPA,CAOc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9CnG,QAAAA,YAAY;AACZ5E,QAAAA,cAAc,CAACpR,IAAf,CAAoBmc,CAAC,GAAG,MAAxB;AACAzL,QAAAA,SAAS,GAAG+O,kBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXzJ,QAAAA,YAAY;AACZ5E,QAAAA,cAAc,CAACpR,IAAf,CAAoB,MAApB;AACA0Q,QAAAA,SAAS,GAAG+O,kBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXzJ,QAAAA,YAAY;AACZG,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPlB,QAAAA,YAAY;AACZG,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACEnB,QAAAA,YAAY;AACZ5E,QAAAA,cAAc,CAACpR,IAAf,CAAoBmc,CAApB;AACAzL,QAAAA,SAAS,GAAG+O,kBAAZ;AACA;AAtCF;AAwCD;;AAED,WAASA,kBAAT,CAA4BtD,CAA5B,EAA+B;AAC7B,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGgP,wBAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXhP,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,MAAL,CAXA,CAWc;;AACd,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAChD,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAAY,WAAK,MAAL;AAC9C9F,QAAAA,cAAc,CAACpR,IAAf,CAAoBmc,CAAC,GAAG,MAAxB;AACA;;AACF,WAAK,MAAL;AAAa;AACX/K,QAAAA,cAAc,CAACpR,IAAf,CAAoB;AAAO;AAA3B;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPmW,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACE/F,QAAAA,cAAc,CAACpR,IAAf,CAAoBmc,CAApB;AACA;AA7BF;AA+BD;;AAED,WAASuD,wBAAT,CAAkCvD,CAAlC,EAAqCrH,SAArC,EAAgDD,GAAhD,EAAqD;AACnD,YAAOsH,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;;AACX;AACAjM,QAAAA,QAAQ,IAAI,CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXQ,QAAAA,SAAS,GAAGC,UAAZ;AACAT,QAAAA,QAAQ,IAAI,CAAZ;AACAgH,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACErC,QAAAA,SAAS,GAAGA,SAAS,CAAC8J,WAAV,EAAZ;;AACA,YAAI9J,SAAS,KAAK,QAAlB,EAA4B;AAC1B5E,UAAAA,QAAQ,IAAI,CAAZ;AACAQ,UAAAA,SAAS,GAAGiP,kCAAZ;AACD,SAHD,MAIK,IAAI7K,SAAS,KAAK,QAAlB,EAA4B;AAC/B5E,UAAAA,QAAQ,IAAI,CAAZ;AACAQ,UAAAA,SAAS,GAAGkP,kCAAZ;AACD,SAHI,MAIA;AACHzJ,UAAAA,WAAW;AACXzF,UAAAA,SAAS,GAAGmP,mBAAZ;AACD;;AACD;AAhCF;AAkCD;;AACDH,EAAAA,wBAAwB,CAAC5K,SAAzB,GAAqC,CAArC;;AAEA,WAAS6K,kCAAT,CAA4CxD,CAA5C,EAA+C;AAC7C,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGoP,sCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX7J,QAAAA,oBAAoB;AACpBvF,QAAAA,SAAS,GAAGqP,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX9J,QAAAA,oBAAoB;AACpBvF,QAAAA,SAAS,GAAGsP,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX7J,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACEhB,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGmP,mBAAZ;AACA;AA5BF;AA8BD;;AAED,WAASC,sCAAT,CAAgD3D,CAAhD,EAAmD;AACjD,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;;AACX;AACA;;AACF,WAAK,MAAL;AAAa;AACXlG,QAAAA,oBAAoB;AACpBvF,QAAAA,SAAS,GAAGqP,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX9J,QAAAA,oBAAoB;AACpBvF,QAAAA,SAAS,GAAGsP,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX7J,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACEhB,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGmP,mBAAZ;AACA;AA5BF;AA8BD;;AAED,WAASE,6CAAT,CAAuD5D,CAAvD,EAA0D;AACxD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGuP,qCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX5O,QAAAA,gBAAgB,CAACrR,IAAjB,CAAsB;AAAO;AAA7B;AACA;;AACF,WAAK,MAAL;AAAa;AACXmW,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACE9F,QAAAA,gBAAgB,CAACrR,IAAjB,CAAsBmc,CAAtB;AACA;AAnBF;AAqBD;;AAED,WAAS6D,6CAAT,CAAuD7D,CAAvD,EAA0D;AACxD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGuP,qCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACX5O,QAAAA,gBAAgB,CAACrR,IAAjB,CAAsB;AAAO;AAA7B;AACA;;AACF,WAAK,MAAL;AAAa;AACXmW,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACE9F,QAAAA,gBAAgB,CAACrR,IAAjB,CAAsBmc,CAAtB;AACA;AAnBF;AAqBD;;AAED,WAAS8D,qCAAT,CAA+C9D,CAA/C,EAAkD;AAChD,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGwP,mDAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXxP,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,MAAL;AAAa;AACXhB,QAAAA,oBAAoB;AACpBxF,QAAAA,SAAS,GAAGyP,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjK,QAAAA,oBAAoB;AACpBxF,QAAAA,SAAS,GAAG0P,6CAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPjK,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACEhB,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGmP,mBAAZ;AACA;AA3BF;AA6BD;;AAED,WAASK,mDAAT,CAA6D/D,CAA7D,EAAgE;AAC9D,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACX;;AACF,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,MAAL;AAAa;AACXhB,QAAAA,oBAAoB;AACpBxF,QAAAA,SAAS,GAAGyP,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjK,QAAAA,oBAAoB;AACpBxF,QAAAA,SAAS,GAAG0P,6CAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPjK,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACEhB,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGmP,mBAAZ;AACA;AA1BF;AA4BD;;AAED,WAASD,kCAAT,CAA4CzD,CAA5C,EAA+C;AAC7C,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG2P,sCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXnK,QAAAA,oBAAoB;AACpBxF,QAAAA,SAAS,GAAGyP,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjK,QAAAA,oBAAoB;AACpBxF,QAAAA,SAAS,GAAG0P,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjK,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACEhB,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGmP,mBAAZ;AACA;AA5BF;AA8BD;;AAED,WAASQ,sCAAT,CAAgDlE,CAAhD,EAAmD;AACjD,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;AACX;;AACF,WAAK,MAAL;AAAa;AACXjG,QAAAA,oBAAoB;AACpBxF,QAAAA,SAAS,GAAGyP,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjK,QAAAA,oBAAoB;AACpBxF,QAAAA,SAAS,GAAG0P,6CAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXjK,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACEhB,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGmP,mBAAZ;AACA;AA3BF;AA6BD;;AAED,WAASM,6CAAT,CAAuDhE,CAAvD,EAA0D;AACxD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG4P,qCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXhP,QAAAA,gBAAgB,CAACtR,IAAjB,CAAsB;AAAO;AAA7B;AACA;;AACF,WAAK,MAAL;AAAa;AACXmW,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACE7F,QAAAA,gBAAgB,CAACtR,IAAjB,CAAsBmc,CAAtB;AACA;AAnBF;AAqBD;;AAED,WAASiE,6CAAT,CAAuDjE,CAAvD,EAA0D;AACxD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG4P,qCAAZ;AACA;;AACF,WAAK,MAAL;AAAa;AACXhP,QAAAA,gBAAgB,CAACtR,IAAjB,CAAsB;AAAO;AAA7B;AACA;;AACF,WAAK,MAAL;AAAa;AACXmW,QAAAA,WAAW;AACXzF,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACE7F,QAAAA,gBAAgB,CAACtR,IAAjB,CAAsBmc,CAAtB;AACA;AAnBF;AAqBD;;AAED,WAASmE,qCAAT,CAA+CnE,CAA/C,EAAkD;AAChD,YAAOA,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL;AAAa;;AACX;AACA;;AACF,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPf,QAAAA,WAAW;AACXe,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACEzG,QAAAA,SAAS,GAAGmP,mBAAZ;AACA;;AACA;AAnBF;AAqBD;;AAED,WAASA,mBAAT,CAA6B1D,CAA7B,EAAgC;AAC9B,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGC,UAAZ;AACAuG,QAAAA,WAAW;AACX;;AACF,WAAK,CAAC,CAAN;AAAS;AACPA,QAAAA,WAAW;AACXC,QAAAA,OAAO;AACP;;AACF;AACE;AACA;AAXF;AAaD;;AAED,WAAS2H,mBAAT,CAA6B3C,CAA7B,EAAgC;AAC9B,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG6P,2BAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPpJ,QAAAA,OAAO;AACP;;AACF,WAAK,MAAL;AAAa;AACXxE,QAAAA,eAAe,GAAG,IAAlB;;AACA;;AACF;AACE;AACA;AACA;;AACA;AACAgE,QAAAA,cAAc,CAACjN,SAAD,CAAd,IAA6BgJ,OAAO,CAAC1S,IAAR,CAAamc,CAAb,CAA7B;AACA;AAhBF;AAkBD;;AAED,WAASoE,2BAAT,CAAqCpE,CAArC,EAAwC;AACtC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAG8P,uBAAZ;AACA;;AACF;AACE9N,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb;AACAkc,QAAAA,SAAS,CAACC,CAAD,EAAI2C,mBAAJ,CAAT;AACA;AAPF;AASD;;AAED,WAAS0B,uBAAT,CAAiCrE,CAAjC,EAAoC;AAClC,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa;AACXzJ,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb;AACA;;AACF,WAAK,MAAL;AAAa;AACXsW,QAAAA,SAAS;AACT5F,QAAAA,SAAS,GAAGC,UAAZ;AACA;;AACF;AACE+B,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb;AACA0S,QAAAA,OAAO,CAAC1S,IAAR,CAAa,MAAb;AACAkc,QAAAA,SAAS,CAACC,CAAD,EAAI2C,mBAAJ,CAAT;AACA;AAZF;AAcD;;AAED,WAASzC,yBAAT,CAAmCF,CAAnC,EAAsC;AACpCvG,IAAAA,YAAY;AACZ5E,IAAAA,OAAO,CAAChR,IAAR,CAAa,MAAb;;AACA,YAAOmc,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL,CAFA,CAEa;;AACb,WAAK,MAAL,CAHA,CAGa;;AACb,WAAK,MAAL,CAJA,CAIa;;AACb,WAAK,MAAL,CALA,CAKa;;AACb,WAAK,MAAL,CANA,CAMa;;AACb,WAAK,CAAC,CAAN;AAAS;AACPD,QAAAA,SAAS,CAACC,CAAD,EAAIsE,6BAAJ,CAAT;AACA;;AACF,WAAK,MAAL;AAAa;AACXzP,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACAzL,QAAAA,SAAS,GAAGgQ,iCAAZ;AACA;;AACF;AACExE,QAAAA,SAAS,CAACC,CAAD,EAAIwE,+BAAJ,CAAT;AACA;AAhBF;AAkBD;;AAED,WAASA,+BAAT,CAAyCxE,CAAzC,EAA4C;AAC1ChT,IAAAA,YAAY,CAACgM,SAAb,GAAyBjF,QAAzB,CAD0C,CACP;;AACnC,QAAIkF,OAAO,GAAGjM,YAAY,CAACkM,IAAb,CAAkBrF,KAAlB,CAAd;AACA,QAAI,CAACoF,OAAL,EAAc,MAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;AACd,QAAIxJ,IAAI,GAAGsJ,OAAO,CAAC,CAAD,CAAlB;;AACA,QAAI,CAACtJ,IAAL,EAAW;AACT;AACA4E,MAAAA,SAAS,GAAG+P,6BAAZ;AACA;AACD,KATyC,CAW1C;;;AACAvQ,IAAAA,QAAQ,IAAIpE,IAAI,CAACtB,MAAjB;AACA9K,IAAAA,OAAO,CAACsR,OAAD,EAAUlG,OAAO,CAACgB,IAAD,CAAjB,CAAP;;AAEA,YAAO8E,YAAP;AACA,WAAK2N,mCAAL;AACA,WAAKC,mCAAL;AACA,WAAKC,8BAAL;AACE;AACA,YAAI3S,IAAI,CAACA,IAAI,CAACtB,MAAL,GAAY,CAAb,CAAJ,KAAwB,GAA5B,EAAiC;AAAE;AACjC,cAAI,eAAeoW,IAAf,CAAoB5Q,KAAK,CAACE,QAAD,CAAzB,CAAJ,EAA0C;AACxCQ,YAAAA,SAAS,GAAG+P,6BAAZ;AACA;AACD;AACF;;AACD;;AACF;AACE;AAbF;;AAgBA7K,IAAAA,YAAY;AACZ,QAAIiL,EAAE,GAAG3X,aAAa,CAAC4C,IAAD,CAAtB;;AACA,QAAI,OAAO+U,EAAP,KAAc,QAAlB,EAA4B;AAC1B7P,MAAAA,OAAO,CAAChR,IAAR,CAAa6gB,EAAb;AACD,KAFD,MAEO;AACLnhB,MAAAA,OAAO,CAACsR,OAAD,EAAU6P,EAAV,CAAP;AACD;;AACDnQ,IAAAA,SAAS,GAAG+P,6BAAZ;AACD,GA1pGoD,CA2pGrD;AACA;;;AACAE,EAAAA,+BAA+B,CAAC7L,SAAhC,GAA4C,CAAC1L,mBAA7C;;AAEA,WAASsX,iCAAT,CAA2CvE,CAA3C,EAA8C;AAC5CtL,IAAAA,wBAAwB,GAAG,CAA3B;;AACA,YAAOsL,CAAP;AACA,WAAK,MAAL,CADA,CACa;;AACb,WAAK,MAAL;AAAa;AACXnL,QAAAA,OAAO,CAAChR,IAAR,CAAamc,CAAb;AACAzL,QAAAA,SAAS,GAAGoQ,2CAAZ;AACA;;AACF;AACE5E,QAAAA,SAAS,CAACC,CAAD,EAAI4E,uCAAJ,CAAT;AACA;AARF;AAUD;;AAED,WAASD,2CAAT,CAAqD3E,CAArD,EAAwD;AACtD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AACpD,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL,CAFpD,CAEiE;;AACjE,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AACpD,WAAK,MAAL,CAJA,CAIa;;AACb,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AACpD,WAAK,MAAL;AAAa;AACXD,QAAAA,SAAS,CAACC,CAAD,EAAI6E,qCAAJ,CAAT;AACA;;AACF;AACE9E,QAAAA,SAAS,CAACC,CAAD,EAAIsE,6BAAJ,CAAT;AACA;AAXF;AAaD;;AAED,WAASM,uCAAT,CAAiD5E,CAAjD,EAAoD;AAClD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AACpD,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa;AAC/DD,QAAAA,SAAS,CAACC,CAAD,EAAI8E,iCAAJ,CAAT;AACA;;AACF;AACE/E,QAAAA,SAAS,CAACC,CAAD,EAAIsE,6BAAJ,CAAT;AACA;AAPF;AASD;;AAED,WAASO,qCAAT,CAA+C7E,CAA/C,EAAkD;AAChD,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AACpD,WAAK,MAAL;AAAa;AACXtL,QAAAA,wBAAwB,IAAI,EAA5B;AACAA,QAAAA,wBAAwB,IAAKsL,CAAC,GAAG,MAAjC;AACA;;AACF,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AACpD,WAAK,MAAL;AAAa;AACXtL,QAAAA,wBAAwB,IAAI,EAA5B;AACAA,QAAAA,wBAAwB,IAAKsL,CAAC,GAAG,MAAjC;AACA;;AACF,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AACpD,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa;AAC/DtL,QAAAA,wBAAwB,IAAI,EAA5B;AACAA,QAAAA,wBAAwB,IAAKsL,CAAC,GAAG,MAAjC;AACA;;AACF,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGwQ,qCAAZ;AACA;;AACF;AACEhF,QAAAA,SAAS,CAACC,CAAD,EAAI+E,qCAAJ,CAAT;AACA;AArBF;AAuBD;;AAED,WAASD,iCAAT,CAA2C9E,CAA3C,EAA8C;AAC5C,YAAOA,CAAP;AACA,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AACpD,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa,WAAK,MAAL;AAAa;AAC/DtL,QAAAA,wBAAwB,IAAI,EAA5B;AACAA,QAAAA,wBAAwB,IAAKsL,CAAC,GAAG,MAAjC;AACA;;AACF,WAAK,MAAL;AAAa;AACXzL,QAAAA,SAAS,GAAGwQ,qCAAZ;AACA;;AACF;AACEhF,QAAAA,SAAS,CAACC,CAAD,EAAI+E,qCAAJ,CAAT;AACA;AAXF;AAaD;;AAED,WAASA,qCAAT,CAA+C/E,CAA/C,EAAkD;AAChD,QAAItL,wBAAwB,IAAI5H,0BAAhC,EAA4D;AAC1D4H,MAAAA,wBAAwB,GAAG5H,0BAA0B,CAAC4H,wBAAD,CAArD;AACD,KAFD,MAEO,IAAIA,wBAAwB,GAAG,QAA3B,IAAwCA,wBAAwB,IAAI,MAA5B,IAAsCA,wBAAwB,GAAG,MAA7G,EAAsH;AAC3HA,MAAAA,wBAAwB,GAAG,MAA3B;AACD;;AAED+E,IAAAA,YAAY;;AACZ,QAAI/E,wBAAwB,IAAI,MAAhC,EAAwC;AACtCG,MAAAA,OAAO,CAAChR,IAAR,CAAa6Q,wBAAb;AACD,KAFD,MAEO;AACLA,MAAAA,wBAAwB,GAAGA,wBAAwB,GAAG,OAAtD;AACA;;AACAG,MAAAA,OAAO,CAAChR,IAAR,CAAa,UAAU6Q,wBAAwB,IAAI,EAAtC,CAAb;AACAG,MAAAA,OAAO,CAAChR,IAAR,CAAa,UAAU6Q,wBAAwB,GAAG,MAArC,CAAb;AACD;;AACDqL,IAAAA,SAAS,CAACC,CAAD,EAAIsE,6BAAJ,CAAT;AACD;;AAED,WAASA,6BAAT,CAAuCtE,CAAvC,EAA0C;AACxC,YAAOvL,YAAP;AACA,WAAK2N,mCAAL;AACA,WAAKC,mCAAL;AACA,WAAKC,8BAAL;AACE;AACAvN,QAAAA,YAAY,IAAI7G,OAAO,CAAC2G,OAAD,CAAvB;AACA;;AACF;AACEtR,QAAAA,OAAO,CAACgT,OAAD,EAAU1B,OAAV,CAAP;AACA;AATF;;AAWAkL,IAAAA,SAAS,CAACC,CAAD,EAAIvL,YAAJ,CAAT;AACD;AAED;AACF;AACA;AAEE;;;AACA,WAASc,YAAT,CAAsB2F,CAAtB,EAAyBjL,KAAzB,EAAgCkL,IAAhC,EAAsCC,IAAtC,EAA4C;AAC1C,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACNjL,QAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAActF,SAAd,EAAyB,EAAzB,CAAR,CADF,CACwC;;AACtC,YAAIiC,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB,OAF1B,CAEkC;;AAChC;AAAO;;AACT,WAAK,CAAL;AAAQ;AACNuI,QAAAA,GAAG,CAACsB,YAAJ,CAAiBtB,GAAG,CAACgF,aAAJ,CAAkB3L,KAAlB,CAAjB;;AACA;;AACF,WAAK,CAAL;AAAQ;AACN,YAAIN,IAAI,GAAGM,KAAX;AACA,YAAI+U,QAAQ,GAAG7J,IAAf;AACA,YAAI8J,QAAQ,GAAG7J,IAAf,CAHF,CAIE;AACA;AACA;AACA;;AACAxE,QAAAA,GAAG,CAACO,WAAJ,CAAgB,IAAIlU,YAAJ,CAAiB2T,GAAjB,EAAsBjH,IAAtB,EAA4BqV,QAA5B,EAAsCC,QAAtC,CAAhB,EARF,CAUE;AACA;;AACA,YAAI7O,YAAY,IACdzG,IAAI,CAACF,WAAL,OAAuB,MADrB,IAEFpL,eAAe,CAACogB,IAAhB,CAAqBO,QAArB,CAFE,IAGDC,QAAQ,IAAIA,QAAQ,CAACxV,WAAT,OAA2BnL,cAHtC,IAID2gB,QAAQ,KAAKpP,SAAb,IACAtR,4BAA4B,CAACkgB,IAA7B,CAAkCO,QAAlC,CALH,EAMEpO,GAAG,CAACiB,OAAJ,GAAc,IAAd,CANF,KAOK,IAAIrT,sBAAsB,CAACigB,IAAvB,CAA4BO,QAA5B,KACHC,QAAQ,KAAKpP,SAAb,IACAtR,4BAA4B,CAACkgB,IAA7B,CAAkCO,QAAlC,CAFD,EAGHpO,GAAG,CAACkB,cAAJ,GAAqB,IAArB;AACFxC,QAAAA,MAAM,GAAG4P,gBAAT;AACA;AAhCF,KAD0C,CAoC1C;;;AACAtO,IAAAA,GAAG,CAACiB,OAAJ,GAAc,IAAd;AACAvC,IAAAA,MAAM,GAAG4P,gBAAT;AACA5P,IAAAA,MAAM,CAAC4F,CAAD,EAAGjL,KAAH,EAASkL,IAAT,EAAcC,IAAd,CAAN;AACD,GAl0GoD,CAo0GrD;;;AACA,WAAS8J,gBAAT,CAA0BhK,CAA1B,EAA4BjL,KAA5B,EAAkCkL,IAAlC,EAAuCC,IAAvC,EAA6C;AAC3C,QAAIrM,GAAJ;;AACA,YAAOmM,CAAP;AACA,WAAK,CAAL;AAAQ;AACNjL,QAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAActF,SAAd,EAAyB,EAAzB,CAAR,CADF,CACwC;;AACtC,YAAIiC,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB,OAF1B,CAEkC;;AAChC;AAAO;;AACT,WAAK,CAAL;AAAQ;;AACN;AACA;;AACF,WAAK,CAAL;AAAQ;AACNuI,QAAAA,GAAG,CAACsB,YAAJ,CAAiBtB,GAAG,CAACgF,aAAJ,CAAkB3L,KAAlB,CAAjB;;AACA;;AACF,WAAK,CAAL;AAAQ;AACN,YAAIA,KAAK,KAAK,MAAd,EAAsB;AACpBlB,UAAAA,GAAG,GAAGqN,aAAa,CAACxF,GAAD,EAAM3G,KAAN,EAAakL,IAAb,CAAnB;AACAzF,UAAAA,KAAK,CAAC7R,IAAN,CAAWkL,GAAX;AACA6H,UAAAA,GAAG,CAACO,WAAJ,CAAgBpI,GAAhB,EAHoB,CAIpB;;AACAuG,UAAAA,MAAM,GAAG8I,gBAAT;AACA;AACD;;AACD;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOnO,KAAP;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACE;AAAQ;;AACV;AACE;AAAQ;AAPV;;AAtBF,KAF2C,CAmC3C;;;AACAlB,IAAAA,GAAG,GAAGqN,aAAa,CAACxF,GAAD,EAAM,MAAN,EAAc,IAAd,CAAnB;AACAlB,IAAAA,KAAK,CAAC7R,IAAN,CAAWkL,GAAX;AACA6H,IAAAA,GAAG,CAACO,WAAJ,CAAgBpI,GAAhB,EAtC2C,CAuC3C;;AACAuG,IAAAA,MAAM,GAAG8I,gBAAT;AACA9I,IAAAA,MAAM,CAAC4F,CAAD,EAAGjL,KAAH,EAASkL,IAAT,EAAcC,IAAd,CAAN;AACD,GA/2GoD,CAi3GrD;;;AACA,WAASgD,gBAAT,CAA0BlD,CAA1B,EAA4BjL,KAA5B,EAAkCkL,IAAlC,EAAuCC,IAAvC,EAA6C;AAC3C,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACNjL,QAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAActF,SAAd,EAAyB,EAAzB,CAAR,CADF,CACyC;;AACvC,YAAIiC,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB,OAF1B,CAEkC;;AAChC;AAAQ;;AACV,WAAK,CAAL;AAAQ;;AACN;AACA;;AACF,WAAK,CAAL;AAAQ;AACNkN,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOA,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAGjL,KAAH,EAASkL,IAAT,EAAcC,IAAd,CAAZ;AACA;;AACF,eAAK,MAAL;AACE,gBAAIrM,GAAG,GAAGsN,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAA3B;AACArF,YAAAA,oBAAoB,GAAG/G,GAAvB;AACAuG,YAAAA,MAAM,GAAGgJ,YAAT;AACA;AARF;;AAUA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOrO,KAAP;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACE;;AACF;AACE;AAAQ;AAPV;;AAxBF,KAD2C,CAoC3C;;;AACAmO,IAAAA,gBAAgB,CAACpa,GAAD,EAAM,MAAN,EAAc,IAAd,CAAhB,CArC2C,CAqCN;;AACrCsR,IAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN,CAtC2C,CAsCb;AAC/B;;AAED,WAASkD,YAAT,CAAsBpD,CAAtB,EAAyBjL,KAAzB,EAAgCkL,IAAhC,EAAsCC,IAAtC,EAA4C;AAC1C,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,YAAIiK,EAAE,GAAGlV,KAAK,CAACqK,KAAN,CAAYtM,SAAZ,CAAT;;AACA,YAAImX,EAAJ,EAAQ;AACNrJ,UAAAA,UAAU,CAACqJ,EAAE,CAAC,CAAD,CAAH,CAAV;AACAlV,UAAAA,KAAK,GAAGA,KAAK,CAAC0H,SAAN,CAAgBwN,EAAE,CAAC,CAAD,CAAF,CAAM9W,MAAtB,CAAR;AACD;;AACD,YAAI4B,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB;AACxB;AAAO;;AACT,WAAK,CAAL;AAAQ;AACNkN,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOA,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,MAAL,CAJA,CAKE;AACA;;AACA;;AACF,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,SAAL;AACA,eAAK,MAAL;AACEiB,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACAzF,YAAAA,KAAK,CAACnF,GAAN;AACA;;AACF,eAAK,OAAL;AACEoO,YAAAA,WAAW,CAAC1O,KAAD,EAAQkL,IAAR,CAAX;AACA;;AACF,eAAK,UAAL;AACE,gBAAI,CAACnF,iBAAL,EAAwB;AACtBqG,cAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA7F,cAAAA,MAAM,GAAG8P,qBAAT;AACA;AACD;;AACD;;AACA;;AACF,eAAK,UAAL;AACA,eAAK,OAAL;AACE5G,YAAAA,YAAY,CAACvO,KAAD,EAAOkL,IAAP,CAAZ;AACA;;AACF,eAAK,QAAL;AACEmB,YAAAA,aAAa,CAAC,UAAS1F,GAAT,EAAc;AAC1B,kBAAI7H,GAAG,GAAGqN,aAAa,CAACxF,GAAD,EAAM3G,KAAN,EAAakL,IAAb,CAAvB;AACApM,cAAAA,GAAG,CAACsW,gBAAJ,GAAuB,IAAvB;AACAtW,cAAAA,GAAG,CAACuW,YAAJ,GAAmB,KAAnB;AACA,kBAAI1P,QAAJ,EAAc7G,GAAG,CAACwW,gBAAJ,GAAuB,IAAvB;AACdpL,cAAAA,SAAS;AACT,qBAAOpL,GAAP;AACD,aAPY,CAAb;AAQAwF,YAAAA,SAAS,GAAG+L,iBAAZ;AACA9K,YAAAA,qBAAqB,GAAGF,MAAxB;AACAA,YAAAA,MAAM,GAAGoJ,SAAT;AACA;;AACF,eAAK,UAAL;AACErC,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACAxF,YAAAA,GAAG,CAACpD,YAAJ;AACA4D,YAAAA,WAAW,GAAG,KAAd;AACAb,YAAAA,MAAM,GAAG8C,gBAAT;AACA3C,YAAAA,sBAAsB,CAAC5R,IAAvB,CAA4ByR,MAA5B;AACA;;AACF,eAAK,MAAL;AACE;AAAQ;AAnDV;;AAqDA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOrF,KAAP;AACA,eAAK,MAAL;AACEyF,YAAAA,KAAK,CAACnF,GAAN;AACA+E,YAAAA,MAAM,GAAG+I,eAAT;AACA;;AACF,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACE;AAAO;;AACT,eAAK,UAAL;AACE,gBAAI,CAAC3I,KAAK,CAACxE,QAAN,CAAe,UAAf,CAAL,EAAiC;AAC/B;AACD;;AACDwE,YAAAA,KAAK,CAAC3D,sBAAN,CAA6B,IAA7B,EAAmC,UAAnC;AACA2D,YAAAA,KAAK,CAAClF,MAAN,CAAa,UAAb;AACAmF,YAAAA,GAAG,CAACzC,aAAJ;AACAuC,YAAAA,sBAAsB,CAAClF,GAAvB;AACA8H,YAAAA,kBAAkB;AAClB;;AACF;AACE;AACA;AArBF;;AAuBA;AA7FF,KAD0C,CAiG1C;;;AACAiG,IAAAA,YAAY,CAACra,MAAD,EAAS,MAAT,EAAiB,IAAjB,CAAZ,CAlG0C,CAkGJ;;AACtCqR,IAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN,CAnG0C,CAmGV;AACjC,GA//GoD,CAigHrD;;;AACA,WAASgK,qBAAT,CAA+BlK,CAA/B,EAAkCjL,KAAlC,EAAyCkL,IAAzC,EAA+CC,IAA/C,EAAqD;AACnD,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAL;AAAQ;AACNoD,QAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,CAAZ;AACA;;AACF,WAAK,CAAL;AAAQ;AACN,YAAIkV,EAAE,GAAGlV,KAAK,CAACqK,KAAN,CAAYtM,SAAZ,CAAT;;AACA,YAAImX,EAAJ,EAAQ;AACN7G,UAAAA,YAAY,CAACpD,CAAD,EAAIiK,EAAE,CAAC,CAAD,CAAN,CAAZ;AACAlV,UAAAA,KAAK,GAAGA,KAAK,CAAC0H,SAAN,CAAgBwN,EAAE,CAAC,CAAD,CAAF,CAAM9W,MAAtB,CAAR;AACD;;AACD,YAAI4B,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB,OAN1B,CAMkC;;AAChC;AAAO;;AACT,WAAK,CAAL;AAAQ;AACN,gBAAO4B,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,UAAL;AACA,eAAK,SAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACEkD,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,CAAZ;AACA;;AACF,eAAK,MAAL;AACA,eAAK,UAAL;AACE;AAdF;;AAgBA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOlL,KAAP;AACA,eAAK,UAAL;AACEyF,YAAAA,KAAK,CAACnF,GAAN;AACA+E,YAAAA,MAAM,GAAGgJ,YAAT;AACA;;AACF,eAAK,IAAL;AACE;AAAQ;;AACV;AACE;AAAQ;AARV;;AAUA;AA3CF,KADmD,CA+CnD;;;AACA8G,IAAAA,qBAAqB,CAACnhB,MAAD,EAAS,UAAT,EAAqB,IAArB,CAArB;AACAqR,IAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AAED,WAASiD,eAAT,CAAyBnD,CAAzB,EAA4BjL,KAA5B,EAAmCkL,IAAnC,EAAyCC,IAAzC,EAA+C;AAC7C,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,YAAIiK,EAAE,GAAGlV,KAAK,CAACqK,KAAN,CAAYtM,SAAZ,CAAT;;AACA,YAAImX,EAAJ,EAAQ;AACNrJ,UAAAA,UAAU,CAACqJ,EAAE,CAAC,CAAD,CAAH,CAAV;AACAlV,UAAAA,KAAK,GAAGA,KAAK,CAAC0H,SAAN,CAAgBwN,EAAE,CAAC,CAAD,CAAF,CAAM9W,MAAtB,CAAR;AACD;;AACD,YAAI4B,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB;AACxB;AAAO;;AACT,WAAK,CAAL;AAAQ;AACNkN,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOA,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,MAAL;AACEiB,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACAhF,YAAAA,WAAW,GAAG,KAAd;AACAb,YAAAA,MAAM,GAAG4I,YAAT;AACA;;AACF,eAAK,UAAL;AACE7B,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA7F,YAAAA,MAAM,GAAG6I,gBAAT;AACA;;AACF,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,SAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,QAAL;AACA,eAAK,OAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACEzI,YAAAA,KAAK,CAAC7R,IAAN,CAAWiS,oBAAX;AACAwI,YAAAA,YAAY,CAACta,GAAD,EAAMiM,KAAN,EAAakL,IAAb,CAAZ;AACAzF,YAAAA,KAAK,CAAC7E,aAAN,CAAoBiF,oBAApB;AACA;;AACF,eAAK,MAAL;AACE;AA5BF;;AA8BA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAO7F,KAAP;AACA,eAAK,UAAL;AACE,mBAAOqO,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAnB;;AACF,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACE;;AACF;AACE;AAAS;AARX;;AAUA;AAzDF;;AA4DAiD,IAAAA,eAAe,CAACra,GAAD,EAAM,MAAN,EAAc,IAAd,CAAf;AACAmS,IAAAA,WAAW,GAAG,IAAd;AACAb,IAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD,GAtnHoD,CAwnHrD;;;AACA,WAAS8C,YAAT,CAAsBhD,CAAtB,EAAwBjL,KAAxB,EAA8BkL,IAA9B,EAAmCC,IAAnC,EAAyC;AACvC,QAAIoK,IAAJ,EAAU/W,CAAV,EAAa+O,IAAb,EAAmBzO,GAAnB;;AACA,YAAOmM,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,YAAI1E,eAAJ,EAAqB;AACnBvG,UAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAAcrF,QAAd,EAAwB,EAAxB,CAAR;AACA,cAAIgC,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB;AACzB,SAJH,CAKE;;;AACA,YAAI8H,WAAW,IAAItI,KAAK,CAAC4W,IAAN,CAAWxU,KAAX,CAAnB,EACEkG,WAAW,GAAG,KAAd;AACF0I,QAAAA,cAAc;AACd/C,QAAAA,UAAU,CAAC7L,KAAD,CAAV;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAL;AAAQ;AACNsL,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACP,YAAIwF,sBAAsB,CAACpH,MAA3B,EAAmC;AACjC,iBAAO+J,gBAAgB,CAAC8C,CAAD,CAAvB;AACD;;AACDyE,QAAAA,WAAW;AACX;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAO1P,KAAP;AACA,eAAK,MAAL;AACE,gBAAIyF,KAAK,CAACxE,QAAN,CAAe,UAAf,CAAJ,EAAgC;AAC9B;AACD;;AACDlB,YAAAA,kBAAkB,CAACmL,IAAD,EAAOzF,KAAK,CAACpS,QAAN,CAAe,CAAf,CAAP,CAAlB;AACA;;AACF,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,SAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,QAAL;AACA,eAAK,OAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACEgb,YAAAA,YAAY,CAACta,GAAD,EAAMiM,KAAN,EAAakL,IAAb,CAAZ;AACA;;AACF,eAAK,MAAL;AACEqK,YAAAA,IAAI,GAAG9P,KAAK,CAACpS,QAAN,CAAe,CAAf,CAAP;AACA,gBAAI,CAACkiB,IAAD,IAAS,EAAEA,IAAI,YAAYniB,IAAI,CAACoiB,eAAvB,CAAT,IACA/P,KAAK,CAACxE,QAAN,CAAe,UAAf,CADJ,EAEE;AACFiF,YAAAA,WAAW,GAAG,KAAd;AACAnG,YAAAA,kBAAkB,CAACmL,IAAD,EAAOqK,IAAP,CAAlB;AACA;;AACF,eAAK,UAAL;AACE,gBAAI,CAACrP,WAAL,EAAkB;AAClBqP,YAAAA,IAAI,GAAG9P,KAAK,CAACpS,QAAN,CAAe,CAAf,CAAP;AACA,gBAAI,CAACkiB,IAAD,IAAS,EAAEA,IAAI,YAAYniB,IAAI,CAACoiB,eAAvB,CAAb,EACE;AACF,gBAAID,IAAI,CAACrI,UAAT,EAAqBqI,IAAI,CAACrI,UAAL,CAAgBuI,WAAhB,CAA4BF,IAA5B;;AACrB,mBAAM,EAAE9P,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAACsiB,eAA5B,CAAN,EACEjQ,KAAK,CAACnF,GAAN;;AACF8L,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA7F,YAAAA,MAAM,GAAG6I,gBAAT;AACA;;AAEF,eAAK,SAAL;AACA,eAAK,SAAL;AACA,eAAK,OAAL;AACA,eAAK,YAAL;AACA,eAAK,QAAL;AACA,eAAK,SAAL;AACA,eAAK,QAAL;AACA,eAAK,KAAL;AACA,eAAK,KAAL;AACA,eAAK,IAAL;AACA,eAAK,UAAL;AACA,eAAK,YAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,MAAL;AACA,eAAK,KAAL;AACA,eAAK,IAAL;AACA,eAAK,GAAL;AACA,eAAK,SAAL;AACA,eAAK,SAAL;AACA,eAAK,IAAL;AACE,gBAAIzI,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AAC9BoY,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AAEF,eAAK,MAAL;AACE,gBAAIzF,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;;AAC9B,gBAAI6K,GAAG,CAAC4G,KAAK,CAACrF,GAAP,EAAY,UAAZ,CAAP,EAAgC;AAC9BqF,cAAAA,KAAK,CAACnF,GAAN;AACD;;AACD8L,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AAEF,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACE,gBAAIzF,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AAC9B,gBAAIyR,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAACuiB,kBAA9B,EACElQ,KAAK,CAACnF,GAAN;AACF8L,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AAEF,eAAK,KAAL;AACA,eAAK,SAAL;AACE,gBAAIzF,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AAC9BoY,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA1E,YAAAA,eAAe,GAAG,IAAlB;AACAN,YAAAA,WAAW,GAAG,KAAd;AACA;;AAEF,eAAK,MAAL;AACE,gBAAIJ,oBAAoB,IAAI,CAACL,KAAK,CAACxE,QAAN,CAAe,UAAf,CAA7B,EAAyD;AACzD,gBAAIwE,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AAC9B8K,YAAAA,GAAG,GAAGsN,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAvB;AACA,gBAAI,CAACzF,KAAK,CAACxE,QAAN,CAAe,UAAf,CAAL,EACE6E,oBAAoB,GAAGhH,GAAvB;AACF;;AAEF,eAAK,IAAL;AACEoH,YAAAA,WAAW,GAAG,KAAd;;AACA,iBAAI1H,CAAC,GAAGiH,KAAK,CAACpS,QAAN,CAAe+K,MAAf,GAAsB,CAA9B,EAAiCI,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC5C+O,cAAAA,IAAI,GAAG9H,KAAK,CAACpS,QAAN,CAAemL,CAAf,CAAP;;AACA,kBAAI+O,IAAI,YAAYna,IAAI,CAACwiB,aAAzB,EAAwC;AACtC3H,gBAAAA,YAAY,CAACja,MAAD,EAAS,IAAT,CAAZ;AACA;AACD;;AACD,kBAAI6K,GAAG,CAAC0O,IAAD,EAAO/Y,UAAP,CAAH,IAAyB,CAACqK,GAAG,CAAC0O,IAAD,EAAOxY,cAAP,CAAjC,EACE;AACH;;AACD,gBAAI0Q,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AAC9BoY,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AAEF,eAAK,IAAL;AACA,eAAK,IAAL;AACEhF,YAAAA,WAAW,GAAG,KAAd;;AACA,iBAAI1H,CAAC,GAAGiH,KAAK,CAACpS,QAAN,CAAe+K,MAAf,GAAsB,CAA9B,EAAiCI,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC5C+O,cAAAA,IAAI,GAAG9H,KAAK,CAACpS,QAAN,CAAemL,CAAf,CAAP;;AACA,kBAAIK,GAAG,CAAC0O,IAAD,EAAOvY,OAAP,CAAP,EAAwB;AACtBiZ,gBAAAA,YAAY,CAACja,MAAD,EAASuZ,IAAI,CAACtO,SAAd,CAAZ;AACA;AACD;;AACD,kBAAIJ,GAAG,CAAC0O,IAAD,EAAO/Y,UAAP,CAAH,IAAyB,CAACqK,GAAG,CAAC0O,IAAD,EAAOxY,cAAP,CAAjC,EACE;AACH;;AACD,gBAAI0Q,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AAC9BoY,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AAEF,eAAK,WAAL;AACE,gBAAIzF,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AAC9BoY,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA5G,YAAAA,SAAS,GAAGyD,eAAZ;AACA;;AAEF,eAAK,QAAL;AACE,gBAAItC,KAAK,CAACnE,OAAN,CAAc,QAAd,CAAJ,EAA6B;AAC3B2M,cAAAA,YAAY,CAACja,MAAD,EAAS,QAAT,CAAZ;AACAqR,cAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD,aAHD,MAIK;AACHyD,cAAAA,cAAc;AACdxC,cAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACAhF,cAAAA,WAAW,GAAG,KAAd;AACD;;AACD;;AAEF,eAAK,GAAL;AACE,gBAAI2P,aAAa,GAAGnQ,GAAG,CAACxC,gBAAJ,CAAqB,GAArB,CAApB;;AACA,gBAAI2S,aAAJ,EAAmB;AACjB5H,cAAAA,YAAY,CAACja,MAAD,EAASgM,KAAT,CAAZ;AACA0F,cAAAA,GAAG,CAACtC,MAAJ,CAAWyS,aAAX;AACApQ,cAAAA,KAAK,CAAC7E,aAAN,CAAoBiV,aAApB;AACD;;AACD;;AACF,eAAK,GAAL;AACA,eAAK,KAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,MAAL;AACA,eAAK,GAAL;AACA,eAAK,GAAL;AACA,eAAK,OAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,IAAL;AACA,eAAK,GAAL;AACEjH,YAAAA,cAAc;AACdlJ,YAAAA,GAAG,CAAC9R,IAAJ,CAASwY,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAA1B,EAAwCA,IAAxC;AACA;;AAEF,eAAK,MAAL;AACE0D,YAAAA,cAAc;;AAEd,gBAAInJ,KAAK,CAACnE,OAAN,CAActB,KAAd,CAAJ,EAA0B;AACxBiO,cAAAA,YAAY,CAACja,MAAD,EAASgM,KAAT,CAAZ;AACA4O,cAAAA,cAAc;AACf;;AACDlJ,YAAAA,GAAG,CAAC9R,IAAJ,CAASwY,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAA1B,EAAwCA,IAAxC;AACA;;AAEF,eAAK,QAAL;AACA,eAAK,SAAL;AACA,eAAK,QAAL;AACE0D,YAAAA,cAAc;AACdxC,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACAxF,YAAAA,GAAG,CAACpD,YAAJ;AACA4D,YAAAA,WAAW,GAAG,KAAd;AACA;;AAEF,eAAK,OAAL;AACE,gBAAI,CAACS,GAAG,CAACiB,OAAL,IAAgBnC,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAApB,EAA8C;AAC5CwM,cAAAA,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AACD;;AACDoY,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACAhF,YAAAA,WAAW,GAAG,KAAd;AACAb,YAAAA,MAAM,GAAG2I,aAAT;AACA;;AAEF,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,KAAL;AACA,eAAK,QAAL;AACA,eAAK,KAAL;AACEY,YAAAA,cAAc;AACdxC,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACAzF,YAAAA,KAAK,CAACnF,GAAN;AACA4F,YAAAA,WAAW,GAAG,KAAd;AACA;;AAEF,eAAK,OAAL;AACE0I,YAAAA,cAAc;AACd9P,YAAAA,GAAG,GAAGsN,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAvB;AACAzF,YAAAA,KAAK,CAACnF,GAAN;AACA,gBAAII,IAAI,GAAG5B,GAAG,CAACS,YAAJ,CAAiB,MAAjB,CAAX;AACA,gBAAI,CAACmB,IAAD,IAASA,IAAI,CAAClB,WAAL,OAAuB,QAApC,EACE0G,WAAW,GAAG,KAAd;AACF;;AAEF,eAAK,OAAL;AACA,eAAK,QAAL;AACA,eAAK,OAAL;AACEkG,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACAzF,YAAAA,KAAK,CAACnF,GAAN;AACA;;AAEF,eAAK,IAAL;AACE,gBAAImF,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;;AAC9B,gBAAI6K,GAAG,CAAC4G,KAAK,CAACrF,GAAP,EAAY,UAAZ,CAAP,EAAgC;AAC9BqF,cAAAA,KAAK,CAACnF,GAAN;AACD;;AACD8L,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACAzF,YAAAA,KAAK,CAACnF,GAAN;AACA4F,YAAAA,WAAW,GAAG,KAAd;AACA;;AAEF,eAAK,OAAL;AACE+H,YAAAA,YAAY,CAACla,GAAD,EAAM,KAAN,EAAamX,IAAb,EAAmBC,IAAnB,CAAZ;AACA;;AAEF,eAAK,UAAL;AACEiB,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACA1E,YAAAA,eAAe,GAAG,IAAlB;AACAN,YAAAA,WAAW,GAAG,KAAd;AACA5B,YAAAA,SAAS,GAAGwD,YAAZ;AACAvC,YAAAA,qBAAqB,GAAGF,MAAxB;AACAA,YAAAA,MAAM,GAAGoJ,SAAT;AACA;;AAEF,eAAK,KAAL;AACE,gBAAIhJ,KAAK,CAAChE,aAAN,CAAoB,GAApB,CAAJ,EAA8BwM,YAAY,CAACja,MAAD,EAAS,GAAT,CAAZ;AAC9B4a,YAAAA,cAAc;AACd1I,YAAAA,WAAW,GAAG,KAAd;AACAqI,YAAAA,YAAY,CAACvO,KAAD,EAAQkL,IAAR,CAAZ;AACA;;AAEF,eAAK,QAAL;AACEhF,YAAAA,WAAW,GAAG,KAAd;AACAqI,YAAAA,YAAY,CAACvO,KAAD,EAAQkL,IAAR,CAAZ;AACA;;AAEF,eAAK,SAAL;AACEqD,YAAAA,YAAY,CAACvO,KAAD,EAAOkL,IAAP,CAAZ;AACA;;AAEF,eAAK,UAAL;AACE,gBAAInF,iBAAJ,EAAuB;AACrBwI,cAAAA,YAAY,CAACvO,KAAD,EAAOkL,IAAP,CAAZ;AACA;AACD;;AACD;AAAQ;;AAEV,eAAK,QAAL;AACE0D,YAAAA,cAAc;AACdxC,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACAhF,YAAAA,WAAW,GAAG,KAAd;AACA,gBAAIb,MAAM,KAAK2I,aAAX,IACF3I,MAAM,KAAKyI,eADT,IAEFzI,MAAM,KAAKwI,kBAFT,IAGFxI,MAAM,KAAKuI,WAHT,IAIFvI,MAAM,KAAKiJ,YAJb,EAKEjJ,MAAM,GAAGqI,uBAAT,CALF,KAOErI,MAAM,GAAGsI,cAAT;AACF;;AAEF,eAAK,UAAL;AACA,eAAK,QAAL;AACE,gBAAIlI,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAAC0iB,iBAA9B,EAAiD;AAC/C7H,cAAAA,YAAY,CAACja,MAAD,EAAS,QAAT,CAAZ;AACD;;AACD4a,YAAAA,cAAc;AACdxC,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACA;;AAEF,eAAK,UAAL;AACE,gBAAIrM,GAAG,CAAC4G,KAAK,CAACrF,GAAP,EAAY,UAAZ,CAAP,EAAgC;AAC9BqF,cAAAA,KAAK,CAACnF,GAAN;AACD;;AACDsO,YAAAA,cAAc;AACdxC,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AAEF,eAAK,IAAL;AACA,eAAK,KAAL;AACE,gBAAIzF,KAAK,CAACnE,OAAN,CAAc,MAAd,CAAJ,EAA2B;AACzBmE,cAAAA,KAAK,CAAC3D,sBAAN;AACD;;AACDsK,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACA;;AAEF,eAAK,IAAL;AACA,eAAK,IAAL;AACE,gBAAIzF,KAAK,CAACnE,OAAN,CAAc,MAAd,CAAJ,EAA2B;AACzBmE,cAAAA,KAAK,CAAC3D,sBAAN,CAA6B,KAA7B;AACD;;AACDsK,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACA;;AAEF,eAAK,MAAL;AACE0D,YAAAA,cAAc;AACd/O,YAAAA,sBAAsB,CAACqL,IAAD,CAAtB;AACApL,YAAAA,uBAAuB,CAACoL,IAAD,CAAvB;AACAsB,YAAAA,oBAAoB,CAACxM,KAAD,EAAQkL,IAAR,EAAchY,SAAS,CAAC4B,MAAxB,CAApB;AACA,gBAAIqW,IAAJ,EAAU;AACR1F,cAAAA,KAAK,CAACnF,GAAN;AACF;;AAEF,eAAK,KAAL;AACEsO,YAAAA,cAAc;AACdjP,YAAAA,mBAAmB,CAACuL,IAAD,CAAnB;AACApL,YAAAA,uBAAuB,CAACoL,IAAD,CAAvB;AACAsB,YAAAA,oBAAoB,CAACxM,KAAD,EAAQkL,IAAR,EAAchY,SAAS,CAAC2B,GAAxB,CAApB;AACA,gBAAIsW,IAAJ,EAAU;AACR1F,cAAAA,KAAK,CAACnF,GAAN;AACF;;AAEF,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACA,eAAK,MAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACE;AACA;AAlWF,SADF,CAsWE;AACA;;;AACAsO,QAAAA,cAAc;AACdxC,QAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACA;;AAEF,WAAK,CAAL;AAAQ;AACN,gBAAOlL,KAAP;AACA,eAAK,UAAL;AACEqO,YAAAA,YAAY,CAACra,MAAD,EAASgM,KAAT,EAAgBkL,IAAhB,CAAZ;AACA;;AACF,eAAK,MAAL;AACE,gBAAI,CAACzF,KAAK,CAACnE,OAAN,CAAc,MAAd,CAAL,EAA4B;AAC5B+D,YAAAA,MAAM,GAAG0Q,eAAT;AACA;;AACF,eAAK,MAAL;AACE,gBAAI,CAACtQ,KAAK,CAACnE,OAAN,CAAc,MAAd,CAAL,EAA4B;AAC5B+D,YAAAA,MAAM,GAAG0Q,eAAT;AACA1Q,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,CAAN;AACA;;AAEF,eAAK,SAAL;AACA,eAAK,SAAL;AACA,eAAK,OAAL;AACA,eAAK,YAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,SAAL;AACA,eAAK,QAAL;AACA,eAAK,KAAL;AACA,eAAK,KAAL;AACA,eAAK,IAAL;AACA,eAAK,UAAL;AACA,eAAK,YAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,SAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,KAAL;AACA,eAAK,IAAL;AACA,eAAK,KAAL;AACA,eAAK,SAAL;AACA,eAAK,SAAL;AACA,eAAK,IAAL;AACE;AACA,gBAAI,CAACzF,KAAK,CAACnE,OAAN,CAActB,KAAd,CAAL,EAA2B;AAC3ByF,YAAAA,KAAK,CAAC3D,sBAAN;AACA2D,YAAAA,KAAK,CAAClF,MAAN,CAAaP,KAAb;AACA;;AAEF,eAAK,MAAL;AACE,gBAAI,CAACyF,KAAK,CAACxE,QAAN,CAAe,UAAf,CAAL,EAAiC;AAC/B,kBAAI+U,QAAQ,GAAGlQ,oBAAf;AACAA,cAAAA,oBAAoB,GAAG,IAAvB;AACA,kBAAI,CAACkQ,QAAD,IAAa,CAACvQ,KAAK,CAAClE,cAAN,CAAqByU,QAArB,CAAlB,EAAkD;AAClDvQ,cAAAA,KAAK,CAAC3D,sBAAN;AACA2D,cAAAA,KAAK,CAAC7E,aAAN,CAAoBoV,QAApB;AACD,aAND,MAMO;AACL,kBAAI,CAACvQ,KAAK,CAACnE,OAAN,CAAc,MAAd,CAAL,EAA4B;AAC5BmE,cAAAA,KAAK,CAAC3D,sBAAN;AACA2D,cAAAA,KAAK,CAAClF,MAAN,CAAa,MAAb;AACD;;AACD;;AAEF,eAAK,GAAL;AACE,gBAAI,CAACkF,KAAK,CAAChE,aAAN,CAAoBzB,KAApB,CAAL,EAAiC;AAC/BiO,cAAAA,YAAY,CAACla,GAAD,EAAMiM,KAAN,EAAa,IAAb,CAAZ;AACAqF,cAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD,aAHD,MAIK;AACH1F,cAAAA,KAAK,CAAC3D,sBAAN,CAA6B9B,KAA7B;AACAyF,cAAAA,KAAK,CAAClF,MAAN,CAAaP,KAAb;AACD;;AACD;;AAEF,eAAK,IAAL;AACE,gBAAI,CAACyF,KAAK,CAAC/D,eAAN,CAAsB1B,KAAtB,CAAL,EAAmC;AACnCyF,YAAAA,KAAK,CAAC3D,sBAAN,CAA6B9B,KAA7B;AACAyF,YAAAA,KAAK,CAAClF,MAAN,CAAaP,KAAb;AACA;;AAEF,eAAK,IAAL;AACA,eAAK,IAAL;AACE,gBAAI,CAACyF,KAAK,CAACnE,OAAN,CAActB,KAAd,CAAL,EAA2B;AAC3ByF,YAAAA,KAAK,CAAC3D,sBAAN,CAA6B9B,KAA7B;AACAyF,YAAAA,KAAK,CAAClF,MAAN,CAAaP,KAAb;AACA;;AAEF,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACE,gBAAI,CAACyF,KAAK,CAACjE,kBAAN,CAAyBpO,IAAI,CAACuiB,kBAA9B,CAAL,EAAwD;AACxDlQ,YAAAA,KAAK,CAAC3D,sBAAN;AACA2D,YAAAA,KAAK,CAAChF,cAAN,CAAqBrN,IAAI,CAACuiB,kBAA1B;AACA;;AAEF,eAAK,SAAL;AACE;AACA;;AAEF,eAAK,GAAL;AACA,eAAK,GAAL;AACA,eAAK,KAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,MAAL;AACA,eAAK,GAAL;AACA,eAAK,MAAL;AACA,eAAK,GAAL;AACA,eAAK,OAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,IAAL;AACA,eAAK,GAAL;AACE,gBAAIpX,MAAM,GAAGwQ,cAAc,CAAC/O,KAAD,CAA3B;AACA,gBAAIzB,MAAJ,EAAY,OAFd,CAEuB;;AACrB;AAAe;;AAEjB,eAAK,QAAL;AACA,eAAK,SAAL;AACA,eAAK,QAAL;AACE,gBAAI,CAACkH,KAAK,CAACnE,OAAN,CAActB,KAAd,CAAL,EAA2B;AAC3ByF,YAAAA,KAAK,CAAC3D,sBAAN;AACA2D,YAAAA,KAAK,CAAClF,MAAN,CAAaP,KAAb;AACA0F,YAAAA,GAAG,CAACzC,aAAJ;AACA;;AAEF,eAAK,IAAL;AACEgL,YAAAA,YAAY,CAACla,GAAD,EAAMiM,KAAN,EAAa,IAAb,CAAZ,CADF,CACmC;;AACjC;AAhIF,SADF,CAoIE;;;AACA,aAAIxB,CAAC,GAAGiH,KAAK,CAACpS,QAAN,CAAe+K,MAAf,GAAsB,CAA9B,EAAiCI,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC5C+O,UAAAA,IAAI,GAAG9H,KAAK,CAACpS,QAAN,CAAemL,CAAf,CAAP;;AACA,cAAIK,GAAG,CAAC0O,IAAD,EAAOvN,KAAP,CAAP,EAAsB;AACpByF,YAAAA,KAAK,CAAC3D,sBAAN,CAA6B9B,KAA7B;AACAyF,YAAAA,KAAK,CAAC9E,UAAN,CAAiB4M,IAAjB;AACA;AACD,WAJD,MAKK,IAAI1O,GAAG,CAAC0O,IAAD,EAAO/Y,UAAP,CAAP,EAA2B;AAC9B;AACD;AACF;;AAED;AAphBF;AAshBD;;AAED,WAASia,SAAT,CAAmBxD,CAAnB,EAAsBjL,KAAtB,EAA6BkL,IAA7B,EAAmCC,IAAnC,EAAyC;AACvC,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACNY,QAAAA,UAAU,CAAC7L,KAAD,CAAV;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACP,YAAIyF,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAAC6iB,iBAA9B,EACExQ,KAAK,CAACrF,GAAN,CAAUkV,gBAAV,GAA6B,IAA7B;AACF7P,QAAAA,KAAK,CAACnF,GAAN;AACA+E,QAAAA,MAAM,GAAGE,qBAAT;AACAF,QAAAA,MAAM,CAAC4F,CAAD,CAAN;AACA;;AACF,WAAK,CAAL;AAAQ;AACN,YAAIjL,KAAK,KAAK,QAAd,EAAwB;AACtByP,UAAAA,eAAe;AAChB,SAFD,MAGK;AACHhK,UAAAA,KAAK,CAACnF,GAAN;AACA+E,UAAAA,MAAM,GAAGE,qBAAT;AACD;;AACD;;AACF;AACE;AACA;AAtBF;AAwBD;;AAED,WAASyI,aAAT,CAAuB/C,CAAvB,EAA0BjL,KAA1B,EAAiCkL,IAAjC,EAAuCC,IAAvC,EAA6C;AAC3C,aAAS+K,WAAT,CAAqBtW,KAArB,EAA4B;AAC1B,WAAI,IAAIpB,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGQ,KAAK,CAACxB,MAAzB,EAAiCI,CAAC,GAAGY,CAArC,EAAwCZ,CAAC,EAAzC,EAA6C;AAC3C,YAAIoB,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,MAAgB,MAApB,EACE,OAAOoB,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,EAAYgB,WAAZ,EAAP;AACH;;AACD,aAAO,IAAP;AACD;;AAED,YAAOyL,CAAP;AACA,WAAK,CAAL;AAAQ;AACN;AACA;AACA,YAAI5E,qBAAJ,EAA2B;AACzB4H,UAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AACD,SAHD,MAIK,IAAItM,GAAG,CAAC4G,KAAK,CAACrF,GAAP,EAAYnL,kBAAZ,CAAP,EAAwC;AAC3CmR,UAAAA,kBAAkB,GAAG,EAArB;AACAb,UAAAA,qBAAqB,GAAGF,MAAxB;AACAA,UAAAA,MAAM,GAAG8Q,kBAAT;AACA9Q,UAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;AACD;;AACD;;AACF,WAAK,CAAL;AAAQ;AACNG,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOA,KAAP;AACA,eAAK,SAAL;AACEyF,YAAAA,KAAK,CAACzE,cAAN,CAAqB5L,eAArB;AACAsQ,YAAAA,GAAG,CAACpD,YAAJ;AACA8J,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACA7F,YAAAA,MAAM,GAAGyI,eAAT;AACA;;AACF,eAAK,UAAL;AACErI,YAAAA,KAAK,CAACzE,cAAN,CAAqB5L,eAArB;AACAgX,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACA7F,YAAAA,MAAM,GAAG0I,oBAAT;AACA;;AACF,eAAK,KAAL;AACEC,YAAAA,aAAa,CAACja,GAAD,EAAM,UAAN,EAAkB,IAAlB,CAAb;AACAsR,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;;AACF,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACE1F,YAAAA,KAAK,CAACzE,cAAN,CAAqB5L,eAArB;AACAgX,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACA7F,YAAAA,MAAM,GAAGwI,kBAAT;AACA;;AACF,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACEG,YAAAA,aAAa,CAACja,GAAD,EAAM,OAAN,EAAe,IAAf,CAAb;AACAsR,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;;AAEF,eAAK,OAAL;AACE,gBAAI,CAAC1F,KAAK,CAAC9D,YAAN,CAAmB3B,KAAnB,CAAL,EAAgC;AAC9B,qBAD8B,CACtB;AACT;;AACDgO,YAAAA,aAAa,CAACha,MAAD,EAASgM,KAAT,CAAb;AACAqF,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;;AAEF,eAAK,OAAL;AACA,eAAK,QAAL;AACA,eAAK,UAAL;AACEkD,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AAEF,eAAK,OAAL;AACE,gBAAIzK,IAAI,GAAGwV,WAAW,CAAChL,IAAD,CAAtB;AACA,gBAAIxK,IAAI,KAAK,QAAb,EAAuB,MAFzB,CAEiC;;AAC/B0L,YAAAA,iBAAiB,CAACpM,KAAD,EAAOkL,IAAP,CAAjB;AACAzF,YAAAA,KAAK,CAACnF,GAAN;AACA;;AAEF,eAAK,MAAL;AACE,gBAAIwF,oBAAoB,IAAIL,KAAK,CAACxE,QAAN,CAAe,UAAf,CAA5B,EAAwD;AACxD6E,YAAAA,oBAAoB,GAAGsG,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAxC;AACAzF,YAAAA,KAAK,CAAC9E,UAAN,CAAiBmF,oBAAjB;AACA;AAvDF;;AAyDA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAO9F,KAAP;AACA,eAAK,OAAL;AACE,gBAAI,CAACyF,KAAK,CAAC9D,YAAN,CAAmB3B,KAAnB,CAAL,EAAgC;AAChCyF,YAAAA,KAAK,CAAClF,MAAN,CAAaP,KAAb;AACAoI,YAAAA,kBAAkB;AAClB;;AACF,eAAK,MAAL;AACA,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,MAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACE;;AACF,eAAK,UAAL;AACEiG,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AApBF;;AAuBA;;AACF,WAAK,CAAC,CAAN;AAAS;AACP8C,QAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AA3GF,KAT2C,CAuH3C;;;AACAM,IAAAA,kBAAkB,GAAG,IAArB;AACAwC,IAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACAM,IAAAA,kBAAkB,GAAG,KAArB;AACD;;AAED,WAAS0K,kBAAT,CAA4BlL,CAA5B,EAA+BjL,KAA/B,EAAsCkL,IAAtC,EAA4CC,IAA5C,EAAkD;AAChD,QAAIF,CAAC,KAAKnX,IAAV,EAAgB;AACd,UAAIyS,eAAJ,EAAqB;AACnBvG,QAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAAcrF,QAAd,EAAwB,EAAxB,CAAR;AACA,YAAIgC,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB;AACzB;;AACDgI,MAAAA,kBAAkB,CAACxS,IAAnB,CAAwBoM,KAAxB;AACD,KAND,MAOK;AACH,UAAIrB,CAAC,GAAGyH,kBAAkB,CAACgQ,IAAnB,CAAwB,EAAxB,CAAR;AACAhQ,MAAAA,kBAAkB,CAAChI,MAAnB,GAA4B,CAA5B;;AACA,UAAIR,KAAK,CAAC4W,IAAN,CAAW7V,CAAX,CAAJ,EAAmB;AAAE;AACnB;AACA;AACA8M,QAAAA,kBAAkB,GAAG,IAArB;AACAwC,QAAAA,YAAY,CAACna,IAAD,EAAO6K,CAAP,CAAZ;AACA8M,QAAAA,kBAAkB,GAAG,KAArB;AACD,OAND,MAOK;AACHI,QAAAA,UAAU,CAAClN,CAAD,CAAV;AACD;;AACD0G,MAAAA,MAAM,GAAGE,qBAAT;AACAF,MAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;AACF;;AAGD,WAAS2C,eAAT,CAAyB7C,CAAzB,EAA4BjL,KAA5B,EAAmCkL,IAAnC,EAAyCC,IAAzC,EAA+C;AAC7C,aAASkL,WAAT,GAAuB;AACrB,UAAI,CAAC5Q,KAAK,CAAC9D,YAAN,CAAmB,SAAnB,CAAL,EAAoC,OAAO,KAAP;AACpC8D,MAAAA,KAAK,CAAC3D,sBAAN;AACA2D,MAAAA,KAAK,CAAClF,MAAN,CAAa,SAAb;AACAmF,MAAAA,GAAG,CAACzC,aAAJ;AACAoC,MAAAA,MAAM,GAAG2I,aAAT;AACA,aAAO,IAAP;AACD;;AAED,YAAO/C,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,gBAAOjL,KAAP;AACA,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACE,gBAAIqW,WAAW,EAAf,EAAmBhR,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACnB;AAXF;;AAaA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOnL,KAAP;AACA,eAAK,SAAL;AACEqW,YAAAA,WAAW;AACX;;AACF,eAAK,OAAL;AACE,gBAAIA,WAAW,EAAf,EAAmBhR,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACnB;;AACF,eAAK,MAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,MAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACE;AAjBF;;AAmBA;AApCF,KAV6C,CAiD7C;;;AACA8C,IAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACD;;AAED,WAAS4C,oBAAT,CAA8B9C,CAA9B,EAAiCjL,KAAjC,EAAwCkL,IAAxC,EAA8CC,IAA9C,EAAoD;AAClD,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,YAAIiK,EAAE,GAAGlV,KAAK,CAACqK,KAAN,CAAYtM,SAAZ,CAAT;;AACA,YAAImX,EAAJ,EAAQ;AACNrJ,UAAAA,UAAU,CAACqJ,EAAE,CAAC,CAAD,CAAH,CAAV;AACAlV,UAAAA,KAAK,GAAGA,KAAK,CAAC0H,SAAN,CAAgBwN,EAAE,CAAC,CAAD,CAAF,CAAM9W,MAAtB,CAAR;AACD;;AACD,YAAI4B,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB;AACxB;AAAO;;AAET,WAAK,CAAL;AAAQ;AACNkN,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOA,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,KAAL;AACEiB,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACAzF,YAAAA,KAAK,CAACnF,GAAN;AACA;;AACF,eAAK,UAAL;AACE+N,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AAVF;;AAYA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOnL,KAAP;AACA,eAAK,UAAL;AACE,gBAAI,CAACnB,GAAG,CAAC4G,KAAK,CAACrF,GAAP,EAAY,UAAZ,CAAR,EAAiC;AAC/B,qBAD+B,CACvB;AACT;;AACDqF,YAAAA,KAAK,CAACnF,GAAN;AACA+E,YAAAA,MAAM,GAAG2I,aAAT;AACA;;AACF,eAAK,KAAL;AACE;;AACF,eAAK,UAAL;AACEK,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AAZF;;AAcA;;AACF,WAAK,CAAC,CAAN;AAAS;AACP8C,QAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AA/CF,KADkD,CAmDlD;;;AACA,QAAI,CAACtM,GAAG,CAAC4G,KAAK,CAACrF,GAAP,EAAY,UAAZ,CAAR,EAAiC;AAC/B,aAD+B,CACvB;AACT;;AACD2N,IAAAA,oBAAoB,CAAC/Z,MAAD,EAAS,UAAT,CAApB;AACAqR,IAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AAED,WAAS0C,kBAAT,CAA4B5C,CAA5B,EAA+BjL,KAA/B,EAAsCkL,IAAtC,EAA4CC,IAA5C,EAAkD;AAChD,aAASmL,OAAT,GAAmB;AACjB,UAAI,CAAC7Q,KAAK,CAAC9D,YAAN,CAAmB,OAAnB,CAAD,IACF,CAAC8D,KAAK,CAAC9D,YAAN,CAAmB,OAAnB,CADC,IAEF,CAAC8D,KAAK,CAAC9D,YAAN,CAAmB,OAAnB,CAFH,EAGE;AACF8D,MAAAA,KAAK,CAACzE,cAAN,CAAqB3L,mBAArB;AACAwY,MAAAA,kBAAkB,CAAC7Z,MAAD,EAASyR,KAAK,CAACrF,GAAN,CAAUnB,SAAnB,EAA8B,IAA9B,CAAlB;AACAoG,MAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AAED,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,gBAAOjL,KAAP;AACA,eAAK,IAAL;AACEyF,YAAAA,KAAK,CAACzE,cAAN,CAAqB3L,mBAArB;AACA+W,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA7F,YAAAA,MAAM,GAAGuI,WAAT;AACA;;AACF,eAAK,IAAL;AACA,eAAK,IAAL;AACEC,YAAAA,kBAAkB,CAAC9Z,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAlB;AACAsR,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;;AACF,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACEmL,YAAAA,OAAO;AACP;AAlBF;;AAoBA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOtW,KAAP;AACA,eAAK,OAAL;AACEsW,YAAAA,OAAO;AACP;;AACF,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACE,gBAAI7Q,KAAK,CAAC9D,YAAN,CAAmB3B,KAAnB,CAAJ,EAA+B;AAC7ByF,cAAAA,KAAK,CAACzE,cAAN,CAAqB3L,mBAArB;AACAoQ,cAAAA,KAAK,CAACnF,GAAN;AACA+E,cAAAA,MAAM,GAAG2I,aAAT;AACD;;AACD;;AACF,eAAK,MAAL;AACA,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACE;AArBF;;AAuBA;AA/CF,KAXgD,CA6DhD;;;AACAA,IAAAA,aAAa,CAAC/C,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAb;AACD;;AAED,WAASyC,WAAT,CAAqB3C,CAArB,EAAwBjL,KAAxB,EAA+BkL,IAA/B,EAAqCC,IAArC,EAA2C;AACzC,aAASoL,MAAT,GAAkB;AAChB,UAAI,CAAC9Q,KAAK,CAAC9D,YAAN,CAAmB,IAAnB,CAAL,EAA+B,OAAO,KAAP;AAC/B8D,MAAAA,KAAK,CAACzE,cAAN,CAAqB1L,kBAArB;AACAmQ,MAAAA,KAAK,CAACnF,GAAN;AACA+E,MAAAA,MAAM,GAAGwI,kBAAT;AACA,aAAO,IAAP;AACD;;AAED,YAAO5C,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,gBAAOjL,KAAP;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACEyF,YAAAA,KAAK,CAACzE,cAAN,CAAqB1L,kBAArB;AACA8W,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA7F,YAAAA,MAAM,GAAGiJ,YAAT;AACA5I,YAAAA,GAAG,CAACpD,YAAJ;AACA;;AACF,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACE,gBAAIiU,MAAM,EAAV,EAAclR,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACd;AAhBF;;AAkBA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOnL,KAAP;AACA,eAAK,IAAL;AACEuW,YAAAA,MAAM;AACN;;AACF,eAAK,OAAL;AACE,gBAAIA,MAAM,EAAV,EAAclR,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACd;;AACF,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACE,gBAAI1F,KAAK,CAAC9D,YAAN,CAAmB3B,KAAnB,CAAJ,EAA+B;AAC7B,kBAAIuW,MAAM,EAAV,EAAclR,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACf;;AACD;;AACF,eAAK,MAAL;AACA,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACE;AArBF;;AAuBA;AA7CF,KATyC,CAyDzC;;;AACA6C,IAAAA,aAAa,CAAC/C,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAb;AACD;;AAED,WAASmD,YAAT,CAAsBrD,CAAtB,EAAyBjL,KAAzB,EAAgCkL,IAAhC,EAAsCC,IAAtC,EAA4C;AAC1C,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,gBAAOjL,KAAP;AACA,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACE,gBAAIyF,KAAK,CAAC9D,YAAN,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B2M,cAAAA,YAAY,CAACta,MAAD,EAAS,IAAT,CAAZ;AACAqR,cAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD,aAHD,MAIK,IAAI1F,KAAK,CAAC9D,YAAN,CAAmB,IAAnB,CAAJ,EAA8B;AACjC2M,cAAAA,YAAY,CAACta,MAAD,EAAS,IAAT,CAAZ;AACAqR,cAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AACD;AAlBF;;AAoBA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOnL,KAAP;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACE,gBAAI,CAACyF,KAAK,CAAC9D,YAAN,CAAmB3B,KAAnB,CAAL,EAAgC;AAChCyF,YAAAA,KAAK,CAAC3D,sBAAN;AACA2D,YAAAA,KAAK,CAAClF,MAAN,CAAaP,KAAb;AACA0F,YAAAA,GAAG,CAACzC,aAAJ;AACAoC,YAAAA,MAAM,GAAGuI,WAAT;AACA;;AAEF,eAAK,MAAL;AACA,eAAK,SAAL;AACA,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,MAAL;AACE;;AAEF,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACE,gBAAI,CAACnI,KAAK,CAAC9D,YAAN,CAAmB3B,KAAnB,CAAL,EAAgC;AAChCsO,YAAAA,YAAY,CAACta,MAAD,EAASyR,KAAK,CAAC9D,YAAN,CAAmB,IAAnB,IAA2B,IAA3B,GAAkC,IAA3C,CAAZ;AACA0D,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;AAzBF;;AA2BA;AAnDF,KAD0C,CAuD1C;;;AACA8C,IAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACD;;AAED,WAASwC,cAAT,CAAwB1C,CAAxB,EAA2BjL,KAA3B,EAAkCkL,IAAlC,EAAwCC,IAAxC,EAA8C;AAC5C,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN,YAAI1E,eAAJ,EAAqB;AACnBvG,UAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAAcrF,QAAd,EAAwB,EAAxB,CAAR;AACA,cAAIgC,KAAK,CAAC5B,MAAN,KAAiB,CAArB,EAAwB;AACzB;;AACDyN,QAAAA,UAAU,CAAC7L,KAAD,CAAV;AACA;;AACF,WAAK,CAAL;AAAQ;AACNsL,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAC,CAAN;AAAS;AACPiO,QAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOnL,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,QAAL;AACE,gBAAI1F,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAAC0iB,iBAA9B,EACEnI,cAAc,CAAC3Z,MAAD,EAASgM,KAAT,CAAd;AACFoM,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AACF,eAAK,UAAL;AACE,gBAAIzF,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAAC0iB,iBAA9B,EACEnI,cAAc,CAAC3Z,MAAD,EAAS,QAAT,CAAd;AACF,gBAAIyR,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAACojB,mBAA9B,EACE7I,cAAc,CAAC3Z,MAAD,EAASgM,KAAT,CAAd;AACFoM,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AACF,eAAK,QAAL;AACEyC,YAAAA,cAAc,CAAC3Z,MAAD,EAASgM,KAAT,CAAd,CADF,CACiC;;AAC/B;;AAEF,eAAK,OAAL;AACA,eAAK,QAAL;AACA,eAAK,UAAL;AACE,gBAAI,CAACyF,KAAK,CAAC7D,aAAN,CAAoB,QAApB,CAAL,EAAoC;AACpC+L,YAAAA,cAAc,CAAC3Z,MAAD,EAAS,QAAT,CAAd;AACAqR,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;;AAEF,eAAK,QAAL;AACA,eAAK,UAAL;AACEkD,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AA/BF;;AAiCA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOnL,KAAP;AACA,eAAK,UAAL;AACE,gBAAIyF,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAAC0iB,iBAA1B,IACFrQ,KAAK,CAACpS,QAAN,CAAeoS,KAAK,CAACpS,QAAN,CAAe+K,MAAf,GAAsB,CAArC,aACAhL,IAAI,CAACojB,mBAFP,EAE4B;AAC1B7I,cAAAA,cAAc,CAAC3Z,MAAD,EAAS,QAAT,CAAd;AACD;;AACD,gBAAIyR,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAACojB,mBAA9B,EACE/Q,KAAK,CAACnF,GAAN;AAEF;;AAEF,eAAK,QAAL;AACE,gBAAImF,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAAC0iB,iBAA9B,EACErQ,KAAK,CAACnF,GAAN;AACF;;AAEF,eAAK,QAAL;AACE,gBAAI,CAACmF,KAAK,CAAC7D,aAAN,CAAoB5B,KAApB,CAAL,EAAiC;AACjCyF,YAAAA,KAAK,CAAClF,MAAN,CAAaP,KAAb;AACAoI,YAAAA,kBAAkB;AAClB;;AAEF,eAAK,UAAL;AACEiG,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AAzBF;;AA4BA;AAhFF,KAD4C,CAoF5C;;AACD;;AAED,WAASuC,uBAAT,CAAiCzC,CAAjC,EAAoCjL,KAApC,EAA2CkL,IAA3C,EAAiDC,IAAjD,EAAuD;AACrD,YAAOnL,KAAP;AACA,WAAK,SAAL;AACA,WAAK,OAAL;AACA,WAAK,OAAL;AACA,WAAK,OAAL;AACA,WAAK,OAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACE,gBAAOiL,CAAP;AACA,eAAK,CAAL;AAAQ;AACNyC,YAAAA,uBAAuB,CAAC1Z,MAAD,EAAS,QAAT,CAAvB;AACAqR,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;;AACF,eAAK,CAAL;AAAQ;AACN,gBAAI1F,KAAK,CAAC9D,YAAN,CAAmB3B,KAAnB,CAAJ,EAA+B;AAC7B0N,cAAAA,uBAAuB,CAAC1Z,MAAD,EAAS,QAAT,CAAvB;AACAqR,cAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AACD;AAVF;;AATF,KADqD,CAwBrD;;;AACAwC,IAAAA,cAAc,CAAC1C,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAd;AACD;;AAED,WAAShD,gBAAT,CAA0B8C,CAA1B,EAA6BjL,KAA7B,EAAoCkL,IAApC,EAA0CC,IAA1C,EAAgD;AAC9C,aAASsL,sBAAT,CAAgCC,IAAhC,EAAsC;AACpCrR,MAAAA,MAAM,GAAGqR,IAAT;AACAlR,MAAAA,sBAAsB,CAACA,sBAAsB,CAACpH,MAAvB,GAA8B,CAA/B,CAAtB,GAA0DiH,MAA1D;AACAA,MAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AACD,YAAOF,CAAP;AACA,WAAK,CAAL,CADA,CACQ;;AACR,WAAK,CAAL,CAFA,CAEQ;;AACR,WAAK,CAAL;AAAQ;AACNgD,QAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACP,YAAI,CAAC1F,KAAK,CAACxE,QAAN,CAAe,UAAf,CAAL,EAAiC;AAC/ByO,UAAAA,WAAW;AACZ,SAFD,MAEO;AACLjK,UAAAA,KAAK,CAAClF,MAAN,CAAa,UAAb;AACAmF,UAAAA,GAAG,CAACzC,aAAJ;AACAuC,UAAAA,sBAAsB,CAAClF,GAAvB;AACA8H,UAAAA,kBAAkB;AAClB/C,UAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AACD;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOnL,KAAP;AACA,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,SAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,QAAL;AACA,eAAK,OAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACEqO,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,SAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACA,eAAK,OAAL;AACEsL,YAAAA,sBAAsB,CAACzI,aAAD,CAAtB;AACA;;AACF,eAAK,KAAL;AACEyI,YAAAA,sBAAsB,CAAC1I,oBAAD,CAAtB;AACA;;AACF,eAAK,IAAL;AACE0I,YAAAA,sBAAsB,CAAC5I,kBAAD,CAAtB;AACA;;AACF,eAAK,IAAL;AACA,eAAK,IAAL;AACE4I,YAAAA,sBAAsB,CAAC7I,WAAD,CAAtB;AACA;AA7BF;;AA+BA6I,QAAAA,sBAAsB,CAACxI,YAAD,CAAtB;AACA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOjO,KAAP;AACA,eAAK,UAAL;AACEqO,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF;AACE;AALF;;AApDF;AA4DD;;AAED,WAAS4K,eAAT,CAAyB9K,CAAzB,EAA4BjL,KAA5B,EAAmCkL,IAAnC,EAAyCC,IAAzC,EAA+C;AAC7C,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN;AACA,YAAIrN,KAAK,CAAC4W,IAAN,CAAWxU,KAAX,CAAJ,EAAuB;AACvBiO,QAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,CAAZ;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;AACAyF,QAAAA,KAAK,CAACpS,QAAN,CAAe,CAAf,EAAkB4U,YAAlB,CAA+BtB,GAAG,CAACgF,aAAJ,CAAkB3L,KAAlB,CAA/B;;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAC,CAAN;AAAS;AACP0P,QAAAA,WAAW;AACX;;AACF,WAAK,CAAL;AAAQ;AACN,YAAI1P,KAAK,KAAK,MAAd,EAAsB;AACpBiO,UAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AACD;;AACD;AAAO;;AACT,WAAK,CAAL;AAAQ;AACN,YAAInL,KAAK,KAAK,MAAd,EAAsB;AACpB,cAAI2F,QAAJ,EAAc;AACdN,UAAAA,MAAM,GAAGsR,qBAAT;AACA;AACD;;AACD;AAAO;AA3BT,KAD6C,CA+B7C;;;AACAtR,IAAAA,MAAM,GAAG4I,YAAT;AACA5I,IAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AAED,WAAS+C,gBAAT,CAA0BjD,CAA1B,EAA6BjL,KAA7B,EAAoCkL,IAApC,EAA0CC,IAA1C,EAAgD;AAC9C,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN;AACAjL,QAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAAcxF,QAAd,EAAwB,EAAxB,CAAR;AACA,YAAImC,KAAK,CAAC5B,MAAN,GAAe,CAAnB,EAAsByN,UAAU,CAAC7L,KAAD,CAAV;AACtB;;AACF,WAAK,CAAL;AAAQ;AACNsL,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAC,CAAN;AAAS;AACP0P,QAAAA,WAAW;AACX;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAO1P,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,UAAL;AACEiB,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACA;;AACF,eAAK,OAAL;AACEkB,YAAAA,iBAAiB,CAACpM,KAAD,EAAQkL,IAAR,CAAjB;AACAzF,YAAAA,KAAK,CAACnF,GAAN;AACA;;AACF,eAAK,UAAL;AACE+N,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AAbF;;AAeA;;AACF,WAAK,CAAL;AAAQ;AACN,YAAInL,KAAK,KAAK,UAAd,EAA0B;AACxB,cAAI2F,QAAQ,IAAIF,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAACsiB,eAA1C,EACE;AACFjQ,UAAAA,KAAK,CAACnF,GAAN;AACA,cAAI,CAACqF,QAAD,IACF,EAAEF,KAAK,CAACrF,GAAN,YAAqBhN,IAAI,CAACwjB,mBAA5B,CADF,EAEEvR,MAAM,GAAGwR,mBAAT;AACF;AACD;;AACD;AAzCF,KAD8C,CA6C9C;;AACD;;AAED,WAASA,mBAAT,CAA6B5L,CAA7B,EAAgCjL,KAAhC,EAAuCkL,IAAvC,EAA6CC,IAA7C,EAAmD;AACjD,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN;AACAjL,QAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAAcxF,QAAd,EAAwB,EAAxB,CAAR;AACA,YAAImC,KAAK,CAAC5B,MAAN,GAAe,CAAnB,EAAsByN,UAAU,CAAC7L,KAAD,CAAV;AACtB;;AACF,WAAK,CAAL;AAAQ;AACNsL,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;;AACF,WAAK,CAAC,CAAN;AAAS;AACP0P,QAAAA,WAAW;AACX;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAO1P,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,UAAL;AACEkD,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AANF;;AAQA;;AACF,WAAK,CAAL;AAAQ;AACN,YAAInL,KAAK,KAAK,MAAd,EAAsB;AACpBqF,UAAAA,MAAM,GAAGyR,yBAAT;AACA;AACD;;AACD;AA7BF,KADiD,CAiCjD;;AACD;;AAED,WAASH,qBAAT,CAA+B1L,CAA/B,EAAkCjL,KAAlC,EAAyCkL,IAAzC,EAA+CC,IAA/C,EAAqD;AACnD,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN;AACA,YAAIrN,KAAK,CAAC4W,IAAN,CAAWxU,KAAX,CAAJ,EAAuB;AACvBiO,QAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,WAAK,CAAL;AAAQ;AACNxE,QAAAA,GAAG,CAACsB,YAAJ,CAAiBtB,GAAG,CAACgF,aAAJ,CAAkB3L,KAAlB,CAAjB;;AACA;;AACF,WAAK,CAAL;AAAQ;AACNiO,QAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPuE,QAAAA,WAAW;AACX;;AACF,WAAK,CAAL;AAAQ;AACN,YAAI1P,KAAK,KAAK,MAAd,EAAsB;AACpBiO,UAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AACD;;AACD;AApBF,KADmD,CAwBnD;;;AACA9F,IAAAA,MAAM,GAAG4I,YAAT;AACA5I,IAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACD;;AAED,WAAS2L,yBAAT,CAAmC7L,CAAnC,EAAsCjL,KAAtC,EAA6CkL,IAA7C,EAAmDC,IAAnD,EAAyD;AACvD,YAAOF,CAAP;AACA,WAAK,CAAL;AAAQ;AACN;AACAjL,QAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAAcxF,QAAd,EAAwB,EAAxB,CAAR;AACA,YAAImC,KAAK,CAAC5B,MAAN,GAAe,CAAnB,EACE6P,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACF;;AACF,WAAK,CAAL;AAAQ;AACNxE,QAAAA,GAAG,CAACsB,YAAJ,CAAiBtB,GAAG,CAACgF,aAAJ,CAAkB3L,KAAlB,CAAjB;;AACA;;AACF,WAAK,CAAL;AAAQ;AACNiO,QAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,WAAK,CAAC,CAAN;AAAS;AACPuE,QAAAA,WAAW;AACX;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAO1P,KAAP;AACA,eAAK,MAAL;AACEiO,YAAAA,YAAY,CAAChD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;;AACF,eAAK,UAAL;AACEkD,YAAAA,YAAY,CAACpD,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAZ;AACA;AANF;;AAQA;AAzBF,KADuD,CA6BvD;;AACD,GAz9JoD,CA49JrD;AACA;AACA;AACA;AACA;;;AACA,WAASE,kBAAT,CAA4BJ,CAA5B,EAA+BjL,KAA/B,EAAsCkL,IAAtC,EAA4CC,IAA5C,EAAkD;AAChD;AACA;AACA,aAAS4L,UAAT,CAAoBnX,KAApB,EAA2B;AACzB,WAAI,IAAIpB,CAAC,GAAG,CAAR,EAAWY,CAAC,GAAGQ,KAAK,CAACxB,MAAzB,EAAiCI,CAAC,GAAGY,CAArC,EAAwCZ,CAAC,EAAzC,EAA6C;AAC3C,gBAAOoB,KAAK,CAACpB,CAAD,CAAL,CAAS,CAAT,CAAP;AACA,eAAK,OAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACE,mBAAO,IAAP;AAJF;AAMD;;AACD,aAAO,KAAP;AACD;;AAED,QAAI4M,OAAJ;;AAEA,YAAOH,CAAP;AACA,WAAK,CAAL;AAAQ;AACN;AACA,YAAI/E,WAAW,IAAIpI,WAAW,CAAC0W,IAAZ,CAAiBxU,KAAjB,CAAnB,EACEkG,WAAW,GAAG,KAAd;;AACF,YAAIK,eAAJ,EAAqB;AACnBvG,UAAAA,KAAK,GAAGA,KAAK,CAACqD,OAAN,CAAcrF,QAAd,EAAwB,QAAxB,CAAR;AACD;;AACD6N,QAAAA,UAAU,CAAC7L,KAAD,CAAV;AACA;;AACF,WAAK,CAAL;AAAQ;AACNsL,QAAAA,aAAa,CAACtL,KAAD,CAAb;AACA;;AACF,WAAK,CAAL;AAAQ;AACN;AACA;;AACF,WAAK,CAAL;AAAQ;AACN,gBAAOA,KAAP;AACA,eAAK,MAAL;AACE,gBAAI,CAAC+W,UAAU,CAAC7L,IAAD,CAAf,EAAuB;;AACvB;;AACF,eAAK,GAAL;AACA,eAAK,KAAL;AACA,eAAK,YAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,QAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,KAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,GAAL;AACA,eAAK,KAAL;AACA,eAAK,IAAL;AACA,eAAK,SAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,MAAL;AACA,eAAK,IAAL;AACA,eAAK,GAAL;AACA,eAAK,KAAL;AACA,eAAK,MAAL;AACA,eAAK,GAAL;AACA,eAAK,OAAL;AACA,eAAK,MAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,KAAL;AACA,eAAK,KAAL;AACA,eAAK,OAAL;AACA,eAAK,IAAL;AACA,eAAK,GAAL;AACA,eAAK,IAAL;AACA,eAAK,KAAL;AACE,gBAAIvF,QAAJ,EAAc;AACZ;AACD;;AACD,eAAG;AACDF,cAAAA,KAAK,CAACnF,GAAN;AACA8K,cAAAA,OAAO,GAAG3F,KAAK,CAACrF,GAAhB;AACD,aAHD,QAGQgL,OAAO,CAACpM,YAAR,KAAyB9L,SAAS,CAACyB,IAAnC,IACJ,CAACwK,4BAA4B,CAACiM,OAAD,CADzB,IAEJ,CAAC/L,sBAAsB,CAAC+L,OAAD,CAL3B;;AAOAjB,YAAAA,WAAW,CAACc,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAX,CAXF,CAWsC;;AACpC;AA3DF,SADF,CA+DE;;;AACAC,QAAAA,OAAO,GAAI3F,KAAK,CAACpS,QAAN,CAAe+K,MAAf,KAAwB,CAAxB,IAA6BuH,QAA9B,GAA0CjC,eAA1C,GACR+B,KAAK,CAACrF,GADR;;AAEA,YAAIgL,OAAO,CAACpM,YAAR,KAAyB9L,SAAS,CAAC4B,MAAvC,EAA+C;AAC7C+K,UAAAA,sBAAsB,CAACqL,IAAD,CAAtB;AACD,SAFD,MAGK,IAAIE,OAAO,CAACpM,YAAR,KAAyB9L,SAAS,CAAC2B,GAAvC,EAA4C;AAC/CmL,UAAAA,KAAK,GAAGP,gBAAgB,CAACO,KAAD,CAAxB;AACAL,UAAAA,mBAAmB,CAACuL,IAAD,CAAnB;AACD;;AACDpL,QAAAA,uBAAuB,CAACoL,IAAD,CAAvB;AAEAsB,QAAAA,oBAAoB,CAACxM,KAAD,EAAQkL,IAAR,EAAcE,OAAO,CAACpM,YAAtB,CAApB;;AACA,YAAImM,IAAJ,EAAU;AAAE;AACV,cAAInL,KAAK,KAAK,QAAV,IAAsBoL,OAAO,CAACpM,YAAR,KAAyB9L,SAAS,CAAC2B,GAA7D,EAAkE,CAChE;AACD;;AACD4Q,UAAAA,KAAK,CAACnF,GAAN;AACD;;AACD;;AAEF,WAAK,CAAL;AAAQ;AACN8K,QAAAA,OAAO,GAAG3F,KAAK,CAACrF,GAAhB;;AACA,YAAIJ,KAAK,KAAK,QAAV,IACFoL,OAAO,CAACpM,YAAR,KAAyB9L,SAAS,CAAC2B,GADjC,IAEFuW,OAAO,CAACnM,SAAR,KAAsB,QAFxB,EAEkC;AAEhCwG,UAAAA,KAAK,CAACnF,GAAN,GAFgC,CAIhC;AACA;AACD,SARD,MASK;AACH;AACA,cAAI9B,CAAC,GAAGiH,KAAK,CAACpS,QAAN,CAAe+K,MAAf,GAAsB,CAA9B;AACA,cAAImP,IAAI,GAAG9H,KAAK,CAACpS,QAAN,CAAemL,CAAf,CAAX;;AACA,mBAAQ;AACN,gBAAI+O,IAAI,CAACtO,SAAL,CAAeO,WAAf,OAAiCQ,KAArC,EAA4C;AAC1CyF,cAAAA,KAAK,CAAC9E,UAAN,CAAiB4M,IAAjB;AACA;AACD;;AACDA,YAAAA,IAAI,GAAG9H,KAAK,CAACpS,QAAN,CAAe,EAAEmL,CAAjB,CAAP,CALM,CAMN;;AACA,gBAAI+O,IAAI,CAACvO,YAAL,KAAsB9L,SAAS,CAACyB,IAApC,EACE,SARI,CASN;;AACA0Q,YAAAA,MAAM,CAAC4F,CAAD,EAAIjL,KAAJ,EAAWkL,IAAX,EAAiBC,IAAjB,CAAN;AACA;AACD;AACF;;AACD;AAjIF;AAmID;AAED;AACF;AACA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;;;AACA1E,EAAAA,UAAU,CAACuQ,aAAX,GAA2B,UAASC,KAAT,EAAgBC,YAAhB,EAA8BC,YAA9B,EAA4CC,UAA5C,EAAwD;AACjF,QAAIC,MAAM,GAAG,EAAb;;AAEA,YAAOH,YAAP;AACA,WAAK,cAAL;AACE5S,QAAAA,SAAS,GAAGC,UAAZ;AACA;;AACF,WAAK,cAAL;AACED,QAAAA,SAAS,GAAGwD,YAAZ;AACA;;AACF,WAAK,eAAL;AACExD,QAAAA,SAAS,GAAGkK,aAAZ;AACA;;AACF,WAAK,iBAAL;AACElK,QAAAA,SAAS,GAAGyD,eAAZ;AACA;AAZF;;AAeA,QAAIoP,YAAJ,EAAkB;AAChBxS,MAAAA,WAAW,GAAGwS,YAAd;AACD;;AAEDhN,IAAAA,WAAW,GAAG,UAASc,CAAT,EAAYjL,KAAZ,EAAmBkL,IAAnB,EAAyBC,IAAzB,EAA+B;AAC3CjB,MAAAA,SAAS;;AACT,cAAOe,CAAP;AACA,aAAK,CAAL;AAAQ;AACN,cAAIoM,MAAM,CAACjZ,MAAP,GAAgB,CAAhB,IACFiZ,MAAM,CAACA,MAAM,CAACjZ,MAAP,GAAc,CAAf,CAAN,CAAwB,CAAxB,MAA+B,WADjC,EAC8C;AAC5CiZ,YAAAA,MAAM,CAACA,MAAM,CAACjZ,MAAP,GAAc,CAAf,CAAN,CAAwB,CAAxB,KAA8B4B,KAA9B;AACD,WAHD,MAIKqX,MAAM,CAACzjB,IAAP,CAAY,CAAC,WAAD,EAAcoM,KAAd,CAAZ;;AACL;;AACF,aAAK,CAAL;AAAQ;AACNqX,UAAAA,MAAM,CAACzjB,IAAP,CAAY,CAAC,SAAD,EAAYoM,KAAZ,CAAZ;AACA;;AACF,aAAK,CAAL;AAAQ;AACNqX,UAAAA,MAAM,CAACzjB,IAAP,CAAY,CAAC,SAAD,EAAYoM,KAAZ,EACLkL,IAAI,KAAKtF,SAAT,GAAqB,IAArB,GAA4BsF,IADvB,EAELC,IAAI,KAAKvF,SAAT,GAAqB,IAArB,GAA4BuF,IAFvB,EAGL,CAAChF,YAHI,CAAZ;AAIA;;AACF,aAAK,CAAL;AAAQ;AACN,cAAIvG,KAAK,GAAGnL,MAAM,CAACC,MAAP,CAAc,IAAd,CAAZ;;AACA,eAAI,IAAI8J,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG0M,IAAI,CAAC9M,MAAxB,EAAgCI,CAAC,EAAjC,EAAqC;AACnC;AACA,gBAAI8E,CAAC,GAAG4H,IAAI,CAAC1M,CAAD,CAAZ;;AACA,gBAAI8E,CAAC,CAAClF,MAAF,KAAa,CAAjB,EAAoB;AAClBwB,cAAAA,KAAK,CAAC0D,CAAC,CAAC,CAAD,CAAF,CAAL,GAAc,EAAd;AACD,aAFD,MAGK;AACH1D,cAAAA,KAAK,CAAC0D,CAAC,CAAC,CAAD,CAAF,CAAL,GAAcA,CAAC,CAAC,CAAD,CAAf;AACD;AACF;;AACD,cAAIgU,KAAK,GAAG,CAAC,UAAD,EAAatX,KAAb,EAAoBJ,KAApB,CAAZ;AACA,cAAIuL,IAAJ,EAAUmM,KAAK,CAAC1jB,IAAN,CAAW,IAAX;AACVyjB,UAAAA,MAAM,CAACzjB,IAAP,CAAY0jB,KAAZ;AACA;;AACF,aAAK,CAAL;AAAQ;AACND,UAAAA,MAAM,CAACzjB,IAAP,CAAY,CAAC,QAAD,EAAWoM,KAAX,CAAZ;AACA;;AACF,aAAK,CAAC,CAAN;AAAS;AACP;AArCF;AAuCD,KAzCD;;AA2CA,QAAI,CAACoX,UAAL,EAAiB;AACf,WAAK/P,KAAL,CAAW4P,KAAX,EAAkB,IAAlB;AACD,KAFD,MAGK;AACH,WAAI,IAAIzY,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGyY,KAAK,CAAC7Y,MAAzB,EAAiCI,CAAC,EAAlC,EAAsC;AACpC,aAAK6I,KAAL,CAAW4P,KAAK,CAACzY,CAAD,CAAhB;AACD;;AACD,WAAK6I,KAAL,CAAW,EAAX,EAAe,IAAf;AACD;;AACD,WAAOgQ,MAAP;AACD,GA3ED,CAloKqD,CA+sKrD;;;AACA,SAAO5Q,UAAP;AACD","sourcesContent":["\"use strict\";\nmodule.exports = HTMLParser;\n\nvar Document = require('./Document');\nvar DocumentType = require('./DocumentType');\nvar Node = require('./Node');\nvar NAMESPACE = require('./utils').NAMESPACE;\nvar html = require('./htmlelts');\nvar impl = html.elements;\n\nvar pushAll = Function.prototype.apply.bind(Array.prototype.push);\n\n/*\n * This file contains an implementation of the HTML parsing algorithm.\n * The algorithm and the implementation are complex because HTML\n * explicitly defines how the parser should behave for all possible\n * valid and invalid inputs.\n *\n * Usage:\n *\n * The file defines a single HTMLParser() function, which dom.js exposes\n * publicly as document.implementation.mozHTMLParser(). This is a\n * factory function, not a constructor.\n *\n * When you call document.implementation.mozHTMLParser(), it returns\n * an object that has parse() and document() methods. To parse HTML text,\n * pass the text (in one or more chunks) to the parse() method.  When\n * you've passed all the text (on the last chunk, or afterward) pass\n * true as the second argument to parse() to tell the parser that there\n * is no more coming. Call document() to get the document object that\n * the parser is parsing into.  You can call this at any time, before\n * or after calling parse().\n *\n * The first argument to mozHTMLParser is the absolute URL of the document.\n *\n * The second argument is optional and is for internal use only.  Pass an\n * element as the fragmentContext to do innerHTML parsing for the\n * element.  To do innerHTML parsing on a document, pass null. Otherwise,\n * omit the 2nd argument. See HTMLElement.innerHTML for an example.  Note\n * that if you pass a context element, the end() method will return an\n * unwrapped document instead of a wrapped one.\n *\n * Implementation details:\n *\n * This is a long file of almost 7000 lines. It is structured as one\n * big function nested within another big function.  The outer\n * function defines a bunch of constant data, utility functions\n * that use that data, and a couple of classes used by the parser.\n * The outer function also defines and returns the\n * inner function. This inner function is the HTMLParser factory\n * function that implements the parser and holds all the parser state\n * as local variables.  The HTMLParser function is quite big because\n * it defines many nested functions that use those local variables.\n *\n * There are three tightly coupled parser stages: a scanner, a\n * tokenizer and a tree builder. In a (possibly misguided) attempt at\n * efficiency, the stages are not implemented as separate classes:\n * everything shares state and is (mostly) implemented in imperative\n * (rather than OO) style.\n *\n * The stages of the parser work like this: When the client code calls\n * the parser's parse() method, the specified string is passed to\n * scanChars(). The scanner loops through that string and passes characters\n * (sometimes one at a time, sometimes in chunks) to the tokenizer stage.\n * The tokenizer groups the characters into tokens: tags, endtags, runs\n * of text, comments, doctype declarations, and the end-of-file (EOF)\n * token.  These tokens are then passed to the tree building stage via\n * the insertToken() function.  The tree building stage builds up the\n * document tree.\n *\n * The tokenizer stage is a finite state machine.  Each state is\n * implemented as a function with a name that ends in \"_state\".  The\n * initial state is data_state(). The current tokenizer state is stored\n * in the variable 'tokenizer'.  Most state functions expect a single\n * integer argument which represents a single UTF-16 codepoint.  Some\n * states want more characters and set a lookahead property on\n * themselves.  The scanChars() function in the scanner checks for this\n * lookahead property.  If it doesn't exist, then scanChars() just passes\n * the next input character to the current tokenizer state function.\n * Otherwise, scanChars() looks ahead (a given # of characters, or for a\n * matching string, or for a matching regexp) and passes a string of\n * characters to the current tokenizer state function.\n *\n * As a shortcut, certain states of the tokenizer use regular expressions\n * to look ahead in the scanner's input buffer for runs of text, simple\n * tags and attributes.  For well-formed input, these shortcuts skip a\n * lot of state transitions and speed things up a bit.\n *\n * When a tokenizer state function has consumed a complete token, it\n * emits that token, by calling insertToken(), or by calling a utility\n * function that itself calls insertToken().  These tokens are passed to\n * the tree building stage, which is also a state machine.  Like the\n * tokenizer, the tree building states are implemented as functions, and\n * these functions have names that end with _mode (because the HTML spec\n * refers to them as insertion modes). The current insertion mode is held\n * by the 'parser' variable.  Each insertion mode function takes up to 4\n * arguments.  The first is a token type, represented by the constants\n * TAG, ENDTAG, TEXT, COMMENT, DOCTYPE and EOF.  The second argument is\n * the value of the token: the text or comment data, or tagname or\n * doctype.  For tags, the 3rd argument is an array of attributes.  For\n * DOCTYPES it is the optional public id.  For tags, the 4th argument is\n * true if the tag is self-closing. For doctypes, the 4th argument is the\n * optional system id.\n *\n * Search for \"***\" to find the major sub-divisions in the code.\n */\n\n\n/***\n * Data prolog.  Lots of constants declared here, including some\n * very large objects.  They're used throughout the code that follows\n */\n// Token types for the tree builder.\nvar EOF = -1;\nvar TEXT = 1;\nvar TAG = 2;\nvar ENDTAG = 3;\nvar COMMENT = 4;\nvar DOCTYPE = 5;\n\n// A re-usable empty array\nvar NOATTRS = [];\n\n// These DTD public ids put the browser in quirks mode\nvar quirkyPublicIds = /^HTML$|^-\\/\\/W3O\\/\\/DTD W3 HTML Strict 3\\.0\\/\\/EN\\/\\/$|^-\\/W3C\\/DTD HTML 4\\.0 Transitional\\/EN$|^\\+\\/\\/Silmaril\\/\\/dtd html Pro v0r11 19970101\\/\\/|^-\\/\\/AdvaSoft Ltd\\/\\/DTD HTML 3\\.0 asWedit \\+ extensions\\/\\/|^-\\/\\/AS\\/\\/DTD HTML 3\\.0 asWedit \\+ extensions\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.1E\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.2 Final\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML\\/\\/|^-\\/\\/Metrius\\/\\/DTD Metrius Presentational\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 HTML Strict\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 HTML\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 Tables\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 HTML Strict\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 HTML\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 Tables\\/\\/|^-\\/\\/Netscape Comm\\. Corp\\.\\/\\/DTD HTML\\/\\/|^-\\/\\/Netscape Comm\\. Corp\\.\\/\\/DTD Strict HTML\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML 2\\.0\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML Extended 1\\.0\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML Extended Relaxed 1\\.0\\/\\/|^-\\/\\/SoftQuad Software\\/\\/DTD HoTMetaL PRO 6\\.0::19990601::extensions to HTML 4\\.0\\/\\/|^-\\/\\/SoftQuad\\/\\/DTD HoTMetaL PRO 4\\.0::19971010::extensions to HTML 4\\.0\\/\\/|^-\\/\\/Spyglass\\/\\/DTD HTML 2\\.0 Extended\\/\\/|^-\\/\\/SQ\\/\\/DTD HTML 2\\.0 HoTMetaL \\+ extensions\\/\\/|^-\\/\\/Sun Microsystems Corp\\.\\/\\/DTD HotJava HTML\\/\\/|^-\\/\\/Sun Microsystems Corp\\.\\/\\/DTD HotJava Strict HTML\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3 1995-03-24\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2 Draft\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2 Final\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2S Draft\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.0 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.0 Transitional\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML Experimental 19960712\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML Experimental 970421\\/\\/|^-\\/\\/W3C\\/\\/DTD W3 HTML\\/\\/|^-\\/\\/W3O\\/\\/DTD W3 HTML 3\\.0\\/\\/|^-\\/\\/WebTechs\\/\\/DTD Mozilla HTML 2\\.0\\/\\/|^-\\/\\/WebTechs\\/\\/DTD Mozilla HTML\\/\\//i;\n\nvar quirkySystemId = \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\";\n\nvar conditionallyQuirkyPublicIds = /^-\\/\\/W3C\\/\\/DTD HTML 4\\.01 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.01 Transitional\\/\\//i;\n\n// These DTD public ids put the browser in limited quirks mode\nvar limitedQuirkyPublicIds = /^-\\/\\/W3C\\/\\/DTD XHTML 1\\.0 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD XHTML 1\\.0 Transitional\\/\\//i;\n\n\n// Element sets below. See the isA() function for a way to test\n// whether an element is a member of a set\nvar specialSet = Object.create(null);\nspecialSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"address\":true, \"applet\":true, \"area\":true, \"article\":true,\n  \"aside\":true, \"base\":true, \"basefont\":true, \"bgsound\":true,\n  \"blockquote\":true, \"body\":true, \"br\":true, \"button\":true,\n  \"caption\":true, \"center\":true, \"col\":true, \"colgroup\":true,\n  \"dd\":true, \"details\":true, \"dir\":true,\n  \"div\":true, \"dl\":true, \"dt\":true, \"embed\":true,\n  \"fieldset\":true, \"figcaption\":true, \"figure\":true, \"footer\":true,\n  \"form\":true, \"frame\":true, \"frameset\":true, \"h1\":true,\n  \"h2\":true, \"h3\":true, \"h4\":true, \"h5\":true,\n  \"h6\":true, \"head\":true, \"header\":true, \"hgroup\":true,\n  \"hr\":true, \"html\":true, \"iframe\":true, \"img\":true,\n  \"input\":true, \"li\":true, \"link\":true,\n  \"listing\":true, \"main\":true, \"marquee\":true, \"menu\":true, \"meta\":true,\n  \"nav\":true, \"noembed\":true, \"noframes\":true, \"noscript\":true,\n  \"object\":true, \"ol\":true, \"p\":true, \"param\":true,\n  \"plaintext\":true, \"pre\":true, \"script\":true, \"section\":true,\n  \"select\":true, \"source\":true, \"style\":true, \"summary\":true, \"table\":true,\n  \"tbody\":true, \"td\":true, \"template\":true, \"textarea\":true, \"tfoot\":true,\n  \"th\":true, \"thead\":true, \"title\":true, \"tr\":true, \"track\":true,\n  // Note that \"xmp\" was removed from the \"special\" set in the latest\n  // spec, apparently by accident; see\n  // https://github.com/whatwg/html/pull/1919\n  \"ul\":true, \"wbr\":true, \"xmp\":true\n};\nspecialSet[NAMESPACE.SVG] = {\n  __proto__: null,\n  \"foreignObject\": true, \"desc\": true, \"title\": true\n};\nspecialSet[NAMESPACE.MATHML] = {\n  __proto__: null,\n  \"mi\":true, \"mo\":true, \"mn\":true, \"ms\":true,\n  \"mtext\":true, \"annotation-xml\":true\n};\n\n// The set of address, div, and p HTML tags\nvar addressdivpSet = Object.create(null);\naddressdivpSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"address\":true, \"div\":true, \"p\":true\n};\n\nvar dddtSet = Object.create(null);\ndddtSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"dd\":true, \"dt\":true\n};\n\nvar tablesectionrowSet = Object.create(null);\ntablesectionrowSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"table\":true, \"thead\":true, \"tbody\":true, \"tfoot\":true, \"tr\":true\n};\n\nvar impliedEndTagsSet = Object.create(null);\nimpliedEndTagsSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"dd\": true, \"dt\": true, \"li\": true, \"menuitem\": true, \"optgroup\": true,\n  \"option\": true, \"p\": true, \"rb\": true, \"rp\": true, \"rt\": true, \"rtc\": true\n};\n\nvar thoroughImpliedEndTagsSet = Object.create(null);\nthoroughImpliedEndTagsSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"caption\": true, \"colgroup\": true, \"dd\": true, \"dt\": true, \"li\": true,\n  \"optgroup\": true, \"option\": true, \"p\": true, \"rb\": true, \"rp\": true,\n  \"rt\": true, \"rtc\": true, \"tbody\": true, \"td\": true, \"tfoot\": true,\n  \"th\": true, \"thead\": true, \"tr\": true\n};\n\nvar tableContextSet = Object.create(null);\ntableContextSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"table\": true, \"template\": true, \"html\": true\n};\n\nvar tableBodyContextSet = Object.create(null);\ntableBodyContextSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"tbody\": true, \"tfoot\": true, \"thead\": true, \"template\": true, \"html\": true\n};\n\nvar tableRowContextSet = Object.create(null);\ntableRowContextSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"tr\": true, \"template\": true, \"html\": true\n};\n\n// See http://www.w3.org/TR/html5/forms.html#form-associated-element\nvar formassociatedSet = Object.create(null);\nformassociatedSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"button\": true, \"fieldset\": true, \"input\": true, \"keygen\": true,\n  \"object\": true, \"output\": true, \"select\": true, \"textarea\": true,\n  \"img\": true\n};\n\nvar inScopeSet = Object.create(null);\ninScopeSet[NAMESPACE.HTML]= {\n  __proto__: null,\n  \"applet\":true, \"caption\":true, \"html\":true, \"table\":true,\n  \"td\":true, \"th\":true, \"marquee\":true, \"object\":true,\n  \"template\":true\n};\ninScopeSet[NAMESPACE.MATHML] = {\n  __proto__: null,\n  \"mi\":true, \"mo\":true, \"mn\":true, \"ms\":true,\n  \"mtext\":true, \"annotation-xml\":true\n};\ninScopeSet[NAMESPACE.SVG] = {\n  __proto__: null,\n  \"foreignObject\":true, \"desc\":true, \"title\":true\n};\n\nvar inListItemScopeSet = Object.create(inScopeSet);\ninListItemScopeSet[NAMESPACE.HTML] =\n  Object.create(inScopeSet[NAMESPACE.HTML]);\ninListItemScopeSet[NAMESPACE.HTML].ol = true;\ninListItemScopeSet[NAMESPACE.HTML].ul = true;\n\nvar inButtonScopeSet = Object.create(inScopeSet);\ninButtonScopeSet[NAMESPACE.HTML] =\n  Object.create(inScopeSet[NAMESPACE.HTML]);\ninButtonScopeSet[NAMESPACE.HTML].button = true;\n\nvar inTableScopeSet = Object.create(null);\ninTableScopeSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"html\":true, \"table\":true, \"template\":true\n};\n\n// The set of elements for select scope is the everything *except* these\nvar invertedSelectScopeSet = Object.create(null);\ninvertedSelectScopeSet[NAMESPACE.HTML] = {\n  __proto__: null,\n  \"optgroup\":true, \"option\":true\n};\n\nvar mathmlTextIntegrationPointSet = Object.create(null);\nmathmlTextIntegrationPointSet[NAMESPACE.MATHML] = {\n  __proto__: null,\n  mi: true,\n  mo: true,\n  mn: true,\n  ms: true,\n  mtext: true\n};\n\nvar htmlIntegrationPointSet = Object.create(null);\nhtmlIntegrationPointSet[NAMESPACE.SVG] = {\n  __proto__: null,\n  foreignObject: true,\n  desc: true,\n  title: true\n};\n\nvar foreignAttributes = {\n  __proto__: null,\n  \"xlink:actuate\": NAMESPACE.XLINK, \"xlink:arcrole\": NAMESPACE.XLINK,\n  \"xlink:href\":   NAMESPACE.XLINK,  \"xlink:role\":    NAMESPACE.XLINK,\n  \"xlink:show\":   NAMESPACE.XLINK,  \"xlink:title\":   NAMESPACE.XLINK,\n  \"xlink:type\":   NAMESPACE.XLINK,  \"xml:base\":      NAMESPACE.XML,\n  \"xml:lang\":     NAMESPACE.XML,    \"xml:space\":     NAMESPACE.XML,\n  \"xmlns\":        NAMESPACE.XMLNS,  \"xmlns:xlink\":   NAMESPACE.XMLNS\n};\n\n\n// Lowercase to mixed case mapping for SVG attributes and tagnames\nvar svgAttrAdjustments = {\n  __proto__: null,\n  attributename: \"attributeName\", attributetype: \"attributeType\",\n  basefrequency: \"baseFrequency\", baseprofile: \"baseProfile\",\n  calcmode: \"calcMode\", clippathunits: \"clipPathUnits\",\n  diffuseconstant: \"diffuseConstant\",\n  edgemode: \"edgeMode\",\n  filterunits: \"filterUnits\",\n  glyphref: \"glyphRef\", gradienttransform: \"gradientTransform\",\n  gradientunits: \"gradientUnits\", kernelmatrix: \"kernelMatrix\",\n  kernelunitlength: \"kernelUnitLength\", keypoints: \"keyPoints\",\n  keysplines: \"keySplines\", keytimes: \"keyTimes\",\n  lengthadjust: \"lengthAdjust\", limitingconeangle: \"limitingConeAngle\",\n  markerheight: \"markerHeight\", markerunits: \"markerUnits\",\n  markerwidth: \"markerWidth\", maskcontentunits: \"maskContentUnits\",\n  maskunits: \"maskUnits\", numoctaves: \"numOctaves\",\n  pathlength: \"pathLength\", patterncontentunits: \"patternContentUnits\",\n  patterntransform: \"patternTransform\", patternunits: \"patternUnits\",\n  pointsatx: \"pointsAtX\", pointsaty: \"pointsAtY\",\n  pointsatz: \"pointsAtZ\", preservealpha: \"preserveAlpha\",\n  preserveaspectratio: \"preserveAspectRatio\",\n  primitiveunits: \"primitiveUnits\", refx: \"refX\",\n  refy: \"refY\", repeatcount: \"repeatCount\",\n  repeatdur: \"repeatDur\", requiredextensions: \"requiredExtensions\",\n  requiredfeatures: \"requiredFeatures\",\n  specularconstant: \"specularConstant\",\n  specularexponent: \"specularExponent\", spreadmethod: \"spreadMethod\",\n  startoffset: \"startOffset\", stddeviation: \"stdDeviation\",\n  stitchtiles: \"stitchTiles\", surfacescale: \"surfaceScale\",\n  systemlanguage: \"systemLanguage\", tablevalues: \"tableValues\",\n  targetx: \"targetX\", targety: \"targetY\",\n  textlength: \"textLength\", viewbox: \"viewBox\",\n  viewtarget: \"viewTarget\", xchannelselector: \"xChannelSelector\",\n  ychannelselector: \"yChannelSelector\", zoomandpan: \"zoomAndPan\"\n};\n\nvar svgTagNameAdjustments = {\n  __proto__: null,\n  altglyph: \"altGlyph\", altglyphdef: \"altGlyphDef\",\n  altglyphitem: \"altGlyphItem\", animatecolor: \"animateColor\",\n  animatemotion: \"animateMotion\", animatetransform: \"animateTransform\",\n  clippath: \"clipPath\", feblend: \"feBlend\",\n  fecolormatrix: \"feColorMatrix\",\n  fecomponenttransfer: \"feComponentTransfer\", fecomposite: \"feComposite\",\n  feconvolvematrix: \"feConvolveMatrix\",\n  fediffuselighting: \"feDiffuseLighting\",\n  fedisplacementmap: \"feDisplacementMap\",\n  fedistantlight: \"feDistantLight\", feflood: \"feFlood\",\n  fefunca: \"feFuncA\", fefuncb: \"feFuncB\",\n  fefuncg: \"feFuncG\", fefuncr: \"feFuncR\",\n  fegaussianblur: \"feGaussianBlur\", feimage: \"feImage\",\n  femerge: \"feMerge\", femergenode: \"feMergeNode\",\n  femorphology: \"feMorphology\", feoffset: \"feOffset\",\n  fepointlight: \"fePointLight\", fespecularlighting: \"feSpecularLighting\",\n  fespotlight: \"feSpotLight\", fetile: \"feTile\",\n  feturbulence: \"feTurbulence\", foreignobject: \"foreignObject\",\n  glyphref: \"glyphRef\", lineargradient: \"linearGradient\",\n  radialgradient: \"radialGradient\", textpath: \"textPath\"\n};\n\n\n// Data for parsing numeric and named character references\n// These next 3 objects are direct translations of tables\n// in the HTML spec into JavaScript object format\nvar numericCharRefReplacements = {\n  __proto__: null,\n  0x00:0xFFFD, 0x80:0x20AC, 0x82:0x201A, 0x83:0x0192, 0x84:0x201E,\n  0x85:0x2026, 0x86:0x2020, 0x87:0x2021, 0x88:0x02C6, 0x89:0x2030,\n  0x8A:0x0160, 0x8B:0x2039, 0x8C:0x0152, 0x8E:0x017D, 0x91:0x2018,\n  0x92:0x2019, 0x93:0x201C, 0x94:0x201D, 0x95:0x2022, 0x96:0x2013,\n  0x97:0x2014, 0x98:0x02DC, 0x99:0x2122, 0x9A:0x0161, 0x9B:0x203A,\n  0x9C:0x0153, 0x9E:0x017E, 0x9F:0x0178\n};\n\n/*\n * This table is generated with test/tools/update-entities.js\n */\nvar namedCharRefs = {\n  __proto__: null,\n  \"AElig\":0xc6, \"AElig;\":0xc6,\n  \"AMP\":0x26, \"AMP;\":0x26,\n  \"Aacute\":0xc1, \"Aacute;\":0xc1,\n  \"Abreve;\":0x102, \"Acirc\":0xc2,\n  \"Acirc;\":0xc2, \"Acy;\":0x410,\n  \"Afr;\":[0xd835,0xdd04], \"Agrave\":0xc0,\n  \"Agrave;\":0xc0, \"Alpha;\":0x391,\n  \"Amacr;\":0x100, \"And;\":0x2a53,\n  \"Aogon;\":0x104, \"Aopf;\":[0xd835,0xdd38],\n  \"ApplyFunction;\":0x2061, \"Aring\":0xc5,\n  \"Aring;\":0xc5, \"Ascr;\":[0xd835,0xdc9c],\n  \"Assign;\":0x2254, \"Atilde\":0xc3,\n  \"Atilde;\":0xc3, \"Auml\":0xc4,\n  \"Auml;\":0xc4, \"Backslash;\":0x2216,\n  \"Barv;\":0x2ae7, \"Barwed;\":0x2306,\n  \"Bcy;\":0x411, \"Because;\":0x2235,\n  \"Bernoullis;\":0x212c, \"Beta;\":0x392,\n  \"Bfr;\":[0xd835,0xdd05], \"Bopf;\":[0xd835,0xdd39],\n  \"Breve;\":0x2d8, \"Bscr;\":0x212c,\n  \"Bumpeq;\":0x224e, \"CHcy;\":0x427,\n  \"COPY\":0xa9, \"COPY;\":0xa9,\n  \"Cacute;\":0x106, \"Cap;\":0x22d2,\n  \"CapitalDifferentialD;\":0x2145, \"Cayleys;\":0x212d,\n  \"Ccaron;\":0x10c, \"Ccedil\":0xc7,\n  \"Ccedil;\":0xc7, \"Ccirc;\":0x108,\n  \"Cconint;\":0x2230, \"Cdot;\":0x10a,\n  \"Cedilla;\":0xb8, \"CenterDot;\":0xb7,\n  \"Cfr;\":0x212d, \"Chi;\":0x3a7,\n  \"CircleDot;\":0x2299, \"CircleMinus;\":0x2296,\n  \"CirclePlus;\":0x2295, \"CircleTimes;\":0x2297,\n  \"ClockwiseContourIntegral;\":0x2232, \"CloseCurlyDoubleQuote;\":0x201d,\n  \"CloseCurlyQuote;\":0x2019, \"Colon;\":0x2237,\n  \"Colone;\":0x2a74, \"Congruent;\":0x2261,\n  \"Conint;\":0x222f, \"ContourIntegral;\":0x222e,\n  \"Copf;\":0x2102, \"Coproduct;\":0x2210,\n  \"CounterClockwiseContourIntegral;\":0x2233, \"Cross;\":0x2a2f,\n  \"Cscr;\":[0xd835,0xdc9e], \"Cup;\":0x22d3,\n  \"CupCap;\":0x224d, \"DD;\":0x2145,\n  \"DDotrahd;\":0x2911, \"DJcy;\":0x402,\n  \"DScy;\":0x405, \"DZcy;\":0x40f,\n  \"Dagger;\":0x2021, \"Darr;\":0x21a1,\n  \"Dashv;\":0x2ae4, \"Dcaron;\":0x10e,\n  \"Dcy;\":0x414, \"Del;\":0x2207,\n  \"Delta;\":0x394, \"Dfr;\":[0xd835,0xdd07],\n  \"DiacriticalAcute;\":0xb4, \"DiacriticalDot;\":0x2d9,\n  \"DiacriticalDoubleAcute;\":0x2dd, \"DiacriticalGrave;\":0x60,\n  \"DiacriticalTilde;\":0x2dc, \"Diamond;\":0x22c4,\n  \"DifferentialD;\":0x2146, \"Dopf;\":[0xd835,0xdd3b],\n  \"Dot;\":0xa8, \"DotDot;\":0x20dc,\n  \"DotEqual;\":0x2250, \"DoubleContourIntegral;\":0x222f,\n  \"DoubleDot;\":0xa8, \"DoubleDownArrow;\":0x21d3,\n  \"DoubleLeftArrow;\":0x21d0, \"DoubleLeftRightArrow;\":0x21d4,\n  \"DoubleLeftTee;\":0x2ae4, \"DoubleLongLeftArrow;\":0x27f8,\n  \"DoubleLongLeftRightArrow;\":0x27fa, \"DoubleLongRightArrow;\":0x27f9,\n  \"DoubleRightArrow;\":0x21d2, \"DoubleRightTee;\":0x22a8,\n  \"DoubleUpArrow;\":0x21d1, \"DoubleUpDownArrow;\":0x21d5,\n  \"DoubleVerticalBar;\":0x2225, \"DownArrow;\":0x2193,\n  \"DownArrowBar;\":0x2913, \"DownArrowUpArrow;\":0x21f5,\n  \"DownBreve;\":0x311, \"DownLeftRightVector;\":0x2950,\n  \"DownLeftTeeVector;\":0x295e, \"DownLeftVector;\":0x21bd,\n  \"DownLeftVectorBar;\":0x2956, \"DownRightTeeVector;\":0x295f,\n  \"DownRightVector;\":0x21c1, \"DownRightVectorBar;\":0x2957,\n  \"DownTee;\":0x22a4, \"DownTeeArrow;\":0x21a7,\n  \"Downarrow;\":0x21d3, \"Dscr;\":[0xd835,0xdc9f],\n  \"Dstrok;\":0x110, \"ENG;\":0x14a,\n  \"ETH\":0xd0, \"ETH;\":0xd0,\n  \"Eacute\":0xc9, \"Eacute;\":0xc9,\n  \"Ecaron;\":0x11a, \"Ecirc\":0xca,\n  \"Ecirc;\":0xca, \"Ecy;\":0x42d,\n  \"Edot;\":0x116, \"Efr;\":[0xd835,0xdd08],\n  \"Egrave\":0xc8, \"Egrave;\":0xc8,\n  \"Element;\":0x2208, \"Emacr;\":0x112,\n  \"EmptySmallSquare;\":0x25fb, \"EmptyVerySmallSquare;\":0x25ab,\n  \"Eogon;\":0x118, \"Eopf;\":[0xd835,0xdd3c],\n  \"Epsilon;\":0x395, \"Equal;\":0x2a75,\n  \"EqualTilde;\":0x2242, \"Equilibrium;\":0x21cc,\n  \"Escr;\":0x2130, \"Esim;\":0x2a73,\n  \"Eta;\":0x397, \"Euml\":0xcb,\n  \"Euml;\":0xcb, \"Exists;\":0x2203,\n  \"ExponentialE;\":0x2147, \"Fcy;\":0x424,\n  \"Ffr;\":[0xd835,0xdd09], \"FilledSmallSquare;\":0x25fc,\n  \"FilledVerySmallSquare;\":0x25aa, \"Fopf;\":[0xd835,0xdd3d],\n  \"ForAll;\":0x2200, \"Fouriertrf;\":0x2131,\n  \"Fscr;\":0x2131, \"GJcy;\":0x403,\n  \"GT\":0x3e, \"GT;\":0x3e,\n  \"Gamma;\":0x393, \"Gammad;\":0x3dc,\n  \"Gbreve;\":0x11e, \"Gcedil;\":0x122,\n  \"Gcirc;\":0x11c, \"Gcy;\":0x413,\n  \"Gdot;\":0x120, \"Gfr;\":[0xd835,0xdd0a],\n  \"Gg;\":0x22d9, \"Gopf;\":[0xd835,0xdd3e],\n  \"GreaterEqual;\":0x2265, \"GreaterEqualLess;\":0x22db,\n  \"GreaterFullEqual;\":0x2267, \"GreaterGreater;\":0x2aa2,\n  \"GreaterLess;\":0x2277, \"GreaterSlantEqual;\":0x2a7e,\n  \"GreaterTilde;\":0x2273, \"Gscr;\":[0xd835,0xdca2],\n  \"Gt;\":0x226b, \"HARDcy;\":0x42a,\n  \"Hacek;\":0x2c7, \"Hat;\":0x5e,\n  \"Hcirc;\":0x124, \"Hfr;\":0x210c,\n  \"HilbertSpace;\":0x210b, \"Hopf;\":0x210d,\n  \"HorizontalLine;\":0x2500, \"Hscr;\":0x210b,\n  \"Hstrok;\":0x126, \"HumpDownHump;\":0x224e,\n  \"HumpEqual;\":0x224f, \"IEcy;\":0x415,\n  \"IJlig;\":0x132, \"IOcy;\":0x401,\n  \"Iacute\":0xcd, \"Iacute;\":0xcd,\n  \"Icirc\":0xce, \"Icirc;\":0xce,\n  \"Icy;\":0x418, \"Idot;\":0x130,\n  \"Ifr;\":0x2111, \"Igrave\":0xcc,\n  \"Igrave;\":0xcc, \"Im;\":0x2111,\n  \"Imacr;\":0x12a, \"ImaginaryI;\":0x2148,\n  \"Implies;\":0x21d2, \"Int;\":0x222c,\n  \"Integral;\":0x222b, \"Intersection;\":0x22c2,\n  \"InvisibleComma;\":0x2063, \"InvisibleTimes;\":0x2062,\n  \"Iogon;\":0x12e, \"Iopf;\":[0xd835,0xdd40],\n  \"Iota;\":0x399, \"Iscr;\":0x2110,\n  \"Itilde;\":0x128, \"Iukcy;\":0x406,\n  \"Iuml\":0xcf, \"Iuml;\":0xcf,\n  \"Jcirc;\":0x134, \"Jcy;\":0x419,\n  \"Jfr;\":[0xd835,0xdd0d], \"Jopf;\":[0xd835,0xdd41],\n  \"Jscr;\":[0xd835,0xdca5], \"Jsercy;\":0x408,\n  \"Jukcy;\":0x404, \"KHcy;\":0x425,\n  \"KJcy;\":0x40c, \"Kappa;\":0x39a,\n  \"Kcedil;\":0x136, \"Kcy;\":0x41a,\n  \"Kfr;\":[0xd835,0xdd0e], \"Kopf;\":[0xd835,0xdd42],\n  \"Kscr;\":[0xd835,0xdca6], \"LJcy;\":0x409,\n  \"LT\":0x3c, \"LT;\":0x3c,\n  \"Lacute;\":0x139, \"Lambda;\":0x39b,\n  \"Lang;\":0x27ea, \"Laplacetrf;\":0x2112,\n  \"Larr;\":0x219e, \"Lcaron;\":0x13d,\n  \"Lcedil;\":0x13b, \"Lcy;\":0x41b,\n  \"LeftAngleBracket;\":0x27e8, \"LeftArrow;\":0x2190,\n  \"LeftArrowBar;\":0x21e4, \"LeftArrowRightArrow;\":0x21c6,\n  \"LeftCeiling;\":0x2308, \"LeftDoubleBracket;\":0x27e6,\n  \"LeftDownTeeVector;\":0x2961, \"LeftDownVector;\":0x21c3,\n  \"LeftDownVectorBar;\":0x2959, \"LeftFloor;\":0x230a,\n  \"LeftRightArrow;\":0x2194, \"LeftRightVector;\":0x294e,\n  \"LeftTee;\":0x22a3, \"LeftTeeArrow;\":0x21a4,\n  \"LeftTeeVector;\":0x295a, \"LeftTriangle;\":0x22b2,\n  \"LeftTriangleBar;\":0x29cf, \"LeftTriangleEqual;\":0x22b4,\n  \"LeftUpDownVector;\":0x2951, \"LeftUpTeeVector;\":0x2960,\n  \"LeftUpVector;\":0x21bf, \"LeftUpVectorBar;\":0x2958,\n  \"LeftVector;\":0x21bc, \"LeftVectorBar;\":0x2952,\n  \"Leftarrow;\":0x21d0, \"Leftrightarrow;\":0x21d4,\n  \"LessEqualGreater;\":0x22da, \"LessFullEqual;\":0x2266,\n  \"LessGreater;\":0x2276, \"LessLess;\":0x2aa1,\n  \"LessSlantEqual;\":0x2a7d, \"LessTilde;\":0x2272,\n  \"Lfr;\":[0xd835,0xdd0f], \"Ll;\":0x22d8,\n  \"Lleftarrow;\":0x21da, \"Lmidot;\":0x13f,\n  \"LongLeftArrow;\":0x27f5, \"LongLeftRightArrow;\":0x27f7,\n  \"LongRightArrow;\":0x27f6, \"Longleftarrow;\":0x27f8,\n  \"Longleftrightarrow;\":0x27fa, \"Longrightarrow;\":0x27f9,\n  \"Lopf;\":[0xd835,0xdd43], \"LowerLeftArrow;\":0x2199,\n  \"LowerRightArrow;\":0x2198, \"Lscr;\":0x2112,\n  \"Lsh;\":0x21b0, \"Lstrok;\":0x141,\n  \"Lt;\":0x226a, \"Map;\":0x2905,\n  \"Mcy;\":0x41c, \"MediumSpace;\":0x205f,\n  \"Mellintrf;\":0x2133, \"Mfr;\":[0xd835,0xdd10],\n  \"MinusPlus;\":0x2213, \"Mopf;\":[0xd835,0xdd44],\n  \"Mscr;\":0x2133, \"Mu;\":0x39c,\n  \"NJcy;\":0x40a, \"Nacute;\":0x143,\n  \"Ncaron;\":0x147, \"Ncedil;\":0x145,\n  \"Ncy;\":0x41d, \"NegativeMediumSpace;\":0x200b,\n  \"NegativeThickSpace;\":0x200b, \"NegativeThinSpace;\":0x200b,\n  \"NegativeVeryThinSpace;\":0x200b, \"NestedGreaterGreater;\":0x226b,\n  \"NestedLessLess;\":0x226a, \"NewLine;\":0xa,\n  \"Nfr;\":[0xd835,0xdd11], \"NoBreak;\":0x2060,\n  \"NonBreakingSpace;\":0xa0, \"Nopf;\":0x2115,\n  \"Not;\":0x2aec, \"NotCongruent;\":0x2262,\n  \"NotCupCap;\":0x226d, \"NotDoubleVerticalBar;\":0x2226,\n  \"NotElement;\":0x2209, \"NotEqual;\":0x2260,\n  \"NotEqualTilde;\":[0x2242,0x338], \"NotExists;\":0x2204,\n  \"NotGreater;\":0x226f, \"NotGreaterEqual;\":0x2271,\n  \"NotGreaterFullEqual;\":[0x2267,0x338], \"NotGreaterGreater;\":[0x226b,0x338],\n  \"NotGreaterLess;\":0x2279, \"NotGreaterSlantEqual;\":[0x2a7e,0x338],\n  \"NotGreaterTilde;\":0x2275, \"NotHumpDownHump;\":[0x224e,0x338],\n  \"NotHumpEqual;\":[0x224f,0x338], \"NotLeftTriangle;\":0x22ea,\n  \"NotLeftTriangleBar;\":[0x29cf,0x338], \"NotLeftTriangleEqual;\":0x22ec,\n  \"NotLess;\":0x226e, \"NotLessEqual;\":0x2270,\n  \"NotLessGreater;\":0x2278, \"NotLessLess;\":[0x226a,0x338],\n  \"NotLessSlantEqual;\":[0x2a7d,0x338], \"NotLessTilde;\":0x2274,\n  \"NotNestedGreaterGreater;\":[0x2aa2,0x338], \"NotNestedLessLess;\":[0x2aa1,0x338],\n  \"NotPrecedes;\":0x2280, \"NotPrecedesEqual;\":[0x2aaf,0x338],\n  \"NotPrecedesSlantEqual;\":0x22e0, \"NotReverseElement;\":0x220c,\n  \"NotRightTriangle;\":0x22eb, \"NotRightTriangleBar;\":[0x29d0,0x338],\n  \"NotRightTriangleEqual;\":0x22ed, \"NotSquareSubset;\":[0x228f,0x338],\n  \"NotSquareSubsetEqual;\":0x22e2, \"NotSquareSuperset;\":[0x2290,0x338],\n  \"NotSquareSupersetEqual;\":0x22e3, \"NotSubset;\":[0x2282,0x20d2],\n  \"NotSubsetEqual;\":0x2288, \"NotSucceeds;\":0x2281,\n  \"NotSucceedsEqual;\":[0x2ab0,0x338], \"NotSucceedsSlantEqual;\":0x22e1,\n  \"NotSucceedsTilde;\":[0x227f,0x338], \"NotSuperset;\":[0x2283,0x20d2],\n  \"NotSupersetEqual;\":0x2289, \"NotTilde;\":0x2241,\n  \"NotTildeEqual;\":0x2244, \"NotTildeFullEqual;\":0x2247,\n  \"NotTildeTilde;\":0x2249, \"NotVerticalBar;\":0x2224,\n  \"Nscr;\":[0xd835,0xdca9], \"Ntilde\":0xd1,\n  \"Ntilde;\":0xd1, \"Nu;\":0x39d,\n  \"OElig;\":0x152, \"Oacute\":0xd3,\n  \"Oacute;\":0xd3, \"Ocirc\":0xd4,\n  \"Ocirc;\":0xd4, \"Ocy;\":0x41e,\n  \"Odblac;\":0x150, \"Ofr;\":[0xd835,0xdd12],\n  \"Ograve\":0xd2, \"Ograve;\":0xd2,\n  \"Omacr;\":0x14c, \"Omega;\":0x3a9,\n  \"Omicron;\":0x39f, \"Oopf;\":[0xd835,0xdd46],\n  \"OpenCurlyDoubleQuote;\":0x201c, \"OpenCurlyQuote;\":0x2018,\n  \"Or;\":0x2a54, \"Oscr;\":[0xd835,0xdcaa],\n  \"Oslash\":0xd8, \"Oslash;\":0xd8,\n  \"Otilde\":0xd5, \"Otilde;\":0xd5,\n  \"Otimes;\":0x2a37, \"Ouml\":0xd6,\n  \"Ouml;\":0xd6, \"OverBar;\":0x203e,\n  \"OverBrace;\":0x23de, \"OverBracket;\":0x23b4,\n  \"OverParenthesis;\":0x23dc, \"PartialD;\":0x2202,\n  \"Pcy;\":0x41f, \"Pfr;\":[0xd835,0xdd13],\n  \"Phi;\":0x3a6, \"Pi;\":0x3a0,\n  \"PlusMinus;\":0xb1, \"Poincareplane;\":0x210c,\n  \"Popf;\":0x2119, \"Pr;\":0x2abb,\n  \"Precedes;\":0x227a, \"PrecedesEqual;\":0x2aaf,\n  \"PrecedesSlantEqual;\":0x227c, \"PrecedesTilde;\":0x227e,\n  \"Prime;\":0x2033, \"Product;\":0x220f,\n  \"Proportion;\":0x2237, \"Proportional;\":0x221d,\n  \"Pscr;\":[0xd835,0xdcab], \"Psi;\":0x3a8,\n  \"QUOT\":0x22, \"QUOT;\":0x22,\n  \"Qfr;\":[0xd835,0xdd14], \"Qopf;\":0x211a,\n  \"Qscr;\":[0xd835,0xdcac], \"RBarr;\":0x2910,\n  \"REG\":0xae, \"REG;\":0xae,\n  \"Racute;\":0x154, \"Rang;\":0x27eb,\n  \"Rarr;\":0x21a0, \"Rarrtl;\":0x2916,\n  \"Rcaron;\":0x158, \"Rcedil;\":0x156,\n  \"Rcy;\":0x420, \"Re;\":0x211c,\n  \"ReverseElement;\":0x220b, \"ReverseEquilibrium;\":0x21cb,\n  \"ReverseUpEquilibrium;\":0x296f, \"Rfr;\":0x211c,\n  \"Rho;\":0x3a1, \"RightAngleBracket;\":0x27e9,\n  \"RightArrow;\":0x2192, \"RightArrowBar;\":0x21e5,\n  \"RightArrowLeftArrow;\":0x21c4, \"RightCeiling;\":0x2309,\n  \"RightDoubleBracket;\":0x27e7, \"RightDownTeeVector;\":0x295d,\n  \"RightDownVector;\":0x21c2, \"RightDownVectorBar;\":0x2955,\n  \"RightFloor;\":0x230b, \"RightTee;\":0x22a2,\n  \"RightTeeArrow;\":0x21a6, \"RightTeeVector;\":0x295b,\n  \"RightTriangle;\":0x22b3, \"RightTriangleBar;\":0x29d0,\n  \"RightTriangleEqual;\":0x22b5, \"RightUpDownVector;\":0x294f,\n  \"RightUpTeeVector;\":0x295c, \"RightUpVector;\":0x21be,\n  \"RightUpVectorBar;\":0x2954, \"RightVector;\":0x21c0,\n  \"RightVectorBar;\":0x2953, \"Rightarrow;\":0x21d2,\n  \"Ropf;\":0x211d, \"RoundImplies;\":0x2970,\n  \"Rrightarrow;\":0x21db, \"Rscr;\":0x211b,\n  \"Rsh;\":0x21b1, \"RuleDelayed;\":0x29f4,\n  \"SHCHcy;\":0x429, \"SHcy;\":0x428,\n  \"SOFTcy;\":0x42c, \"Sacute;\":0x15a,\n  \"Sc;\":0x2abc, \"Scaron;\":0x160,\n  \"Scedil;\":0x15e, \"Scirc;\":0x15c,\n  \"Scy;\":0x421, \"Sfr;\":[0xd835,0xdd16],\n  \"ShortDownArrow;\":0x2193, \"ShortLeftArrow;\":0x2190,\n  \"ShortRightArrow;\":0x2192, \"ShortUpArrow;\":0x2191,\n  \"Sigma;\":0x3a3, \"SmallCircle;\":0x2218,\n  \"Sopf;\":[0xd835,0xdd4a], \"Sqrt;\":0x221a,\n  \"Square;\":0x25a1, \"SquareIntersection;\":0x2293,\n  \"SquareSubset;\":0x228f, \"SquareSubsetEqual;\":0x2291,\n  \"SquareSuperset;\":0x2290, \"SquareSupersetEqual;\":0x2292,\n  \"SquareUnion;\":0x2294, \"Sscr;\":[0xd835,0xdcae],\n  \"Star;\":0x22c6, \"Sub;\":0x22d0,\n  \"Subset;\":0x22d0, \"SubsetEqual;\":0x2286,\n  \"Succeeds;\":0x227b, \"SucceedsEqual;\":0x2ab0,\n  \"SucceedsSlantEqual;\":0x227d, \"SucceedsTilde;\":0x227f,\n  \"SuchThat;\":0x220b, \"Sum;\":0x2211,\n  \"Sup;\":0x22d1, \"Superset;\":0x2283,\n  \"SupersetEqual;\":0x2287, \"Supset;\":0x22d1,\n  \"THORN\":0xde, \"THORN;\":0xde,\n  \"TRADE;\":0x2122, \"TSHcy;\":0x40b,\n  \"TScy;\":0x426, \"Tab;\":0x9,\n  \"Tau;\":0x3a4, \"Tcaron;\":0x164,\n  \"Tcedil;\":0x162, \"Tcy;\":0x422,\n  \"Tfr;\":[0xd835,0xdd17], \"Therefore;\":0x2234,\n  \"Theta;\":0x398, \"ThickSpace;\":[0x205f,0x200a],\n  \"ThinSpace;\":0x2009, \"Tilde;\":0x223c,\n  \"TildeEqual;\":0x2243, \"TildeFullEqual;\":0x2245,\n  \"TildeTilde;\":0x2248, \"Topf;\":[0xd835,0xdd4b],\n  \"TripleDot;\":0x20db, \"Tscr;\":[0xd835,0xdcaf],\n  \"Tstrok;\":0x166, \"Uacute\":0xda,\n  \"Uacute;\":0xda, \"Uarr;\":0x219f,\n  \"Uarrocir;\":0x2949, \"Ubrcy;\":0x40e,\n  \"Ubreve;\":0x16c, \"Ucirc\":0xdb,\n  \"Ucirc;\":0xdb, \"Ucy;\":0x423,\n  \"Udblac;\":0x170, \"Ufr;\":[0xd835,0xdd18],\n  \"Ugrave\":0xd9, \"Ugrave;\":0xd9,\n  \"Umacr;\":0x16a, \"UnderBar;\":0x5f,\n  \"UnderBrace;\":0x23df, \"UnderBracket;\":0x23b5,\n  \"UnderParenthesis;\":0x23dd, \"Union;\":0x22c3,\n  \"UnionPlus;\":0x228e, \"Uogon;\":0x172,\n  \"Uopf;\":[0xd835,0xdd4c], \"UpArrow;\":0x2191,\n  \"UpArrowBar;\":0x2912, \"UpArrowDownArrow;\":0x21c5,\n  \"UpDownArrow;\":0x2195, \"UpEquilibrium;\":0x296e,\n  \"UpTee;\":0x22a5, \"UpTeeArrow;\":0x21a5,\n  \"Uparrow;\":0x21d1, \"Updownarrow;\":0x21d5,\n  \"UpperLeftArrow;\":0x2196, \"UpperRightArrow;\":0x2197,\n  \"Upsi;\":0x3d2, \"Upsilon;\":0x3a5,\n  \"Uring;\":0x16e, \"Uscr;\":[0xd835,0xdcb0],\n  \"Utilde;\":0x168, \"Uuml\":0xdc,\n  \"Uuml;\":0xdc, \"VDash;\":0x22ab,\n  \"Vbar;\":0x2aeb, \"Vcy;\":0x412,\n  \"Vdash;\":0x22a9, \"Vdashl;\":0x2ae6,\n  \"Vee;\":0x22c1, \"Verbar;\":0x2016,\n  \"Vert;\":0x2016, \"VerticalBar;\":0x2223,\n  \"VerticalLine;\":0x7c, \"VerticalSeparator;\":0x2758,\n  \"VerticalTilde;\":0x2240, \"VeryThinSpace;\":0x200a,\n  \"Vfr;\":[0xd835,0xdd19], \"Vopf;\":[0xd835,0xdd4d],\n  \"Vscr;\":[0xd835,0xdcb1], \"Vvdash;\":0x22aa,\n  \"Wcirc;\":0x174, \"Wedge;\":0x22c0,\n  \"Wfr;\":[0xd835,0xdd1a], \"Wopf;\":[0xd835,0xdd4e],\n  \"Wscr;\":[0xd835,0xdcb2], \"Xfr;\":[0xd835,0xdd1b],\n  \"Xi;\":0x39e, \"Xopf;\":[0xd835,0xdd4f],\n  \"Xscr;\":[0xd835,0xdcb3], \"YAcy;\":0x42f,\n  \"YIcy;\":0x407, \"YUcy;\":0x42e,\n  \"Yacute\":0xdd, \"Yacute;\":0xdd,\n  \"Ycirc;\":0x176, \"Ycy;\":0x42b,\n  \"Yfr;\":[0xd835,0xdd1c], \"Yopf;\":[0xd835,0xdd50],\n  \"Yscr;\":[0xd835,0xdcb4], \"Yuml;\":0x178,\n  \"ZHcy;\":0x416, \"Zacute;\":0x179,\n  \"Zcaron;\":0x17d, \"Zcy;\":0x417,\n  \"Zdot;\":0x17b, \"ZeroWidthSpace;\":0x200b,\n  \"Zeta;\":0x396, \"Zfr;\":0x2128,\n  \"Zopf;\":0x2124, \"Zscr;\":[0xd835,0xdcb5],\n  \"aacute\":0xe1, \"aacute;\":0xe1,\n  \"abreve;\":0x103, \"ac;\":0x223e,\n  \"acE;\":[0x223e,0x333], \"acd;\":0x223f,\n  \"acirc\":0xe2, \"acirc;\":0xe2,\n  \"acute\":0xb4, \"acute;\":0xb4,\n  \"acy;\":0x430, \"aelig\":0xe6,\n  \"aelig;\":0xe6, \"af;\":0x2061,\n  \"afr;\":[0xd835,0xdd1e], \"agrave\":0xe0,\n  \"agrave;\":0xe0, \"alefsym;\":0x2135,\n  \"aleph;\":0x2135, \"alpha;\":0x3b1,\n  \"amacr;\":0x101, \"amalg;\":0x2a3f,\n  \"amp\":0x26, \"amp;\":0x26,\n  \"and;\":0x2227, \"andand;\":0x2a55,\n  \"andd;\":0x2a5c, \"andslope;\":0x2a58,\n  \"andv;\":0x2a5a, \"ang;\":0x2220,\n  \"ange;\":0x29a4, \"angle;\":0x2220,\n  \"angmsd;\":0x2221, \"angmsdaa;\":0x29a8,\n  \"angmsdab;\":0x29a9, \"angmsdac;\":0x29aa,\n  \"angmsdad;\":0x29ab, \"angmsdae;\":0x29ac,\n  \"angmsdaf;\":0x29ad, \"angmsdag;\":0x29ae,\n  \"angmsdah;\":0x29af, \"angrt;\":0x221f,\n  \"angrtvb;\":0x22be, \"angrtvbd;\":0x299d,\n  \"angsph;\":0x2222, \"angst;\":0xc5,\n  \"angzarr;\":0x237c, \"aogon;\":0x105,\n  \"aopf;\":[0xd835,0xdd52], \"ap;\":0x2248,\n  \"apE;\":0x2a70, \"apacir;\":0x2a6f,\n  \"ape;\":0x224a, \"apid;\":0x224b,\n  \"apos;\":0x27, \"approx;\":0x2248,\n  \"approxeq;\":0x224a, \"aring\":0xe5,\n  \"aring;\":0xe5, \"ascr;\":[0xd835,0xdcb6],\n  \"ast;\":0x2a, \"asymp;\":0x2248,\n  \"asympeq;\":0x224d, \"atilde\":0xe3,\n  \"atilde;\":0xe3, \"auml\":0xe4,\n  \"auml;\":0xe4, \"awconint;\":0x2233,\n  \"awint;\":0x2a11, \"bNot;\":0x2aed,\n  \"backcong;\":0x224c, \"backepsilon;\":0x3f6,\n  \"backprime;\":0x2035, \"backsim;\":0x223d,\n  \"backsimeq;\":0x22cd, \"barvee;\":0x22bd,\n  \"barwed;\":0x2305, \"barwedge;\":0x2305,\n  \"bbrk;\":0x23b5, \"bbrktbrk;\":0x23b6,\n  \"bcong;\":0x224c, \"bcy;\":0x431,\n  \"bdquo;\":0x201e, \"becaus;\":0x2235,\n  \"because;\":0x2235, \"bemptyv;\":0x29b0,\n  \"bepsi;\":0x3f6, \"bernou;\":0x212c,\n  \"beta;\":0x3b2, \"beth;\":0x2136,\n  \"between;\":0x226c, \"bfr;\":[0xd835,0xdd1f],\n  \"bigcap;\":0x22c2, \"bigcirc;\":0x25ef,\n  \"bigcup;\":0x22c3, \"bigodot;\":0x2a00,\n  \"bigoplus;\":0x2a01, \"bigotimes;\":0x2a02,\n  \"bigsqcup;\":0x2a06, \"bigstar;\":0x2605,\n  \"bigtriangledown;\":0x25bd, \"bigtriangleup;\":0x25b3,\n  \"biguplus;\":0x2a04, \"bigvee;\":0x22c1,\n  \"bigwedge;\":0x22c0, \"bkarow;\":0x290d,\n  \"blacklozenge;\":0x29eb, \"blacksquare;\":0x25aa,\n  \"blacktriangle;\":0x25b4, \"blacktriangledown;\":0x25be,\n  \"blacktriangleleft;\":0x25c2, \"blacktriangleright;\":0x25b8,\n  \"blank;\":0x2423, \"blk12;\":0x2592,\n  \"blk14;\":0x2591, \"blk34;\":0x2593,\n  \"block;\":0x2588, \"bne;\":[0x3d,0x20e5],\n  \"bnequiv;\":[0x2261,0x20e5], \"bnot;\":0x2310,\n  \"bopf;\":[0xd835,0xdd53], \"bot;\":0x22a5,\n  \"bottom;\":0x22a5, \"bowtie;\":0x22c8,\n  \"boxDL;\":0x2557, \"boxDR;\":0x2554,\n  \"boxDl;\":0x2556, \"boxDr;\":0x2553,\n  \"boxH;\":0x2550, \"boxHD;\":0x2566,\n  \"boxHU;\":0x2569, \"boxHd;\":0x2564,\n  \"boxHu;\":0x2567, \"boxUL;\":0x255d,\n  \"boxUR;\":0x255a, \"boxUl;\":0x255c,\n  \"boxUr;\":0x2559, \"boxV;\":0x2551,\n  \"boxVH;\":0x256c, \"boxVL;\":0x2563,\n  \"boxVR;\":0x2560, \"boxVh;\":0x256b,\n  \"boxVl;\":0x2562, \"boxVr;\":0x255f,\n  \"boxbox;\":0x29c9, \"boxdL;\":0x2555,\n  \"boxdR;\":0x2552, \"boxdl;\":0x2510,\n  \"boxdr;\":0x250c, \"boxh;\":0x2500,\n  \"boxhD;\":0x2565, \"boxhU;\":0x2568,\n  \"boxhd;\":0x252c, \"boxhu;\":0x2534,\n  \"boxminus;\":0x229f, \"boxplus;\":0x229e,\n  \"boxtimes;\":0x22a0, \"boxuL;\":0x255b,\n  \"boxuR;\":0x2558, \"boxul;\":0x2518,\n  \"boxur;\":0x2514, \"boxv;\":0x2502,\n  \"boxvH;\":0x256a, \"boxvL;\":0x2561,\n  \"boxvR;\":0x255e, \"boxvh;\":0x253c,\n  \"boxvl;\":0x2524, \"boxvr;\":0x251c,\n  \"bprime;\":0x2035, \"breve;\":0x2d8,\n  \"brvbar\":0xa6, \"brvbar;\":0xa6,\n  \"bscr;\":[0xd835,0xdcb7], \"bsemi;\":0x204f,\n  \"bsim;\":0x223d, \"bsime;\":0x22cd,\n  \"bsol;\":0x5c, \"bsolb;\":0x29c5,\n  \"bsolhsub;\":0x27c8, \"bull;\":0x2022,\n  \"bullet;\":0x2022, \"bump;\":0x224e,\n  \"bumpE;\":0x2aae, \"bumpe;\":0x224f,\n  \"bumpeq;\":0x224f, \"cacute;\":0x107,\n  \"cap;\":0x2229, \"capand;\":0x2a44,\n  \"capbrcup;\":0x2a49, \"capcap;\":0x2a4b,\n  \"capcup;\":0x2a47, \"capdot;\":0x2a40,\n  \"caps;\":[0x2229,0xfe00], \"caret;\":0x2041,\n  \"caron;\":0x2c7, \"ccaps;\":0x2a4d,\n  \"ccaron;\":0x10d, \"ccedil\":0xe7,\n  \"ccedil;\":0xe7, \"ccirc;\":0x109,\n  \"ccups;\":0x2a4c, \"ccupssm;\":0x2a50,\n  \"cdot;\":0x10b, \"cedil\":0xb8,\n  \"cedil;\":0xb8, \"cemptyv;\":0x29b2,\n  \"cent\":0xa2, \"cent;\":0xa2,\n  \"centerdot;\":0xb7, \"cfr;\":[0xd835,0xdd20],\n  \"chcy;\":0x447, \"check;\":0x2713,\n  \"checkmark;\":0x2713, \"chi;\":0x3c7,\n  \"cir;\":0x25cb, \"cirE;\":0x29c3,\n  \"circ;\":0x2c6, \"circeq;\":0x2257,\n  \"circlearrowleft;\":0x21ba, \"circlearrowright;\":0x21bb,\n  \"circledR;\":0xae, \"circledS;\":0x24c8,\n  \"circledast;\":0x229b, \"circledcirc;\":0x229a,\n  \"circleddash;\":0x229d, \"cire;\":0x2257,\n  \"cirfnint;\":0x2a10, \"cirmid;\":0x2aef,\n  \"cirscir;\":0x29c2, \"clubs;\":0x2663,\n  \"clubsuit;\":0x2663, \"colon;\":0x3a,\n  \"colone;\":0x2254, \"coloneq;\":0x2254,\n  \"comma;\":0x2c, \"commat;\":0x40,\n  \"comp;\":0x2201, \"compfn;\":0x2218,\n  \"complement;\":0x2201, \"complexes;\":0x2102,\n  \"cong;\":0x2245, \"congdot;\":0x2a6d,\n  \"conint;\":0x222e, \"copf;\":[0xd835,0xdd54],\n  \"coprod;\":0x2210, \"copy\":0xa9,\n  \"copy;\":0xa9, \"copysr;\":0x2117,\n  \"crarr;\":0x21b5, \"cross;\":0x2717,\n  \"cscr;\":[0xd835,0xdcb8], \"csub;\":0x2acf,\n  \"csube;\":0x2ad1, \"csup;\":0x2ad0,\n  \"csupe;\":0x2ad2, \"ctdot;\":0x22ef,\n  \"cudarrl;\":0x2938, \"cudarrr;\":0x2935,\n  \"cuepr;\":0x22de, \"cuesc;\":0x22df,\n  \"cularr;\":0x21b6, \"cularrp;\":0x293d,\n  \"cup;\":0x222a, \"cupbrcap;\":0x2a48,\n  \"cupcap;\":0x2a46, \"cupcup;\":0x2a4a,\n  \"cupdot;\":0x228d, \"cupor;\":0x2a45,\n  \"cups;\":[0x222a,0xfe00], \"curarr;\":0x21b7,\n  \"curarrm;\":0x293c, \"curlyeqprec;\":0x22de,\n  \"curlyeqsucc;\":0x22df, \"curlyvee;\":0x22ce,\n  \"curlywedge;\":0x22cf, \"curren\":0xa4,\n  \"curren;\":0xa4, \"curvearrowleft;\":0x21b6,\n  \"curvearrowright;\":0x21b7, \"cuvee;\":0x22ce,\n  \"cuwed;\":0x22cf, \"cwconint;\":0x2232,\n  \"cwint;\":0x2231, \"cylcty;\":0x232d,\n  \"dArr;\":0x21d3, \"dHar;\":0x2965,\n  \"dagger;\":0x2020, \"daleth;\":0x2138,\n  \"darr;\":0x2193, \"dash;\":0x2010,\n  \"dashv;\":0x22a3, \"dbkarow;\":0x290f,\n  \"dblac;\":0x2dd, \"dcaron;\":0x10f,\n  \"dcy;\":0x434, \"dd;\":0x2146,\n  \"ddagger;\":0x2021, \"ddarr;\":0x21ca,\n  \"ddotseq;\":0x2a77, \"deg\":0xb0,\n  \"deg;\":0xb0, \"delta;\":0x3b4,\n  \"demptyv;\":0x29b1, \"dfisht;\":0x297f,\n  \"dfr;\":[0xd835,0xdd21], \"dharl;\":0x21c3,\n  \"dharr;\":0x21c2, \"diam;\":0x22c4,\n  \"diamond;\":0x22c4, \"diamondsuit;\":0x2666,\n  \"diams;\":0x2666, \"die;\":0xa8,\n  \"digamma;\":0x3dd, \"disin;\":0x22f2,\n  \"div;\":0xf7, \"divide\":0xf7,\n  \"divide;\":0xf7, \"divideontimes;\":0x22c7,\n  \"divonx;\":0x22c7, \"djcy;\":0x452,\n  \"dlcorn;\":0x231e, \"dlcrop;\":0x230d,\n  \"dollar;\":0x24, \"dopf;\":[0xd835,0xdd55],\n  \"dot;\":0x2d9, \"doteq;\":0x2250,\n  \"doteqdot;\":0x2251, \"dotminus;\":0x2238,\n  \"dotplus;\":0x2214, \"dotsquare;\":0x22a1,\n  \"doublebarwedge;\":0x2306, \"downarrow;\":0x2193,\n  \"downdownarrows;\":0x21ca, \"downharpoonleft;\":0x21c3,\n  \"downharpoonright;\":0x21c2, \"drbkarow;\":0x2910,\n  \"drcorn;\":0x231f, \"drcrop;\":0x230c,\n  \"dscr;\":[0xd835,0xdcb9], \"dscy;\":0x455,\n  \"dsol;\":0x29f6, \"dstrok;\":0x111,\n  \"dtdot;\":0x22f1, \"dtri;\":0x25bf,\n  \"dtrif;\":0x25be, \"duarr;\":0x21f5,\n  \"duhar;\":0x296f, \"dwangle;\":0x29a6,\n  \"dzcy;\":0x45f, \"dzigrarr;\":0x27ff,\n  \"eDDot;\":0x2a77, \"eDot;\":0x2251,\n  \"eacute\":0xe9, \"eacute;\":0xe9,\n  \"easter;\":0x2a6e, \"ecaron;\":0x11b,\n  \"ecir;\":0x2256, \"ecirc\":0xea,\n  \"ecirc;\":0xea, \"ecolon;\":0x2255,\n  \"ecy;\":0x44d, \"edot;\":0x117,\n  \"ee;\":0x2147, \"efDot;\":0x2252,\n  \"efr;\":[0xd835,0xdd22], \"eg;\":0x2a9a,\n  \"egrave\":0xe8, \"egrave;\":0xe8,\n  \"egs;\":0x2a96, \"egsdot;\":0x2a98,\n  \"el;\":0x2a99, \"elinters;\":0x23e7,\n  \"ell;\":0x2113, \"els;\":0x2a95,\n  \"elsdot;\":0x2a97, \"emacr;\":0x113,\n  \"empty;\":0x2205, \"emptyset;\":0x2205,\n  \"emptyv;\":0x2205, \"emsp13;\":0x2004,\n  \"emsp14;\":0x2005, \"emsp;\":0x2003,\n  \"eng;\":0x14b, \"ensp;\":0x2002,\n  \"eogon;\":0x119, \"eopf;\":[0xd835,0xdd56],\n  \"epar;\":0x22d5, \"eparsl;\":0x29e3,\n  \"eplus;\":0x2a71, \"epsi;\":0x3b5,\n  \"epsilon;\":0x3b5, \"epsiv;\":0x3f5,\n  \"eqcirc;\":0x2256, \"eqcolon;\":0x2255,\n  \"eqsim;\":0x2242, \"eqslantgtr;\":0x2a96,\n  \"eqslantless;\":0x2a95, \"equals;\":0x3d,\n  \"equest;\":0x225f, \"equiv;\":0x2261,\n  \"equivDD;\":0x2a78, \"eqvparsl;\":0x29e5,\n  \"erDot;\":0x2253, \"erarr;\":0x2971,\n  \"escr;\":0x212f, \"esdot;\":0x2250,\n  \"esim;\":0x2242, \"eta;\":0x3b7,\n  \"eth\":0xf0, \"eth;\":0xf0,\n  \"euml\":0xeb, \"euml;\":0xeb,\n  \"euro;\":0x20ac, \"excl;\":0x21,\n  \"exist;\":0x2203, \"expectation;\":0x2130,\n  \"exponentiale;\":0x2147, \"fallingdotseq;\":0x2252,\n  \"fcy;\":0x444, \"female;\":0x2640,\n  \"ffilig;\":0xfb03, \"fflig;\":0xfb00,\n  \"ffllig;\":0xfb04, \"ffr;\":[0xd835,0xdd23],\n  \"filig;\":0xfb01, \"fjlig;\":[0x66,0x6a],\n  \"flat;\":0x266d, \"fllig;\":0xfb02,\n  \"fltns;\":0x25b1, \"fnof;\":0x192,\n  \"fopf;\":[0xd835,0xdd57], \"forall;\":0x2200,\n  \"fork;\":0x22d4, \"forkv;\":0x2ad9,\n  \"fpartint;\":0x2a0d, \"frac12\":0xbd,\n  \"frac12;\":0xbd, \"frac13;\":0x2153,\n  \"frac14\":0xbc, \"frac14;\":0xbc,\n  \"frac15;\":0x2155, \"frac16;\":0x2159,\n  \"frac18;\":0x215b, \"frac23;\":0x2154,\n  \"frac25;\":0x2156, \"frac34\":0xbe,\n  \"frac34;\":0xbe, \"frac35;\":0x2157,\n  \"frac38;\":0x215c, \"frac45;\":0x2158,\n  \"frac56;\":0x215a, \"frac58;\":0x215d,\n  \"frac78;\":0x215e, \"frasl;\":0x2044,\n  \"frown;\":0x2322, \"fscr;\":[0xd835,0xdcbb],\n  \"gE;\":0x2267, \"gEl;\":0x2a8c,\n  \"gacute;\":0x1f5, \"gamma;\":0x3b3,\n  \"gammad;\":0x3dd, \"gap;\":0x2a86,\n  \"gbreve;\":0x11f, \"gcirc;\":0x11d,\n  \"gcy;\":0x433, \"gdot;\":0x121,\n  \"ge;\":0x2265, \"gel;\":0x22db,\n  \"geq;\":0x2265, \"geqq;\":0x2267,\n  \"geqslant;\":0x2a7e, \"ges;\":0x2a7e,\n  \"gescc;\":0x2aa9, \"gesdot;\":0x2a80,\n  \"gesdoto;\":0x2a82, \"gesdotol;\":0x2a84,\n  \"gesl;\":[0x22db,0xfe00], \"gesles;\":0x2a94,\n  \"gfr;\":[0xd835,0xdd24], \"gg;\":0x226b,\n  \"ggg;\":0x22d9, \"gimel;\":0x2137,\n  \"gjcy;\":0x453, \"gl;\":0x2277,\n  \"glE;\":0x2a92, \"gla;\":0x2aa5,\n  \"glj;\":0x2aa4, \"gnE;\":0x2269,\n  \"gnap;\":0x2a8a, \"gnapprox;\":0x2a8a,\n  \"gne;\":0x2a88, \"gneq;\":0x2a88,\n  \"gneqq;\":0x2269, \"gnsim;\":0x22e7,\n  \"gopf;\":[0xd835,0xdd58], \"grave;\":0x60,\n  \"gscr;\":0x210a, \"gsim;\":0x2273,\n  \"gsime;\":0x2a8e, \"gsiml;\":0x2a90,\n  \"gt\":0x3e, \"gt;\":0x3e,\n  \"gtcc;\":0x2aa7, \"gtcir;\":0x2a7a,\n  \"gtdot;\":0x22d7, \"gtlPar;\":0x2995,\n  \"gtquest;\":0x2a7c, \"gtrapprox;\":0x2a86,\n  \"gtrarr;\":0x2978, \"gtrdot;\":0x22d7,\n  \"gtreqless;\":0x22db, \"gtreqqless;\":0x2a8c,\n  \"gtrless;\":0x2277, \"gtrsim;\":0x2273,\n  \"gvertneqq;\":[0x2269,0xfe00], \"gvnE;\":[0x2269,0xfe00],\n  \"hArr;\":0x21d4, \"hairsp;\":0x200a,\n  \"half;\":0xbd, \"hamilt;\":0x210b,\n  \"hardcy;\":0x44a, \"harr;\":0x2194,\n  \"harrcir;\":0x2948, \"harrw;\":0x21ad,\n  \"hbar;\":0x210f, \"hcirc;\":0x125,\n  \"hearts;\":0x2665, \"heartsuit;\":0x2665,\n  \"hellip;\":0x2026, \"hercon;\":0x22b9,\n  \"hfr;\":[0xd835,0xdd25], \"hksearow;\":0x2925,\n  \"hkswarow;\":0x2926, \"hoarr;\":0x21ff,\n  \"homtht;\":0x223b, \"hookleftarrow;\":0x21a9,\n  \"hookrightarrow;\":0x21aa, \"hopf;\":[0xd835,0xdd59],\n  \"horbar;\":0x2015, \"hscr;\":[0xd835,0xdcbd],\n  \"hslash;\":0x210f, \"hstrok;\":0x127,\n  \"hybull;\":0x2043, \"hyphen;\":0x2010,\n  \"iacute\":0xed, \"iacute;\":0xed,\n  \"ic;\":0x2063, \"icirc\":0xee,\n  \"icirc;\":0xee, \"icy;\":0x438,\n  \"iecy;\":0x435, \"iexcl\":0xa1,\n  \"iexcl;\":0xa1, \"iff;\":0x21d4,\n  \"ifr;\":[0xd835,0xdd26], \"igrave\":0xec,\n  \"igrave;\":0xec, \"ii;\":0x2148,\n  \"iiiint;\":0x2a0c, \"iiint;\":0x222d,\n  \"iinfin;\":0x29dc, \"iiota;\":0x2129,\n  \"ijlig;\":0x133, \"imacr;\":0x12b,\n  \"image;\":0x2111, \"imagline;\":0x2110,\n  \"imagpart;\":0x2111, \"imath;\":0x131,\n  \"imof;\":0x22b7, \"imped;\":0x1b5,\n  \"in;\":0x2208, \"incare;\":0x2105,\n  \"infin;\":0x221e, \"infintie;\":0x29dd,\n  \"inodot;\":0x131, \"int;\":0x222b,\n  \"intcal;\":0x22ba, \"integers;\":0x2124,\n  \"intercal;\":0x22ba, \"intlarhk;\":0x2a17,\n  \"intprod;\":0x2a3c, \"iocy;\":0x451,\n  \"iogon;\":0x12f, \"iopf;\":[0xd835,0xdd5a],\n  \"iota;\":0x3b9, \"iprod;\":0x2a3c,\n  \"iquest\":0xbf, \"iquest;\":0xbf,\n  \"iscr;\":[0xd835,0xdcbe], \"isin;\":0x2208,\n  \"isinE;\":0x22f9, \"isindot;\":0x22f5,\n  \"isins;\":0x22f4, \"isinsv;\":0x22f3,\n  \"isinv;\":0x2208, \"it;\":0x2062,\n  \"itilde;\":0x129, \"iukcy;\":0x456,\n  \"iuml\":0xef, \"iuml;\":0xef,\n  \"jcirc;\":0x135, \"jcy;\":0x439,\n  \"jfr;\":[0xd835,0xdd27], \"jmath;\":0x237,\n  \"jopf;\":[0xd835,0xdd5b], \"jscr;\":[0xd835,0xdcbf],\n  \"jsercy;\":0x458, \"jukcy;\":0x454,\n  \"kappa;\":0x3ba, \"kappav;\":0x3f0,\n  \"kcedil;\":0x137, \"kcy;\":0x43a,\n  \"kfr;\":[0xd835,0xdd28], \"kgreen;\":0x138,\n  \"khcy;\":0x445, \"kjcy;\":0x45c,\n  \"kopf;\":[0xd835,0xdd5c], \"kscr;\":[0xd835,0xdcc0],\n  \"lAarr;\":0x21da, \"lArr;\":0x21d0,\n  \"lAtail;\":0x291b, \"lBarr;\":0x290e,\n  \"lE;\":0x2266, \"lEg;\":0x2a8b,\n  \"lHar;\":0x2962, \"lacute;\":0x13a,\n  \"laemptyv;\":0x29b4, \"lagran;\":0x2112,\n  \"lambda;\":0x3bb, \"lang;\":0x27e8,\n  \"langd;\":0x2991, \"langle;\":0x27e8,\n  \"lap;\":0x2a85, \"laquo\":0xab,\n  \"laquo;\":0xab, \"larr;\":0x2190,\n  \"larrb;\":0x21e4, \"larrbfs;\":0x291f,\n  \"larrfs;\":0x291d, \"larrhk;\":0x21a9,\n  \"larrlp;\":0x21ab, \"larrpl;\":0x2939,\n  \"larrsim;\":0x2973, \"larrtl;\":0x21a2,\n  \"lat;\":0x2aab, \"latail;\":0x2919,\n  \"late;\":0x2aad, \"lates;\":[0x2aad,0xfe00],\n  \"lbarr;\":0x290c, \"lbbrk;\":0x2772,\n  \"lbrace;\":0x7b, \"lbrack;\":0x5b,\n  \"lbrke;\":0x298b, \"lbrksld;\":0x298f,\n  \"lbrkslu;\":0x298d, \"lcaron;\":0x13e,\n  \"lcedil;\":0x13c, \"lceil;\":0x2308,\n  \"lcub;\":0x7b, \"lcy;\":0x43b,\n  \"ldca;\":0x2936, \"ldquo;\":0x201c,\n  \"ldquor;\":0x201e, \"ldrdhar;\":0x2967,\n  \"ldrushar;\":0x294b, \"ldsh;\":0x21b2,\n  \"le;\":0x2264, \"leftarrow;\":0x2190,\n  \"leftarrowtail;\":0x21a2, \"leftharpoondown;\":0x21bd,\n  \"leftharpoonup;\":0x21bc, \"leftleftarrows;\":0x21c7,\n  \"leftrightarrow;\":0x2194, \"leftrightarrows;\":0x21c6,\n  \"leftrightharpoons;\":0x21cb, \"leftrightsquigarrow;\":0x21ad,\n  \"leftthreetimes;\":0x22cb, \"leg;\":0x22da,\n  \"leq;\":0x2264, \"leqq;\":0x2266,\n  \"leqslant;\":0x2a7d, \"les;\":0x2a7d,\n  \"lescc;\":0x2aa8, \"lesdot;\":0x2a7f,\n  \"lesdoto;\":0x2a81, \"lesdotor;\":0x2a83,\n  \"lesg;\":[0x22da,0xfe00], \"lesges;\":0x2a93,\n  \"lessapprox;\":0x2a85, \"lessdot;\":0x22d6,\n  \"lesseqgtr;\":0x22da, \"lesseqqgtr;\":0x2a8b,\n  \"lessgtr;\":0x2276, \"lesssim;\":0x2272,\n  \"lfisht;\":0x297c, \"lfloor;\":0x230a,\n  \"lfr;\":[0xd835,0xdd29], \"lg;\":0x2276,\n  \"lgE;\":0x2a91, \"lhard;\":0x21bd,\n  \"lharu;\":0x21bc, \"lharul;\":0x296a,\n  \"lhblk;\":0x2584, \"ljcy;\":0x459,\n  \"ll;\":0x226a, \"llarr;\":0x21c7,\n  \"llcorner;\":0x231e, \"llhard;\":0x296b,\n  \"lltri;\":0x25fa, \"lmidot;\":0x140,\n  \"lmoust;\":0x23b0, \"lmoustache;\":0x23b0,\n  \"lnE;\":0x2268, \"lnap;\":0x2a89,\n  \"lnapprox;\":0x2a89, \"lne;\":0x2a87,\n  \"lneq;\":0x2a87, \"lneqq;\":0x2268,\n  \"lnsim;\":0x22e6, \"loang;\":0x27ec,\n  \"loarr;\":0x21fd, \"lobrk;\":0x27e6,\n  \"longleftarrow;\":0x27f5, \"longleftrightarrow;\":0x27f7,\n  \"longmapsto;\":0x27fc, \"longrightarrow;\":0x27f6,\n  \"looparrowleft;\":0x21ab, \"looparrowright;\":0x21ac,\n  \"lopar;\":0x2985, \"lopf;\":[0xd835,0xdd5d],\n  \"loplus;\":0x2a2d, \"lotimes;\":0x2a34,\n  \"lowast;\":0x2217, \"lowbar;\":0x5f,\n  \"loz;\":0x25ca, \"lozenge;\":0x25ca,\n  \"lozf;\":0x29eb, \"lpar;\":0x28,\n  \"lparlt;\":0x2993, \"lrarr;\":0x21c6,\n  \"lrcorner;\":0x231f, \"lrhar;\":0x21cb,\n  \"lrhard;\":0x296d, \"lrm;\":0x200e,\n  \"lrtri;\":0x22bf, \"lsaquo;\":0x2039,\n  \"lscr;\":[0xd835,0xdcc1], \"lsh;\":0x21b0,\n  \"lsim;\":0x2272, \"lsime;\":0x2a8d,\n  \"lsimg;\":0x2a8f, \"lsqb;\":0x5b,\n  \"lsquo;\":0x2018, \"lsquor;\":0x201a,\n  \"lstrok;\":0x142, \"lt\":0x3c,\n  \"lt;\":0x3c, \"ltcc;\":0x2aa6,\n  \"ltcir;\":0x2a79, \"ltdot;\":0x22d6,\n  \"lthree;\":0x22cb, \"ltimes;\":0x22c9,\n  \"ltlarr;\":0x2976, \"ltquest;\":0x2a7b,\n  \"ltrPar;\":0x2996, \"ltri;\":0x25c3,\n  \"ltrie;\":0x22b4, \"ltrif;\":0x25c2,\n  \"lurdshar;\":0x294a, \"luruhar;\":0x2966,\n  \"lvertneqq;\":[0x2268,0xfe00], \"lvnE;\":[0x2268,0xfe00],\n  \"mDDot;\":0x223a, \"macr\":0xaf,\n  \"macr;\":0xaf, \"male;\":0x2642,\n  \"malt;\":0x2720, \"maltese;\":0x2720,\n  \"map;\":0x21a6, \"mapsto;\":0x21a6,\n  \"mapstodown;\":0x21a7, \"mapstoleft;\":0x21a4,\n  \"mapstoup;\":0x21a5, \"marker;\":0x25ae,\n  \"mcomma;\":0x2a29, \"mcy;\":0x43c,\n  \"mdash;\":0x2014, \"measuredangle;\":0x2221,\n  \"mfr;\":[0xd835,0xdd2a], \"mho;\":0x2127,\n  \"micro\":0xb5, \"micro;\":0xb5,\n  \"mid;\":0x2223, \"midast;\":0x2a,\n  \"midcir;\":0x2af0, \"middot\":0xb7,\n  \"middot;\":0xb7, \"minus;\":0x2212,\n  \"minusb;\":0x229f, \"minusd;\":0x2238,\n  \"minusdu;\":0x2a2a, \"mlcp;\":0x2adb,\n  \"mldr;\":0x2026, \"mnplus;\":0x2213,\n  \"models;\":0x22a7, \"mopf;\":[0xd835,0xdd5e],\n  \"mp;\":0x2213, \"mscr;\":[0xd835,0xdcc2],\n  \"mstpos;\":0x223e, \"mu;\":0x3bc,\n  \"multimap;\":0x22b8, \"mumap;\":0x22b8,\n  \"nGg;\":[0x22d9,0x338], \"nGt;\":[0x226b,0x20d2],\n  \"nGtv;\":[0x226b,0x338], \"nLeftarrow;\":0x21cd,\n  \"nLeftrightarrow;\":0x21ce, \"nLl;\":[0x22d8,0x338],\n  \"nLt;\":[0x226a,0x20d2], \"nLtv;\":[0x226a,0x338],\n  \"nRightarrow;\":0x21cf, \"nVDash;\":0x22af,\n  \"nVdash;\":0x22ae, \"nabla;\":0x2207,\n  \"nacute;\":0x144, \"nang;\":[0x2220,0x20d2],\n  \"nap;\":0x2249, \"napE;\":[0x2a70,0x338],\n  \"napid;\":[0x224b,0x338], \"napos;\":0x149,\n  \"napprox;\":0x2249, \"natur;\":0x266e,\n  \"natural;\":0x266e, \"naturals;\":0x2115,\n  \"nbsp\":0xa0, \"nbsp;\":0xa0,\n  \"nbump;\":[0x224e,0x338], \"nbumpe;\":[0x224f,0x338],\n  \"ncap;\":0x2a43, \"ncaron;\":0x148,\n  \"ncedil;\":0x146, \"ncong;\":0x2247,\n  \"ncongdot;\":[0x2a6d,0x338], \"ncup;\":0x2a42,\n  \"ncy;\":0x43d, \"ndash;\":0x2013,\n  \"ne;\":0x2260, \"neArr;\":0x21d7,\n  \"nearhk;\":0x2924, \"nearr;\":0x2197,\n  \"nearrow;\":0x2197, \"nedot;\":[0x2250,0x338],\n  \"nequiv;\":0x2262, \"nesear;\":0x2928,\n  \"nesim;\":[0x2242,0x338], \"nexist;\":0x2204,\n  \"nexists;\":0x2204, \"nfr;\":[0xd835,0xdd2b],\n  \"ngE;\":[0x2267,0x338], \"nge;\":0x2271,\n  \"ngeq;\":0x2271, \"ngeqq;\":[0x2267,0x338],\n  \"ngeqslant;\":[0x2a7e,0x338], \"nges;\":[0x2a7e,0x338],\n  \"ngsim;\":0x2275, \"ngt;\":0x226f,\n  \"ngtr;\":0x226f, \"nhArr;\":0x21ce,\n  \"nharr;\":0x21ae, \"nhpar;\":0x2af2,\n  \"ni;\":0x220b, \"nis;\":0x22fc,\n  \"nisd;\":0x22fa, \"niv;\":0x220b,\n  \"njcy;\":0x45a, \"nlArr;\":0x21cd,\n  \"nlE;\":[0x2266,0x338], \"nlarr;\":0x219a,\n  \"nldr;\":0x2025, \"nle;\":0x2270,\n  \"nleftarrow;\":0x219a, \"nleftrightarrow;\":0x21ae,\n  \"nleq;\":0x2270, \"nleqq;\":[0x2266,0x338],\n  \"nleqslant;\":[0x2a7d,0x338], \"nles;\":[0x2a7d,0x338],\n  \"nless;\":0x226e, \"nlsim;\":0x2274,\n  \"nlt;\":0x226e, \"nltri;\":0x22ea,\n  \"nltrie;\":0x22ec, \"nmid;\":0x2224,\n  \"nopf;\":[0xd835,0xdd5f], \"not\":0xac,\n  \"not;\":0xac, \"notin;\":0x2209,\n  \"notinE;\":[0x22f9,0x338], \"notindot;\":[0x22f5,0x338],\n  \"notinva;\":0x2209, \"notinvb;\":0x22f7,\n  \"notinvc;\":0x22f6, \"notni;\":0x220c,\n  \"notniva;\":0x220c, \"notnivb;\":0x22fe,\n  \"notnivc;\":0x22fd, \"npar;\":0x2226,\n  \"nparallel;\":0x2226, \"nparsl;\":[0x2afd,0x20e5],\n  \"npart;\":[0x2202,0x338], \"npolint;\":0x2a14,\n  \"npr;\":0x2280, \"nprcue;\":0x22e0,\n  \"npre;\":[0x2aaf,0x338], \"nprec;\":0x2280,\n  \"npreceq;\":[0x2aaf,0x338], \"nrArr;\":0x21cf,\n  \"nrarr;\":0x219b, \"nrarrc;\":[0x2933,0x338],\n  \"nrarrw;\":[0x219d,0x338], \"nrightarrow;\":0x219b,\n  \"nrtri;\":0x22eb, \"nrtrie;\":0x22ed,\n  \"nsc;\":0x2281, \"nsccue;\":0x22e1,\n  \"nsce;\":[0x2ab0,0x338], \"nscr;\":[0xd835,0xdcc3],\n  \"nshortmid;\":0x2224, \"nshortparallel;\":0x2226,\n  \"nsim;\":0x2241, \"nsime;\":0x2244,\n  \"nsimeq;\":0x2244, \"nsmid;\":0x2224,\n  \"nspar;\":0x2226, \"nsqsube;\":0x22e2,\n  \"nsqsupe;\":0x22e3, \"nsub;\":0x2284,\n  \"nsubE;\":[0x2ac5,0x338], \"nsube;\":0x2288,\n  \"nsubset;\":[0x2282,0x20d2], \"nsubseteq;\":0x2288,\n  \"nsubseteqq;\":[0x2ac5,0x338], \"nsucc;\":0x2281,\n  \"nsucceq;\":[0x2ab0,0x338], \"nsup;\":0x2285,\n  \"nsupE;\":[0x2ac6,0x338], \"nsupe;\":0x2289,\n  \"nsupset;\":[0x2283,0x20d2], \"nsupseteq;\":0x2289,\n  \"nsupseteqq;\":[0x2ac6,0x338], \"ntgl;\":0x2279,\n  \"ntilde\":0xf1, \"ntilde;\":0xf1,\n  \"ntlg;\":0x2278, \"ntriangleleft;\":0x22ea,\n  \"ntrianglelefteq;\":0x22ec, \"ntriangleright;\":0x22eb,\n  \"ntrianglerighteq;\":0x22ed, \"nu;\":0x3bd,\n  \"num;\":0x23, \"numero;\":0x2116,\n  \"numsp;\":0x2007, \"nvDash;\":0x22ad,\n  \"nvHarr;\":0x2904, \"nvap;\":[0x224d,0x20d2],\n  \"nvdash;\":0x22ac, \"nvge;\":[0x2265,0x20d2],\n  \"nvgt;\":[0x3e,0x20d2], \"nvinfin;\":0x29de,\n  \"nvlArr;\":0x2902, \"nvle;\":[0x2264,0x20d2],\n  \"nvlt;\":[0x3c,0x20d2], \"nvltrie;\":[0x22b4,0x20d2],\n  \"nvrArr;\":0x2903, \"nvrtrie;\":[0x22b5,0x20d2],\n  \"nvsim;\":[0x223c,0x20d2], \"nwArr;\":0x21d6,\n  \"nwarhk;\":0x2923, \"nwarr;\":0x2196,\n  \"nwarrow;\":0x2196, \"nwnear;\":0x2927,\n  \"oS;\":0x24c8, \"oacute\":0xf3,\n  \"oacute;\":0xf3, \"oast;\":0x229b,\n  \"ocir;\":0x229a, \"ocirc\":0xf4,\n  \"ocirc;\":0xf4, \"ocy;\":0x43e,\n  \"odash;\":0x229d, \"odblac;\":0x151,\n  \"odiv;\":0x2a38, \"odot;\":0x2299,\n  \"odsold;\":0x29bc, \"oelig;\":0x153,\n  \"ofcir;\":0x29bf, \"ofr;\":[0xd835,0xdd2c],\n  \"ogon;\":0x2db, \"ograve\":0xf2,\n  \"ograve;\":0xf2, \"ogt;\":0x29c1,\n  \"ohbar;\":0x29b5, \"ohm;\":0x3a9,\n  \"oint;\":0x222e, \"olarr;\":0x21ba,\n  \"olcir;\":0x29be, \"olcross;\":0x29bb,\n  \"oline;\":0x203e, \"olt;\":0x29c0,\n  \"omacr;\":0x14d, \"omega;\":0x3c9,\n  \"omicron;\":0x3bf, \"omid;\":0x29b6,\n  \"ominus;\":0x2296, \"oopf;\":[0xd835,0xdd60],\n  \"opar;\":0x29b7, \"operp;\":0x29b9,\n  \"oplus;\":0x2295, \"or;\":0x2228,\n  \"orarr;\":0x21bb, \"ord;\":0x2a5d,\n  \"order;\":0x2134, \"orderof;\":0x2134,\n  \"ordf\":0xaa, \"ordf;\":0xaa,\n  \"ordm\":0xba, \"ordm;\":0xba,\n  \"origof;\":0x22b6, \"oror;\":0x2a56,\n  \"orslope;\":0x2a57, \"orv;\":0x2a5b,\n  \"oscr;\":0x2134, \"oslash\":0xf8,\n  \"oslash;\":0xf8, \"osol;\":0x2298,\n  \"otilde\":0xf5, \"otilde;\":0xf5,\n  \"otimes;\":0x2297, \"otimesas;\":0x2a36,\n  \"ouml\":0xf6, \"ouml;\":0xf6,\n  \"ovbar;\":0x233d, \"par;\":0x2225,\n  \"para\":0xb6, \"para;\":0xb6,\n  \"parallel;\":0x2225, \"parsim;\":0x2af3,\n  \"parsl;\":0x2afd, \"part;\":0x2202,\n  \"pcy;\":0x43f, \"percnt;\":0x25,\n  \"period;\":0x2e, \"permil;\":0x2030,\n  \"perp;\":0x22a5, \"pertenk;\":0x2031,\n  \"pfr;\":[0xd835,0xdd2d], \"phi;\":0x3c6,\n  \"phiv;\":0x3d5, \"phmmat;\":0x2133,\n  \"phone;\":0x260e, \"pi;\":0x3c0,\n  \"pitchfork;\":0x22d4, \"piv;\":0x3d6,\n  \"planck;\":0x210f, \"planckh;\":0x210e,\n  \"plankv;\":0x210f, \"plus;\":0x2b,\n  \"plusacir;\":0x2a23, \"plusb;\":0x229e,\n  \"pluscir;\":0x2a22, \"plusdo;\":0x2214,\n  \"plusdu;\":0x2a25, \"pluse;\":0x2a72,\n  \"plusmn\":0xb1, \"plusmn;\":0xb1,\n  \"plussim;\":0x2a26, \"plustwo;\":0x2a27,\n  \"pm;\":0xb1, \"pointint;\":0x2a15,\n  \"popf;\":[0xd835,0xdd61], \"pound\":0xa3,\n  \"pound;\":0xa3, \"pr;\":0x227a,\n  \"prE;\":0x2ab3, \"prap;\":0x2ab7,\n  \"prcue;\":0x227c, \"pre;\":0x2aaf,\n  \"prec;\":0x227a, \"precapprox;\":0x2ab7,\n  \"preccurlyeq;\":0x227c, \"preceq;\":0x2aaf,\n  \"precnapprox;\":0x2ab9, \"precneqq;\":0x2ab5,\n  \"precnsim;\":0x22e8, \"precsim;\":0x227e,\n  \"prime;\":0x2032, \"primes;\":0x2119,\n  \"prnE;\":0x2ab5, \"prnap;\":0x2ab9,\n  \"prnsim;\":0x22e8, \"prod;\":0x220f,\n  \"profalar;\":0x232e, \"profline;\":0x2312,\n  \"profsurf;\":0x2313, \"prop;\":0x221d,\n  \"propto;\":0x221d, \"prsim;\":0x227e,\n  \"prurel;\":0x22b0, \"pscr;\":[0xd835,0xdcc5],\n  \"psi;\":0x3c8, \"puncsp;\":0x2008,\n  \"qfr;\":[0xd835,0xdd2e], \"qint;\":0x2a0c,\n  \"qopf;\":[0xd835,0xdd62], \"qprime;\":0x2057,\n  \"qscr;\":[0xd835,0xdcc6], \"quaternions;\":0x210d,\n  \"quatint;\":0x2a16, \"quest;\":0x3f,\n  \"questeq;\":0x225f, \"quot\":0x22,\n  \"quot;\":0x22, \"rAarr;\":0x21db,\n  \"rArr;\":0x21d2, \"rAtail;\":0x291c,\n  \"rBarr;\":0x290f, \"rHar;\":0x2964,\n  \"race;\":[0x223d,0x331], \"racute;\":0x155,\n  \"radic;\":0x221a, \"raemptyv;\":0x29b3,\n  \"rang;\":0x27e9, \"rangd;\":0x2992,\n  \"range;\":0x29a5, \"rangle;\":0x27e9,\n  \"raquo\":0xbb, \"raquo;\":0xbb,\n  \"rarr;\":0x2192, \"rarrap;\":0x2975,\n  \"rarrb;\":0x21e5, \"rarrbfs;\":0x2920,\n  \"rarrc;\":0x2933, \"rarrfs;\":0x291e,\n  \"rarrhk;\":0x21aa, \"rarrlp;\":0x21ac,\n  \"rarrpl;\":0x2945, \"rarrsim;\":0x2974,\n  \"rarrtl;\":0x21a3, \"rarrw;\":0x219d,\n  \"ratail;\":0x291a, \"ratio;\":0x2236,\n  \"rationals;\":0x211a, \"rbarr;\":0x290d,\n  \"rbbrk;\":0x2773, \"rbrace;\":0x7d,\n  \"rbrack;\":0x5d, \"rbrke;\":0x298c,\n  \"rbrksld;\":0x298e, \"rbrkslu;\":0x2990,\n  \"rcaron;\":0x159, \"rcedil;\":0x157,\n  \"rceil;\":0x2309, \"rcub;\":0x7d,\n  \"rcy;\":0x440, \"rdca;\":0x2937,\n  \"rdldhar;\":0x2969, \"rdquo;\":0x201d,\n  \"rdquor;\":0x201d, \"rdsh;\":0x21b3,\n  \"real;\":0x211c, \"realine;\":0x211b,\n  \"realpart;\":0x211c, \"reals;\":0x211d,\n  \"rect;\":0x25ad, \"reg\":0xae,\n  \"reg;\":0xae, \"rfisht;\":0x297d,\n  \"rfloor;\":0x230b, \"rfr;\":[0xd835,0xdd2f],\n  \"rhard;\":0x21c1, \"rharu;\":0x21c0,\n  \"rharul;\":0x296c, \"rho;\":0x3c1,\n  \"rhov;\":0x3f1, \"rightarrow;\":0x2192,\n  \"rightarrowtail;\":0x21a3, \"rightharpoondown;\":0x21c1,\n  \"rightharpoonup;\":0x21c0, \"rightleftarrows;\":0x21c4,\n  \"rightleftharpoons;\":0x21cc, \"rightrightarrows;\":0x21c9,\n  \"rightsquigarrow;\":0x219d, \"rightthreetimes;\":0x22cc,\n  \"ring;\":0x2da, \"risingdotseq;\":0x2253,\n  \"rlarr;\":0x21c4, \"rlhar;\":0x21cc,\n  \"rlm;\":0x200f, \"rmoust;\":0x23b1,\n  \"rmoustache;\":0x23b1, \"rnmid;\":0x2aee,\n  \"roang;\":0x27ed, \"roarr;\":0x21fe,\n  \"robrk;\":0x27e7, \"ropar;\":0x2986,\n  \"ropf;\":[0xd835,0xdd63], \"roplus;\":0x2a2e,\n  \"rotimes;\":0x2a35, \"rpar;\":0x29,\n  \"rpargt;\":0x2994, \"rppolint;\":0x2a12,\n  \"rrarr;\":0x21c9, \"rsaquo;\":0x203a,\n  \"rscr;\":[0xd835,0xdcc7], \"rsh;\":0x21b1,\n  \"rsqb;\":0x5d, \"rsquo;\":0x2019,\n  \"rsquor;\":0x2019, \"rthree;\":0x22cc,\n  \"rtimes;\":0x22ca, \"rtri;\":0x25b9,\n  \"rtrie;\":0x22b5, \"rtrif;\":0x25b8,\n  \"rtriltri;\":0x29ce, \"ruluhar;\":0x2968,\n  \"rx;\":0x211e, \"sacute;\":0x15b,\n  \"sbquo;\":0x201a, \"sc;\":0x227b,\n  \"scE;\":0x2ab4, \"scap;\":0x2ab8,\n  \"scaron;\":0x161, \"sccue;\":0x227d,\n  \"sce;\":0x2ab0, \"scedil;\":0x15f,\n  \"scirc;\":0x15d, \"scnE;\":0x2ab6,\n  \"scnap;\":0x2aba, \"scnsim;\":0x22e9,\n  \"scpolint;\":0x2a13, \"scsim;\":0x227f,\n  \"scy;\":0x441, \"sdot;\":0x22c5,\n  \"sdotb;\":0x22a1, \"sdote;\":0x2a66,\n  \"seArr;\":0x21d8, \"searhk;\":0x2925,\n  \"searr;\":0x2198, \"searrow;\":0x2198,\n  \"sect\":0xa7, \"sect;\":0xa7,\n  \"semi;\":0x3b, \"seswar;\":0x2929,\n  \"setminus;\":0x2216, \"setmn;\":0x2216,\n  \"sext;\":0x2736, \"sfr;\":[0xd835,0xdd30],\n  \"sfrown;\":0x2322, \"sharp;\":0x266f,\n  \"shchcy;\":0x449, \"shcy;\":0x448,\n  \"shortmid;\":0x2223, \"shortparallel;\":0x2225,\n  \"shy\":0xad, \"shy;\":0xad,\n  \"sigma;\":0x3c3, \"sigmaf;\":0x3c2,\n  \"sigmav;\":0x3c2, \"sim;\":0x223c,\n  \"simdot;\":0x2a6a, \"sime;\":0x2243,\n  \"simeq;\":0x2243, \"simg;\":0x2a9e,\n  \"simgE;\":0x2aa0, \"siml;\":0x2a9d,\n  \"simlE;\":0x2a9f, \"simne;\":0x2246,\n  \"simplus;\":0x2a24, \"simrarr;\":0x2972,\n  \"slarr;\":0x2190, \"smallsetminus;\":0x2216,\n  \"smashp;\":0x2a33, \"smeparsl;\":0x29e4,\n  \"smid;\":0x2223, \"smile;\":0x2323,\n  \"smt;\":0x2aaa, \"smte;\":0x2aac,\n  \"smtes;\":[0x2aac,0xfe00], \"softcy;\":0x44c,\n  \"sol;\":0x2f, \"solb;\":0x29c4,\n  \"solbar;\":0x233f, \"sopf;\":[0xd835,0xdd64],\n  \"spades;\":0x2660, \"spadesuit;\":0x2660,\n  \"spar;\":0x2225, \"sqcap;\":0x2293,\n  \"sqcaps;\":[0x2293,0xfe00], \"sqcup;\":0x2294,\n  \"sqcups;\":[0x2294,0xfe00], \"sqsub;\":0x228f,\n  \"sqsube;\":0x2291, \"sqsubset;\":0x228f,\n  \"sqsubseteq;\":0x2291, \"sqsup;\":0x2290,\n  \"sqsupe;\":0x2292, \"sqsupset;\":0x2290,\n  \"sqsupseteq;\":0x2292, \"squ;\":0x25a1,\n  \"square;\":0x25a1, \"squarf;\":0x25aa,\n  \"squf;\":0x25aa, \"srarr;\":0x2192,\n  \"sscr;\":[0xd835,0xdcc8], \"ssetmn;\":0x2216,\n  \"ssmile;\":0x2323, \"sstarf;\":0x22c6,\n  \"star;\":0x2606, \"starf;\":0x2605,\n  \"straightepsilon;\":0x3f5, \"straightphi;\":0x3d5,\n  \"strns;\":0xaf, \"sub;\":0x2282,\n  \"subE;\":0x2ac5, \"subdot;\":0x2abd,\n  \"sube;\":0x2286, \"subedot;\":0x2ac3,\n  \"submult;\":0x2ac1, \"subnE;\":0x2acb,\n  \"subne;\":0x228a, \"subplus;\":0x2abf,\n  \"subrarr;\":0x2979, \"subset;\":0x2282,\n  \"subseteq;\":0x2286, \"subseteqq;\":0x2ac5,\n  \"subsetneq;\":0x228a, \"subsetneqq;\":0x2acb,\n  \"subsim;\":0x2ac7, \"subsub;\":0x2ad5,\n  \"subsup;\":0x2ad3, \"succ;\":0x227b,\n  \"succapprox;\":0x2ab8, \"succcurlyeq;\":0x227d,\n  \"succeq;\":0x2ab0, \"succnapprox;\":0x2aba,\n  \"succneqq;\":0x2ab6, \"succnsim;\":0x22e9,\n  \"succsim;\":0x227f, \"sum;\":0x2211,\n  \"sung;\":0x266a, \"sup1\":0xb9,\n  \"sup1;\":0xb9, \"sup2\":0xb2,\n  \"sup2;\":0xb2, \"sup3\":0xb3,\n  \"sup3;\":0xb3, \"sup;\":0x2283,\n  \"supE;\":0x2ac6, \"supdot;\":0x2abe,\n  \"supdsub;\":0x2ad8, \"supe;\":0x2287,\n  \"supedot;\":0x2ac4, \"suphsol;\":0x27c9,\n  \"suphsub;\":0x2ad7, \"suplarr;\":0x297b,\n  \"supmult;\":0x2ac2, \"supnE;\":0x2acc,\n  \"supne;\":0x228b, \"supplus;\":0x2ac0,\n  \"supset;\":0x2283, \"supseteq;\":0x2287,\n  \"supseteqq;\":0x2ac6, \"supsetneq;\":0x228b,\n  \"supsetneqq;\":0x2acc, \"supsim;\":0x2ac8,\n  \"supsub;\":0x2ad4, \"supsup;\":0x2ad6,\n  \"swArr;\":0x21d9, \"swarhk;\":0x2926,\n  \"swarr;\":0x2199, \"swarrow;\":0x2199,\n  \"swnwar;\":0x292a, \"szlig\":0xdf,\n  \"szlig;\":0xdf, \"target;\":0x2316,\n  \"tau;\":0x3c4, \"tbrk;\":0x23b4,\n  \"tcaron;\":0x165, \"tcedil;\":0x163,\n  \"tcy;\":0x442, \"tdot;\":0x20db,\n  \"telrec;\":0x2315, \"tfr;\":[0xd835,0xdd31],\n  \"there4;\":0x2234, \"therefore;\":0x2234,\n  \"theta;\":0x3b8, \"thetasym;\":0x3d1,\n  \"thetav;\":0x3d1, \"thickapprox;\":0x2248,\n  \"thicksim;\":0x223c, \"thinsp;\":0x2009,\n  \"thkap;\":0x2248, \"thksim;\":0x223c,\n  \"thorn\":0xfe, \"thorn;\":0xfe,\n  \"tilde;\":0x2dc, \"times\":0xd7,\n  \"times;\":0xd7, \"timesb;\":0x22a0,\n  \"timesbar;\":0x2a31, \"timesd;\":0x2a30,\n  \"tint;\":0x222d, \"toea;\":0x2928,\n  \"top;\":0x22a4, \"topbot;\":0x2336,\n  \"topcir;\":0x2af1, \"topf;\":[0xd835,0xdd65],\n  \"topfork;\":0x2ada, \"tosa;\":0x2929,\n  \"tprime;\":0x2034, \"trade;\":0x2122,\n  \"triangle;\":0x25b5, \"triangledown;\":0x25bf,\n  \"triangleleft;\":0x25c3, \"trianglelefteq;\":0x22b4,\n  \"triangleq;\":0x225c, \"triangleright;\":0x25b9,\n  \"trianglerighteq;\":0x22b5, \"tridot;\":0x25ec,\n  \"trie;\":0x225c, \"triminus;\":0x2a3a,\n  \"triplus;\":0x2a39, \"trisb;\":0x29cd,\n  \"tritime;\":0x2a3b, \"trpezium;\":0x23e2,\n  \"tscr;\":[0xd835,0xdcc9], \"tscy;\":0x446,\n  \"tshcy;\":0x45b, \"tstrok;\":0x167,\n  \"twixt;\":0x226c, \"twoheadleftarrow;\":0x219e,\n  \"twoheadrightarrow;\":0x21a0, \"uArr;\":0x21d1,\n  \"uHar;\":0x2963, \"uacute\":0xfa,\n  \"uacute;\":0xfa, \"uarr;\":0x2191,\n  \"ubrcy;\":0x45e, \"ubreve;\":0x16d,\n  \"ucirc\":0xfb, \"ucirc;\":0xfb,\n  \"ucy;\":0x443, \"udarr;\":0x21c5,\n  \"udblac;\":0x171, \"udhar;\":0x296e,\n  \"ufisht;\":0x297e, \"ufr;\":[0xd835,0xdd32],\n  \"ugrave\":0xf9, \"ugrave;\":0xf9,\n  \"uharl;\":0x21bf, \"uharr;\":0x21be,\n  \"uhblk;\":0x2580, \"ulcorn;\":0x231c,\n  \"ulcorner;\":0x231c, \"ulcrop;\":0x230f,\n  \"ultri;\":0x25f8, \"umacr;\":0x16b,\n  \"uml\":0xa8, \"uml;\":0xa8,\n  \"uogon;\":0x173, \"uopf;\":[0xd835,0xdd66],\n  \"uparrow;\":0x2191, \"updownarrow;\":0x2195,\n  \"upharpoonleft;\":0x21bf, \"upharpoonright;\":0x21be,\n  \"uplus;\":0x228e, \"upsi;\":0x3c5,\n  \"upsih;\":0x3d2, \"upsilon;\":0x3c5,\n  \"upuparrows;\":0x21c8, \"urcorn;\":0x231d,\n  \"urcorner;\":0x231d, \"urcrop;\":0x230e,\n  \"uring;\":0x16f, \"urtri;\":0x25f9,\n  \"uscr;\":[0xd835,0xdcca], \"utdot;\":0x22f0,\n  \"utilde;\":0x169, \"utri;\":0x25b5,\n  \"utrif;\":0x25b4, \"uuarr;\":0x21c8,\n  \"uuml\":0xfc, \"uuml;\":0xfc,\n  \"uwangle;\":0x29a7, \"vArr;\":0x21d5,\n  \"vBar;\":0x2ae8, \"vBarv;\":0x2ae9,\n  \"vDash;\":0x22a8, \"vangrt;\":0x299c,\n  \"varepsilon;\":0x3f5, \"varkappa;\":0x3f0,\n  \"varnothing;\":0x2205, \"varphi;\":0x3d5,\n  \"varpi;\":0x3d6, \"varpropto;\":0x221d,\n  \"varr;\":0x2195, \"varrho;\":0x3f1,\n  \"varsigma;\":0x3c2, \"varsubsetneq;\":[0x228a,0xfe00],\n  \"varsubsetneqq;\":[0x2acb,0xfe00], \"varsupsetneq;\":[0x228b,0xfe00],\n  \"varsupsetneqq;\":[0x2acc,0xfe00], \"vartheta;\":0x3d1,\n  \"vartriangleleft;\":0x22b2, \"vartriangleright;\":0x22b3,\n  \"vcy;\":0x432, \"vdash;\":0x22a2,\n  \"vee;\":0x2228, \"veebar;\":0x22bb,\n  \"veeeq;\":0x225a, \"vellip;\":0x22ee,\n  \"verbar;\":0x7c, \"vert;\":0x7c,\n  \"vfr;\":[0xd835,0xdd33], \"vltri;\":0x22b2,\n  \"vnsub;\":[0x2282,0x20d2], \"vnsup;\":[0x2283,0x20d2],\n  \"vopf;\":[0xd835,0xdd67], \"vprop;\":0x221d,\n  \"vrtri;\":0x22b3, \"vscr;\":[0xd835,0xdccb],\n  \"vsubnE;\":[0x2acb,0xfe00], \"vsubne;\":[0x228a,0xfe00],\n  \"vsupnE;\":[0x2acc,0xfe00], \"vsupne;\":[0x228b,0xfe00],\n  \"vzigzag;\":0x299a, \"wcirc;\":0x175,\n  \"wedbar;\":0x2a5f, \"wedge;\":0x2227,\n  \"wedgeq;\":0x2259, \"weierp;\":0x2118,\n  \"wfr;\":[0xd835,0xdd34], \"wopf;\":[0xd835,0xdd68],\n  \"wp;\":0x2118, \"wr;\":0x2240,\n  \"wreath;\":0x2240, \"wscr;\":[0xd835,0xdccc],\n  \"xcap;\":0x22c2, \"xcirc;\":0x25ef,\n  \"xcup;\":0x22c3, \"xdtri;\":0x25bd,\n  \"xfr;\":[0xd835,0xdd35], \"xhArr;\":0x27fa,\n  \"xharr;\":0x27f7, \"xi;\":0x3be,\n  \"xlArr;\":0x27f8, \"xlarr;\":0x27f5,\n  \"xmap;\":0x27fc, \"xnis;\":0x22fb,\n  \"xodot;\":0x2a00, \"xopf;\":[0xd835,0xdd69],\n  \"xoplus;\":0x2a01, \"xotime;\":0x2a02,\n  \"xrArr;\":0x27f9, \"xrarr;\":0x27f6,\n  \"xscr;\":[0xd835,0xdccd], \"xsqcup;\":0x2a06,\n  \"xuplus;\":0x2a04, \"xutri;\":0x25b3,\n  \"xvee;\":0x22c1, \"xwedge;\":0x22c0,\n  \"yacute\":0xfd, \"yacute;\":0xfd,\n  \"yacy;\":0x44f, \"ycirc;\":0x177,\n  \"ycy;\":0x44b, \"yen\":0xa5,\n  \"yen;\":0xa5, \"yfr;\":[0xd835,0xdd36],\n  \"yicy;\":0x457, \"yopf;\":[0xd835,0xdd6a],\n  \"yscr;\":[0xd835,0xdcce], \"yucy;\":0x44e,\n  \"yuml\":0xff, \"yuml;\":0xff,\n  \"zacute;\":0x17a, \"zcaron;\":0x17e,\n  \"zcy;\":0x437, \"zdot;\":0x17c,\n  \"zeetrf;\":0x2128, \"zeta;\":0x3b6,\n  \"zfr;\":[0xd835,0xdd37], \"zhcy;\":0x436,\n  \"zigrarr;\":0x21dd, \"zopf;\":[0xd835,0xdd6b],\n  \"zscr;\":[0xd835,0xdccf], \"zwj;\":0x200d,\n  \"zwnj;\":0x200c,\n};\n/*\n * This regexp is generated with test/tools/update-entities.js\n * It will always match at least one character -- but note that there\n * are no entities whose names are a single character long.\n */\nvar NAMEDCHARREF = /(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\\s\\S]/g;\n\nvar NAMEDCHARREF_MAXLEN = 32;\n\n// Regular expression constants used by the tokenizer and parser\n\n// Note that \\r is included in all of these regexps because it will need\n// to be converted to LF by the scanChars() function.\nvar DBLQUOTEATTRVAL = /[^\\r\"&\\u0000]+/g;\nvar SINGLEQUOTEATTRVAL = /[^\\r'&\\u0000]+/g;\nvar UNQUOTEDATTRVAL = /[^\\r\\t\\n\\f &>\\u0000]+/g;\nvar TAGNAME = /[^\\r\\t\\n\\f \\/>A-Z\\u0000]+/g;\nvar ATTRNAME = /[^\\r\\t\\n\\f \\/=>A-Z\\u0000]+/g;\n\nvar CDATATEXT = /[^\\]\\r\\u0000\\uffff]*/g;\nvar DATATEXT = /[^&<\\r\\u0000\\uffff]*/g;\nvar RAWTEXT = /[^<\\r\\u0000\\uffff]*/g;\nvar PLAINTEXT = /[^\\r\\u0000\\uffff]*/g;\n// Since we don't have the 'sticky tag', add '|.' to the end of SIMPLETAG\n// and SIMPLEATTR so that we are guaranteed to always match.  This prevents\n// us from scanning past the lastIndex set. (Note that the desired matches\n// are always greater than 1 char long, so longest-match will ensure that .\n// is not matched unless the desired match fails.)\nvar SIMPLETAG = /(?:(\\/)?([a-z]+)>)|[\\s\\S]/g;\nvar SIMPLEATTR = /(?:([-a-z]+)[ \\t\\n\\f]*=[ \\t\\n\\f]*('[^'&\\r\\u0000]*'|\"[^\"&\\r\\u0000]*\"|[^\\t\\n\\r\\f \"&'\\u0000>][^&> \\t\\n\\r\\f\\u0000]*[ \\t\\n\\f]))|[\\s\\S]/g;\n\nvar NONWS = /[^\\x09\\x0A\\x0C\\x0D\\x20]/;\nvar ALLNONWS = /[^\\x09\\x0A\\x0C\\x0D\\x20]/g; // like above, with g flag\nvar NONWSNONNUL = /[^\\x00\\x09\\x0A\\x0C\\x0D\\x20]/; // don't allow NUL either\nvar LEADINGWS = /^[\\x09\\x0A\\x0C\\x0D\\x20]+/;\nvar NULCHARS = /\\x00/g;\n\n/***\n * These are utility functions that don't use any of the parser's\n * internal state.\n */\nfunction buf2str(buf) {\n  var CHUNKSIZE=16384;\n  if (buf.length < CHUNKSIZE) {\n    return String.fromCharCode.apply(String, buf);\n  }\n  // special case for large strings, to avoid busting the stack.\n  var result = '';\n  for (var i = 0; i < buf.length; i += CHUNKSIZE) {\n    result += String.fromCharCode.apply(String, buf.slice(i, i+CHUNKSIZE));\n  }\n  return result;\n}\n\nfunction str2buf(s) {\n  var result = [];\n  for (var i=0; i<s.length; i++) {\n    result[i] = s.charCodeAt(i);\n  }\n  return result;\n}\n\n// Determine whether the element is a member of the set.\n// The set is an object that maps namespaces to objects. The objects\n// then map local tagnames to the value true if that tag is part of the set\nfunction isA(elt, set) {\n  if (typeof set === 'string') {\n    // convenience case for testing a particular HTML element\n    return elt.namespaceURI === NAMESPACE.HTML &&\n      elt.localName === set;\n  }\n  var tagnames = set[elt.namespaceURI];\n  return tagnames && tagnames[elt.localName];\n}\n\nfunction isMathmlTextIntegrationPoint(n) {\n  return isA(n, mathmlTextIntegrationPointSet);\n}\n\nfunction isHTMLIntegrationPoint(n) {\n  if (isA(n, htmlIntegrationPointSet)) return true;\n  if (n.namespaceURI === NAMESPACE.MATHML &&\n    n.localName === \"annotation-xml\") {\n    var encoding = n.getAttribute(\"encoding\");\n    if (encoding) encoding = encoding.toLowerCase();\n    if (encoding === \"text/html\" ||\n      encoding === \"application/xhtml+xml\")\n      return true;\n  }\n  return false;\n}\n\nfunction adjustSVGTagName(name) {\n  if (name in svgTagNameAdjustments)\n    return svgTagNameAdjustments[name];\n  else\n    return name;\n}\n\nfunction adjustSVGAttributes(attrs) {\n  for(var i = 0, n = attrs.length; i < n; i++) {\n    if (attrs[i][0] in svgAttrAdjustments) {\n      attrs[i][0] = svgAttrAdjustments[attrs[i][0]];\n    }\n  }\n}\n\nfunction adjustMathMLAttributes(attrs) {\n  for(var i = 0, n = attrs.length; i < n; i++) {\n    if (attrs[i][0] === \"definitionurl\") {\n      attrs[i][0] = \"definitionURL\";\n      break;\n    }\n  }\n}\n\nfunction adjustForeignAttributes(attrs) {\n  for(var i = 0, n = attrs.length; i < n; i++) {\n    if (attrs[i][0] in foreignAttributes) {\n      // Attributes with namespaces get a 3rd element:\n      // [Qname, value, namespace]\n      attrs[i].push(foreignAttributes[attrs[i][0]]);\n    }\n  }\n}\n\n// For each attribute in attrs, if elt doesn't have an attribute\n// by that name, add the attribute to elt\n// XXX: I'm ignoring namespaces for now\nfunction transferAttributes(attrs, elt) {\n  for(var i = 0, n = attrs.length; i < n; i++) {\n    var name = attrs[i][0], value = attrs[i][1];\n    if (elt.hasAttribute(name)) continue;\n    elt._setAttribute(name, value);\n  }\n}\n\n/***\n * The ElementStack class\n */\nHTMLParser.ElementStack = function ElementStack() {\n  this.elements = [];\n  this.top = null; // stack.top is the \"current node\" in the spec\n};\n\n/*\n// This is for debugging only\nHTMLParser.ElementStack.prototype.toString = function(e) {\n  return \"STACK: \" +\n  this.elements.map(function(e) {return e.localName;}).join(\"-\");\n}\n*/\n\nHTMLParser.ElementStack.prototype.push = function(e) {\n  this.elements.push(e);\n  this.top = e;\n};\n\nHTMLParser.ElementStack.prototype.pop = function(e) {\n  this.elements.pop();\n  this.top = this.elements[this.elements.length-1];\n};\n\n// Pop elements off the stack up to and including the first\n// element with the specified (HTML) tagname\nHTMLParser.ElementStack.prototype.popTag = function(tag) {\n  for(var i = this.elements.length-1; i > 0; i--) {\n    var e = this.elements[i];\n    if (isA(e, tag)) break;\n  }\n  this.elements.length = i;\n  this.top = this.elements[i-1];\n};\n\n// Pop elements off the stack up to and including the first\n// element that is an instance of the specified type\nHTMLParser.ElementStack.prototype.popElementType = function(type) {\n  for(var i = this.elements.length-1; i > 0; i--) {\n    if (this.elements[i] instanceof type) break;\n  }\n  this.elements.length = i;\n  this.top = this.elements[i-1];\n};\n\n// Pop elements off the stack up to and including the element e.\n// Note that this is very different from removeElement()\n// This requires that e is on the stack.\nHTMLParser.ElementStack.prototype.popElement = function(e) {\n  for(var i = this.elements.length-1; i > 0; i--) {\n    if (this.elements[i] === e) break;\n  }\n  this.elements.length = i;\n  this.top = this.elements[i-1];\n};\n\n// Remove a specific element from the stack.\n// Do nothing if the element is not on the stack\nHTMLParser.ElementStack.prototype.removeElement = function(e) {\n  if (this.top === e) this.pop();\n  else {\n    var idx = this.elements.lastIndexOf(e);\n    if (idx !== -1)\n      this.elements.splice(idx, 1);\n  }\n};\n\nHTMLParser.ElementStack.prototype.clearToContext = function(set) {\n  // Note that we don't loop to 0. Never pop the <html> elt off.\n  for(var i = this.elements.length-1; i > 0; i--) {\n    if (isA(this.elements[i], set)) break;\n  }\n  this.elements.length = i+1;\n  this.top = this.elements[i];\n};\n\nHTMLParser.ElementStack.prototype.contains = function(tag) {\n  return this.inSpecificScope(tag, Object.create(null));\n};\n\nHTMLParser.ElementStack.prototype.inSpecificScope = function(tag, set) {\n  for(var i = this.elements.length-1; i >= 0; i--) {\n    var elt = this.elements[i];\n    if (isA(elt, tag)) return true;\n    if (isA(elt, set)) return false;\n  }\n  return false;\n};\n\n// Like the above, but for a specific element, not a tagname\nHTMLParser.ElementStack.prototype.elementInSpecificScope = function(target, set) {\n  for(var i = this.elements.length-1; i >= 0; i--) {\n    var elt = this.elements[i];\n    if (elt === target) return true;\n    if (isA(elt, set)) return false;\n  }\n  return false;\n};\n\n// Like the above, but for an element interface, not a tagname\nHTMLParser.ElementStack.prototype.elementTypeInSpecificScope = function(target, set) {\n  for(var i = this.elements.length-1; i >= 0; i--) {\n    var elt = this.elements[i];\n    if (elt instanceof target) return true;\n    if (isA(elt, set)) return false;\n  }\n  return false;\n};\n\nHTMLParser.ElementStack.prototype.inScope = function(tag) {\n  return this.inSpecificScope(tag, inScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.elementInScope = function(e) {\n  return this.elementInSpecificScope(e, inScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.elementTypeInScope = function(type) {\n  return this.elementTypeInSpecificScope(type, inScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.inButtonScope = function(tag) {\n  return this.inSpecificScope(tag, inButtonScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.inListItemScope = function(tag) {\n  return this.inSpecificScope(tag, inListItemScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.inTableScope = function(tag) {\n  return this.inSpecificScope(tag, inTableScopeSet);\n};\n\nHTMLParser.ElementStack.prototype.inSelectScope = function(tag) {\n  // Can't implement this one with inSpecificScope, since it involves\n  // a set defined by inverting another set. So implement manually.\n  for(var i = this.elements.length-1; i >= 0; i--) {\n    var elt = this.elements[i];\n    if (elt.namespaceURI !== NAMESPACE.HTML) return false;\n    var localname = elt.localName;\n    if (localname === tag) return true;\n    if (localname !== \"optgroup\" && localname !== \"option\")\n      return false;\n  }\n  return false;\n};\n\nHTMLParser.ElementStack.prototype.generateImpliedEndTags = function(butnot, thorough) {\n  var endTagSet = thorough ? thoroughImpliedEndTagsSet : impliedEndTagsSet;\n  for(var i = this.elements.length-1; i >= 0; i--) {\n    var e = this.elements[i];\n    if (butnot && isA(e, butnot)) break;\n    if (!isA(this.elements[i], endTagSet)) break;\n  }\n\n  this.elements.length = i+1;\n  this.top = this.elements[i];\n};\n\n/***\n * The ActiveFormattingElements class\n */\nHTMLParser.ActiveFormattingElements = function AFE() {\n  this.list = []; // elements\n  this.attrs = []; // attribute tokens for cloning\n};\n\nHTMLParser.ActiveFormattingElements.prototype.MARKER = { localName: \"|\" };\n\n/*\n// For debugging\nHTMLParser.ActiveFormattingElements.prototype.toString = function() {\n  return \"AFE: \" +\n  this.list.map(function(e) { return e.localName; }).join(\"-\");\n}\n*/\n\nHTMLParser.ActiveFormattingElements.prototype.insertMarker = function() {\n  this.list.push(this.MARKER);\n  this.attrs.push(this.MARKER);\n};\n\nHTMLParser.ActiveFormattingElements.prototype.push = function(elt, attrs) {\n  // Scan backwards: if there are already 3 copies of this element\n  // before we encounter a marker, then drop the last one\n  var count = 0;\n  for(var i = this.list.length-1; i >= 0; i--) {\n    if (this.list[i] === this.MARKER) break;\n    // equal() is defined below\n    if (equal(elt, this.list[i], this.attrs[i])) {\n      count++;\n      if (count === 3) {\n        this.list.splice(i, 1);\n        this.attrs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n\n  // Now push the element onto the list\n  this.list.push(elt);\n\n  // Copy the attributes and push those on, too\n  var attrcopy = [];\n  for(var ii = 0; ii < attrs.length; ii++) {\n    attrcopy[ii] = attrs[ii];\n  }\n\n  this.attrs.push(attrcopy);\n\n  // This function defines equality of two elements for the purposes\n  // of the AFE list.  Note that it compares the new elements\n  // attributes to the saved array of attributes associated with\n  // the old element because a script could have changed the\n  // old element's set of attributes\n  function equal(newelt, oldelt, oldattrs) {\n    if (newelt.localName !== oldelt.localName) return false;\n    if (newelt._numattrs !== oldattrs.length) return false;\n    for(var i = 0, n = oldattrs.length; i < n; i++) {\n      var oldname = oldattrs[i][0];\n      var oldval = oldattrs[i][1];\n      if (!newelt.hasAttribute(oldname)) return false;\n      if (newelt.getAttribute(oldname) !== oldval) return false;\n    }\n    return true;\n  }\n};\n\nHTMLParser.ActiveFormattingElements.prototype.clearToMarker = function() {\n  for(var i = this.list.length-1; i >= 0; i--) {\n    if (this.list[i] === this.MARKER) break;\n  }\n  if (i < 0) i = 0;\n  this.list.length = i;\n  this.attrs.length = i;\n};\n\n// Find and return the last element with the specified tag between the\n// end of the list and the last marker on the list.\n// Used when parsing <a> in_body_mode()\nHTMLParser.ActiveFormattingElements.prototype.findElementByTag = function(tag) {\n  for(var i = this.list.length-1; i >= 0; i--) {\n    var elt = this.list[i];\n    if (elt === this.MARKER) break;\n    if (elt.localName === tag) return elt;\n  }\n  return null;\n};\n\nHTMLParser.ActiveFormattingElements.prototype.indexOf = function(e) {\n  return this.list.lastIndexOf(e);\n};\n\n// Find the element e in the list and remove it\n// Used when parsing <a> in_body()\nHTMLParser.ActiveFormattingElements.prototype.remove = function(e) {\n  var idx = this.list.lastIndexOf(e);\n  if (idx !== -1) {\n    this.list.splice(idx, 1);\n    this.attrs.splice(idx, 1);\n  }\n};\n\n// Find element a in the list and replace it with element b\n// XXX: Do I need to handle attributes here?\nHTMLParser.ActiveFormattingElements.prototype.replace = function(a, b, attrs) {\n  var idx = this.list.lastIndexOf(a);\n  if (idx !== -1) {\n    this.list[idx] = b;\n    this.attrs[idx] = attrs;\n  }\n};\n\n// Find a in the list and insert b after it\n// This is only used for insert a bookmark object, so the\n// attrs array doesn't really matter\nHTMLParser.ActiveFormattingElements.prototype.insertAfter = function(a,b) {\n  var idx = this.list.lastIndexOf(a);\n  if (idx !== -1) {\n    this.list.splice(idx, 0, b);\n    this.attrs.splice(idx, 0, b);\n  }\n};\n\n\n\n\n/***\n * This is the parser factory function. It is the return value of\n * the outer closure that it is defined within.  Most of the parser\n * implementation details are inside this function.\n */\nfunction HTMLParser(address, fragmentContext, options) {\n  /***\n   * These are the parser's state variables\n   */\n  // Scanner state\n  var chars = null;\n  var numchars = 0; // Length of chars\n  var nextchar = 0; // Index of next char\n  var input_complete = false; // Becomes true when end() called.\n  var scanner_skip_newline = false; // If previous char was CR\n  var reentrant_invocations = 0;\n  var saved_scanner_state = [];\n  var leftovers = \"\";\n  var first_batch = true;\n  var paused = 0; // Becomes non-zero while loading scripts\n\n\n  // Tokenizer state\n  var tokenizer = data_state; // Current tokenizer state\n  var return_state;\n  var character_reference_code;\n  var tagnamebuf = \"\";\n  var lasttagname = \"\"; // holds the target end tag for text states\n  var tempbuf = [];\n  var attrnamebuf = \"\";\n  var attrvaluebuf = \"\";\n  var commentbuf = [];\n  var doctypenamebuf = [];\n  var doctypepublicbuf = [];\n  var doctypesystembuf = [];\n  var attributes = [];\n  var is_end_tag = false;\n\n  // Tree builder state\n  var parser = initial_mode; // Current insertion mode\n  var originalInsertionMode = null; // A saved insertion mode\n  var templateInsertionModes = []; // Stack of template insertion modes.\n  var stack = new HTMLParser.ElementStack(); // Stack of open elements\n  var afe = new HTMLParser.ActiveFormattingElements(); // mis-nested tags\n  var fragment = (fragmentContext!==undefined); // For innerHTML, etc.\n  var head_element_pointer = null;\n  var form_element_pointer = null;\n  var scripting_enabled = true;\n  if (fragmentContext) {\n\tscripting_enabled = fragmentContext.ownerDocument._scripting_enabled;\n  }\n  if (options && options.scripting_enabled === false)\n    scripting_enabled = false;\n  var frameset_ok = true;\n  var force_quirks = false;\n  var pending_table_text;\n  var text_integration_mode; // XXX a spec bug workaround?\n\n  // A single run of characters, buffered up to be sent to\n  // the parser as a single string.\n  var textrun = [];\n  var textIncludesNUL = false;\n  var ignore_linefeed = false;\n\n  /***\n   * This is the parser object that will be the return value of this\n   * factory function, which is some 5000 lines below.\n   * Note that the variable \"parser\" is the current state of the\n   * parser's state machine.  This variable \"htmlparser\" is the\n   * return value and defines the public API of the parser\n   */\n  var htmlparser = {\n    document: function() {\n      return doc;\n    },\n\n    // Convenience function for internal use. Can only be called once,\n    // as it removes the nodes from `doc` to add them to fragment.\n    _asDocumentFragment: function() {\n      var frag = doc.createDocumentFragment();\n      var root = doc.firstChild;\n      while(root.hasChildNodes()) {\n        frag.appendChild(root.firstChild);\n      }\n      return frag;\n    },\n\n    // Internal function used from HTMLScriptElement to pause the\n    // parser while a script is being loaded from the network\n    pause: function() {\n      // print(\"pausing parser\");\n      paused++;\n    },\n\n    // Called when a script finishes loading\n    resume: function() {\n      // print(\"resuming parser\");\n      paused--;\n      // XXX: added this to force a resumption.\n      // Is this the right thing to do?\n      this.parse(\"\");\n    },\n\n    // Parse the HTML text s.\n    // The second argument should be true if there is no more\n    // text to be parsed, and should be false or omitted otherwise.\n    // The second argument must not be set for recursive invocations\n    // from document.write()\n    parse: function(s, end, shouldPauseFunc) {\n      var moreToDo;\n\n      // If we're paused, remember the text to parse, but\n      // don't parse it now.\n      // (Don't invoke shouldPauseFunc because we haven't handled 'end' yet.)\n      if (paused > 0) {\n        leftovers += s;\n        return true; // more to do\n      }\n\n\n      if (reentrant_invocations === 0) {\n        // A normal, top-level invocation\n        if (leftovers) {\n          s = leftovers + s;\n          leftovers = \"\";\n        }\n\n        // Add a special marker character to the end of\n        // the buffer.  If the scanner is at the end of\n        // the buffer and input_complete is set, then this\n        // character will transform into an EOF token.\n        // Having an actual character that represents EOF\n        // in the character buffer makes lookahead regexp\n        // matching work more easily, and this is\n        // important for character references.\n        if (end) {\n          s += \"\\uFFFF\";\n          input_complete = true; // Makes scanChars() send EOF\n        }\n\n        chars = s;\n        numchars = s.length;\n        nextchar = 0;\n\n        if (first_batch) {\n          // We skip a leading Byte Order Mark (\\uFEFF)\n          // on first batch of text we're given\n          first_batch = false;\n          if (chars.charCodeAt(0) === 0xFEFF) nextchar = 1;\n        }\n\n        reentrant_invocations++;\n        moreToDo = scanChars(shouldPauseFunc);\n        leftovers = chars.substring(nextchar, numchars);\n        reentrant_invocations--;\n      }\n      else {\n        // This is the re-entrant case, which we have to\n        // handle a little differently.\n        reentrant_invocations++;\n\n        // Save current scanner state\n        saved_scanner_state.push(chars, numchars, nextchar);\n\n        // Set new scanner state\n        chars = s;\n        numchars = s.length;\n        nextchar = 0;\n\n        // Now scan as many of these new chars as we can\n        scanChars();\n        moreToDo = false;\n\n        leftovers = chars.substring(nextchar, numchars);\n\n        // restore old scanner state\n        nextchar = saved_scanner_state.pop();\n        numchars = saved_scanner_state.pop();\n        chars = saved_scanner_state.pop();\n\n        // If there were leftover chars from this invocation\n        // insert them into the pending invocation's buffer\n        // and trim already processed chars at the same time\n        if (leftovers) {\n          chars = leftovers + chars.substring(nextchar);\n          numchars = chars.length;\n          nextchar = 0;\n          leftovers = \"\";\n        }\n\n        // Decrement the counter\n        reentrant_invocations--;\n      }\n      return moreToDo;\n    }\n  };\n\n\n  // This is the document we'll be building up\n  var doc = new Document(true, address);\n\n  // The document needs to know about the parser, for document.write().\n  // This _parser property will be deleted when we're done parsing.\n  doc._parser = htmlparser;\n\n  // XXX I think that any document we use this parser on should support\n  // scripts. But I may need to configure that through a parser parameter\n  // Only documents with windows (\"browsing contexts\" to be precise)\n  // allow scripting.\n  doc._scripting_enabled = scripting_enabled;\n\n\n  /***\n   * The actual code of the HTMLParser() factory function begins here.\n   */\n\n  if (fragmentContext) { // for innerHTML parsing\n    if (fragmentContext.ownerDocument._quirks)\n      doc._quirks = true;\n    if (fragmentContext.ownerDocument._limitedQuirks)\n      doc._limitedQuirks = true;\n\n    // Set the initial tokenizer state\n    if (fragmentContext.namespaceURI === NAMESPACE.HTML) {\n      switch(fragmentContext.localName) {\n      case \"title\":\n      case \"textarea\":\n        tokenizer = rcdata_state;\n        break;\n      case \"style\":\n      case \"xmp\":\n      case \"iframe\":\n      case \"noembed\":\n      case \"noframes\":\n      case \"script\":\n      case \"plaintext\":\n        tokenizer = plaintext_state;\n        break;\n      case \"noscript\":\n        if (scripting_enabled)\n          tokenizer = plaintext_state;\n      }\n    }\n\n    var root = doc.createElement(\"html\");\n    doc._appendChild(root);\n    stack.push(root);\n    if (fragmentContext instanceof impl.HTMLTemplateElement) {\n      templateInsertionModes.push(in_template_mode);\n    }\n    resetInsertionMode();\n\n    for(var e = fragmentContext; e !== null; e = e.parentElement) {\n      if (e instanceof impl.HTMLFormElement) {\n        form_element_pointer = e;\n        break;\n      }\n    }\n  }\n\n  /***\n   * Scanner functions\n   */\n  // Loop through the characters in chars, and pass them one at a time\n  // to the tokenizer FSM. Return when no more characters can be processed\n  // (This may leave 1 or more characters in the buffer: like a CR\n  // waiting to see if the next char is LF, or for states that require\n  // lookahead...)\n  function scanChars(shouldPauseFunc) {\n    var codepoint, s, pattern, eof;\n\n    while(nextchar < numchars) {\n\n      // If we just tokenized a </script> tag, then the paused flag\n      // may have been set to tell us to stop tokenizing while\n      // the script is loading\n      if (paused > 0 || (shouldPauseFunc && shouldPauseFunc())) {\n        return true;\n      }\n\n\n      switch(typeof tokenizer.lookahead) {\n      case 'undefined':\n        codepoint = chars.charCodeAt(nextchar++);\n        if (scanner_skip_newline) {\n          scanner_skip_newline = false;\n          if (codepoint === 0x000A) {\n            nextchar++;\n            continue;\n          }\n        }\n        switch(codepoint) {\n        case 0x000D:\n          // CR always turns into LF, but if the next character\n          // is LF, then that second LF is skipped.\n          if (nextchar < numchars) {\n            if (chars.charCodeAt(nextchar) === 0x000A)\n              nextchar++;\n          }\n          else {\n            // We don't know the next char right now, so we\n            // can't check if it is a LF.  So set a flag\n            scanner_skip_newline = true;\n          }\n\n          // In either case, emit a LF\n          tokenizer(0x000A);\n\n          break;\n        case 0xFFFF:\n          if (input_complete && nextchar === numchars) {\n            tokenizer(EOF); // codepoint will be 0xFFFF here\n            break;\n          }\n          /* falls through */\n        default:\n          tokenizer(codepoint);\n          break;\n        }\n        break;\n\n      case 'number':\n        codepoint = chars.charCodeAt(nextchar);\n\n        // The only tokenizer states that require fixed lookahead\n        // only consume alphanum characters, so we don't have\n        // to worry about CR and LF in this case\n\n        // tokenizer wants n chars of lookahead\n        var n = tokenizer.lookahead;\n        var needsString = true;\n        if (n < 0) {\n          needsString = false;\n          n = -n;\n        }\n\n        if (n < numchars - nextchar) {\n          // If we can look ahead that far\n          s = needsString ? chars.substring(nextchar, nextchar+n) : null;\n          eof = false;\n        }\n        else { // if we don't have that many characters\n          if (input_complete) { // If no more are coming\n            // Just return what we have\n            s = needsString ? chars.substring(nextchar, numchars) : null;\n            eof = true;\n            if (codepoint === 0xFFFF && nextchar === numchars-1)\n              codepoint = EOF;\n          }\n          else {\n            // Return now and wait for more chars later\n            return true;\n          }\n        }\n        tokenizer(codepoint, s, eof);\n        break;\n      case 'string':\n        codepoint = chars.charCodeAt(nextchar);\n\n        // tokenizer wants characters up to a matching string\n        pattern = tokenizer.lookahead;\n        var pos = chars.indexOf(pattern, nextchar);\n        if (pos !== -1) {\n          s = chars.substring(nextchar, pos + pattern.length);\n          eof = false;\n        }\n        else {  // No match\n          // If more characters coming, wait for them\n          if (!input_complete) return true;\n\n          // Otherwise, we've got to return what we've got\n          s = chars.substring(nextchar, numchars);\n          if (codepoint === 0xFFFF && nextchar === numchars-1)\n            codepoint = EOF;\n          eof = true;\n        }\n\n        // The tokenizer states that require this kind of\n        // lookahead have to be careful to handle CR characters\n        // correctly\n        tokenizer(codepoint, s, eof);\n        break;\n      }\n    }\n    return false; // no more characters to scan!\n  }\n\n\n  /***\n   * Tokenizer utility functions\n   */\n  function addAttribute(name,value) {\n    // Make sure there isn't already an attribute with this name\n    // If there is, ignore this one.\n    for(var i = 0; i < attributes.length; i++) {\n      if (attributes[i][0] === name) return;\n    }\n\n    if (value !== undefined) {\n      attributes.push([name, value]);\n    }\n    else {\n      attributes.push([name]);\n    }\n  }\n\n  // Shortcut for simple attributes\n  function handleSimpleAttribute() {\n    SIMPLEATTR.lastIndex = nextchar-1;\n    var matched = SIMPLEATTR.exec(chars);\n    if (!matched) throw new Error(\"should never happen\");\n    var name = matched[1];\n    if (!name) return false;\n    var value = matched[2];\n    var len = value.length;\n    switch(value[0]) {\n    case '\"':\n    case \"'\":\n      value = value.substring(1, len-1);\n      nextchar += (matched[0].length-1);\n      tokenizer = after_attribute_value_quoted_state;\n      break;\n    default:\n      tokenizer = before_attribute_name_state;\n      nextchar += (matched[0].length-1);\n      value = value.substring(0, len-1);\n      break;\n    }\n\n    // Make sure there isn't already an attribute with this name\n    // If there is, ignore this one.\n    for(var i = 0; i < attributes.length; i++) {\n      if (attributes[i][0] === name) return true;\n    }\n\n    attributes.push([name, value]);\n    return true;\n  }\n\n  function beginTagName() {\n    is_end_tag = false;\n    tagnamebuf = \"\";\n    attributes.length = 0;\n  }\n  function beginEndTagName() {\n    is_end_tag = true;\n    tagnamebuf = \"\";\n    attributes.length = 0;\n  }\n\n  function beginTempBuf() { tempbuf.length = 0; }\n  function beginAttrName() { attrnamebuf = \"\"; }\n  function beginAttrValue() { attrvaluebuf = \"\"; }\n  function beginComment() { commentbuf.length = 0; }\n  function beginDoctype() {\n    doctypenamebuf.length = 0;\n    doctypepublicbuf = null;\n    doctypesystembuf = null;\n  }\n  function beginDoctypePublicId() { doctypepublicbuf = []; }\n  function beginDoctypeSystemId() { doctypesystembuf = []; }\n  function forcequirks() { force_quirks = true; }\n  function cdataAllowed() {\n    return stack.top &&\n      stack.top.namespaceURI !== \"http://www.w3.org/1999/xhtml\";\n  }\n\n  // Return true if the codepoints in the specified buffer match the\n  // characters of lasttagname\n  function appropriateEndTag(buf) {\n    return lasttagname === buf;\n  }\n\n  function flushText() {\n    if (textrun.length > 0) {\n      var s = buf2str(textrun);\n      textrun.length = 0;\n\n      if (ignore_linefeed) {\n        ignore_linefeed = false;\n        if (s[0] === \"\\n\") s = s.substring(1);\n        if (s.length === 0) return;\n      }\n\n      insertToken(TEXT, s);\n      textIncludesNUL = false;\n    }\n    ignore_linefeed = false;\n  }\n\n  // Consume chars matched by the pattern and return them as a string. Starts\n  // matching at the current position, so users should drop the current char\n  // otherwise.\n  function getMatchingChars(pattern) {\n    pattern.lastIndex = nextchar - 1;\n    var match = pattern.exec(chars);\n    if (match && match.index === nextchar - 1) {\n      match = match[0];\n      nextchar += match.length - 1;\n      /* Careful!  Make sure we haven't matched the EOF character! */\n      if (input_complete && nextchar === numchars) {\n        // Oops, backup one.\n        match = match.slice(0, -1);\n        nextchar--;\n      }\n      return match;\n    } else {\n      throw new Error(\"should never happen\");\n    }\n  }\n\n  // emit a string of chars that match a regexp\n  // Returns false if no chars matched.\n  function emitCharsWhile(pattern) {\n    pattern.lastIndex = nextchar-1;\n    var match = pattern.exec(chars)[0];\n    if (!match) return false;\n    emitCharString(match);\n    nextchar += match.length - 1;\n    return true;\n  }\n\n  // This is used by CDATA sections\n  function emitCharString(s) {\n    if (textrun.length > 0) flushText();\n\n    if (ignore_linefeed) {\n      ignore_linefeed = false;\n      if (s[0] === \"\\n\") s = s.substring(1);\n      if (s.length === 0) return;\n    }\n\n    insertToken(TEXT, s);\n  }\n\n  function emitTag() {\n    if (is_end_tag) insertToken(ENDTAG, tagnamebuf);\n    else {\n      // Remember the last open tag we emitted\n      var tagname = tagnamebuf;\n      tagnamebuf = \"\";\n      lasttagname = tagname;\n      insertToken(TAG, tagname, attributes);\n    }\n  }\n\n\n  // A shortcut: look ahead and if this is a open or close tag\n  // in lowercase with no spaces and no attributes, just emit it now.\n  function emitSimpleTag() {\n    if (nextchar === numchars) { return false; /* not even 1 char left */ }\n    SIMPLETAG.lastIndex = nextchar;\n    var matched = SIMPLETAG.exec(chars);\n    if (!matched) throw new Error(\"should never happen\");\n    var tagname = matched[2];\n    if (!tagname) return false;\n    var endtag = matched[1];\n    if (endtag) {\n      nextchar += (tagname.length+2);\n      insertToken(ENDTAG, tagname);\n    }\n    else {\n      nextchar += (tagname.length+1);\n      lasttagname = tagname;\n      insertToken(TAG, tagname, NOATTRS);\n    }\n    return true;\n  }\n\n  function emitSelfClosingTag() {\n    if (is_end_tag) insertToken(ENDTAG, tagnamebuf, null, true);\n    else {\n      insertToken(TAG, tagnamebuf, attributes, true);\n    }\n  }\n\n  function emitDoctype() {\n    insertToken(DOCTYPE,\n          buf2str(doctypenamebuf),\n          doctypepublicbuf ? buf2str(doctypepublicbuf) : undefined,\n          doctypesystembuf ? buf2str(doctypesystembuf) : undefined);\n  }\n\n  function emitEOF() {\n    flushText();\n    parser(EOF); // EOF never goes to insertForeignContent()\n    doc.modclock = 1; // Start tracking modifications\n  }\n\n  // Insert a token, either using the current parser insertion mode\n  // (for HTML stuff) or using the insertForeignToken() method.\n  var insertToken = htmlparser.insertToken = function insertToken(t, value, arg3, arg4) {\n    flushText();\n    var current = stack.top;\n\n    if (!current || current.namespaceURI === NAMESPACE.HTML) {\n      // This is the common case\n      parser(t, value, arg3, arg4);\n    }\n    else {\n      // Otherwise we may need to insert this token as foreign content\n      if (t !== TAG && t !== TEXT) {\n        insertForeignToken(t, value, arg3, arg4);\n      }\n      else {\n        // But in some cases we treat it as regular content\n        if ((isMathmlTextIntegrationPoint(current) &&\n           (t === TEXT ||\n            (t === TAG &&\n             value !== \"mglyph\" && value !== \"malignmark\"))) ||\n          (t === TAG &&\n           value === \"svg\" &&\n           current.namespaceURI === NAMESPACE.MATHML &&\n           current.localName === \"annotation-xml\") ||\n          isHTMLIntegrationPoint(current)) {\n\n          // XXX: the text_integration_mode stuff is an\n          // attempted bug workaround of mine\n          text_integration_mode = true;\n          parser(t, value, arg3, arg4);\n          text_integration_mode = false;\n        }\n        // Otherwise it is foreign content\n        else {\n          insertForeignToken(t, value, arg3, arg4);\n        }\n      }\n    }\n  };\n\n\n  /***\n   * Tree building utility functions\n   */\n  function insertComment(data) {\n    var parent = stack.top;\n    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {\n      fosterParent(function(doc) { return doc.createComment(data); });\n    } else {\n      // \"If the adjusted insertion location is inside a template element,\n      // let it instead be inside the template element's template contents\"\n      if (parent instanceof impl.HTMLTemplateElement) {\n        parent = parent.content;\n      }\n      parent._appendChild(parent.ownerDocument.createComment(data));\n    }\n  }\n\n  function insertText(s) {\n    var parent = stack.top;\n    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {\n      fosterParent(function(doc) { return doc.createTextNode(s); });\n    } else {\n      // \"If the adjusted insertion location is inside a template element,\n      // let it instead be inside the template element's template contents\"\n      if (parent instanceof impl.HTMLTemplateElement) {\n        parent = parent.content;\n      }\n      // \"If there is a Text node immediately before the adjusted insertion\n      // location, then append data to that Text node's data.\"\n      var lastChild = parent.lastChild;\n      if (lastChild && lastChild.nodeType === Node.TEXT_NODE) {\n        lastChild.appendData(s);\n      } else {\n        parent._appendChild(parent.ownerDocument.createTextNode(s));\n      }\n    }\n  }\n\n  function createHTMLElt(doc, name, attrs) {\n    // Create the element this way, rather than with\n    // doc.createElement because createElement() does error\n    // checking on the element name that we need to avoid here.\n    var elt = html.createElement(doc, name, null);\n\n    if (attrs) {\n      for(var i = 0, n = attrs.length; i < n; i++) {\n        // Use the _ version to avoid testing the validity\n        // of the attribute name\n        elt._setAttribute(attrs[i][0], attrs[i][1]);\n      }\n    }\n    // XXX\n    // If the element is a resettable form element,\n    // run its reset algorithm now\n    // XXX\n    // handle case where form-element-pointer is not null\n    return elt;\n  }\n\n  // The in_table insertion mode turns on this flag, and that makes\n  // insertHTMLElement use the foster parenting algorithm for elements\n  // tags inside a table\n  var foster_parent_mode = false;\n\n  function insertHTMLElement(name, attrs) {\n    var elt = insertElement(function(doc) {\n      return createHTMLElt(doc, name, attrs);\n    });\n\n    // XXX\n    // If this is a form element, set its form attribute property here\n    if (isA(elt, formassociatedSet)) {\n      elt._form = form_element_pointer;\n    }\n\n    return elt;\n  }\n\n  // Insert the element into the open element or foster parent it\n  function insertElement(eltFunc) {\n    var elt;\n    if (foster_parent_mode && isA(stack.top, tablesectionrowSet)) {\n      elt = fosterParent(eltFunc);\n    }\n    else if (stack.top instanceof impl.HTMLTemplateElement) {\n      // \"If the adjusted insertion location is inside a template element,\n      // let it instead be inside the template element's template contents\"\n      elt = eltFunc(stack.top.content.ownerDocument);\n      stack.top.content._appendChild(elt);\n    } else {\n      elt = eltFunc(stack.top.ownerDocument);\n      stack.top._appendChild(elt);\n    }\n\n    stack.push(elt);\n    return elt;\n  }\n\n  function insertForeignElement(name, attrs, ns) {\n    return insertElement(function(doc) {\n      // We need to prevent createElementNS from trying to parse `name` as a\n      // `qname`, so use an internal Document#_createElementNS() interface.\n      var elt = doc._createElementNS(name, ns, null);\n      if (attrs) {\n        for(var i = 0, n = attrs.length; i < n; i++) {\n          var attr = attrs[i];\n          if (attr.length === 2)\n            elt._setAttribute(attr[0], attr[1]);\n          else {\n            elt._setAttributeNS(attr[2], attr[0], attr[1]);\n          }\n        }\n      }\n      return elt;\n    });\n  }\n\n  function lastElementOfType(type) {\n    for(var i = stack.elements.length-1; i >= 0; i--) {\n      if (stack.elements[i] instanceof type) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  function fosterParent(eltFunc) {\n    var parent, before, lastTable = -1, lastTemplate = -1, elt;\n\n    lastTable = lastElementOfType(impl.HTMLTableElement);\n    lastTemplate = lastElementOfType(impl.HTMLTemplateElement);\n\n    if (lastTemplate >= 0 && (lastTable < 0 || lastTemplate > lastTable)) {\n      parent = stack.elements[lastTemplate];\n    } else if (lastTable >= 0) {\n      parent = stack.elements[lastTable].parentNode;\n      if (parent) {\n        before = stack.elements[lastTable];\n      } else {\n        parent = stack.elements[lastTable - 1];\n      }\n    }\n    if (!parent) parent = stack.elements[0]; // the `html` element.\n\n    // \"If the adjusted insertion location is inside a template element,\n    // let it instead be inside the template element's template contents\"\n    if (parent instanceof impl.HTMLTemplateElement) {\n      parent = parent.content;\n    }\n    // Create element in the appropriate document.\n    elt = eltFunc(parent.ownerDocument);\n\n    if (elt.nodeType === Node.TEXT_NODE) {\n      var prev;\n      if (before) prev = before.previousSibling;\n      else prev = parent.lastChild;\n      if (prev && prev.nodeType === Node.TEXT_NODE) {\n        prev.appendData(elt.data);\n        return elt;\n      }\n    }\n    if (before)\n      parent.insertBefore(elt, before);\n    else\n      parent._appendChild(elt);\n    return elt;\n  }\n\n\n  function resetInsertionMode() {\n    var last = false;\n    for(var i = stack.elements.length-1; i >= 0; i--) {\n      var node = stack.elements[i];\n      if (i === 0) {\n        last = true;\n        if (fragment) {\n          node = fragmentContext;\n        }\n      }\n      if (node.namespaceURI === NAMESPACE.HTML) {\n        var tag = node.localName;\n        switch(tag) {\n        case \"select\":\n          for(var j = i; j > 0; ) {\n            var ancestor = stack.elements[--j];\n            if (ancestor instanceof impl.HTMLTemplateElement) {\n              break;\n            } else if (ancestor instanceof impl.HTMLTableElement) {\n              parser = in_select_in_table_mode;\n              return;\n            }\n          }\n          parser = in_select_mode;\n          return;\n        case \"tr\":\n          parser = in_row_mode;\n          return;\n        case \"tbody\":\n        case \"tfoot\":\n        case \"thead\":\n          parser = in_table_body_mode;\n          return;\n        case \"caption\":\n          parser = in_caption_mode;\n          return;\n        case \"colgroup\":\n          parser = in_column_group_mode;\n          return;\n        case \"table\":\n          parser = in_table_mode;\n          return;\n        case \"template\":\n          parser = templateInsertionModes[templateInsertionModes.length-1];\n          return;\n        case \"body\":\n          parser = in_body_mode;\n          return;\n        case \"frameset\":\n          parser = in_frameset_mode;\n          return;\n        case \"html\":\n          if (head_element_pointer === null) {\n            parser = before_head_mode;\n          } else {\n            parser = after_head_mode;\n          }\n          return;\n        default:\n          if (!last) {\n            if (tag === \"head\") {\n              parser = in_head_mode;\n              return;\n            }\n            if (tag === \"td\" || tag === \"th\") {\n              parser = in_cell_mode;\n              return;\n            }\n          }\n        }\n      }\n      if (last) {\n        parser = in_body_mode;\n        return;\n      }\n    }\n  }\n\n\n  function parseRawText(name, attrs) {\n    insertHTMLElement(name, attrs);\n    tokenizer = rawtext_state;\n    originalInsertionMode = parser;\n    parser = text_mode;\n  }\n\n  function parseRCDATA(name, attrs) {\n    insertHTMLElement(name, attrs);\n    tokenizer = rcdata_state;\n    originalInsertionMode = parser;\n    parser = text_mode;\n  }\n\n  // Make a copy of element i on the list of active formatting\n  // elements, using its original attributes, not current\n  // attributes (which may have been modified by a script)\n  function afeclone(doc, i) {\n    return {\n      elt: createHTMLElt(doc, afe.list[i].localName, afe.attrs[i]),\n      attrs: afe.attrs[i],\n    };\n  }\n\n\n  function afereconstruct() {\n    if (afe.list.length === 0) return;\n    var entry = afe.list[afe.list.length-1];\n    // If the last is a marker , do nothing\n    if (entry === afe.MARKER) return;\n    // Or if it is an open element, do nothing\n    if (stack.elements.lastIndexOf(entry) !== -1) return;\n\n    // Loop backward through the list until we find a marker or an\n    // open element, and then move forward one from there.\n    for(var i = afe.list.length-2; i >= 0; i--) {\n      entry = afe.list[i];\n      if (entry === afe.MARKER) break;\n      if (stack.elements.lastIndexOf(entry) !== -1) break;\n    }\n\n    // Now loop forward, starting from the element after the current\n    // one, recreating formatting elements and pushing them back onto\n    // the list of open elements\n    for(i = i+1; i < afe.list.length; i++) {\n      var newelt = insertElement(function(doc) { return afeclone(doc, i).elt; });\n      afe.list[i] = newelt;\n    }\n  }\n\n  // Used by the adoptionAgency() function\n  var BOOKMARK = {localName:\"BM\"};\n\n  function adoptionAgency(tag) {\n    // If the current node is an HTML element whose tag name is subject,\n    // and the current node is not in the list of active formatting\n    // elements, then pop the current node off the stack of open\n    // elements and abort these steps.\n    if (isA(stack.top, tag) && afe.indexOf(stack.top) === -1) {\n      stack.pop();\n      return true; // no more handling required\n    }\n\n    // Let outer loop counter be zero.\n    var outer = 0;\n\n    // Outer loop: If outer loop counter is greater than or\n    // equal to eight, then abort these steps.\n    while(outer < 8) {\n      // Increment outer loop counter by one.\n      outer++;\n\n      // Let the formatting element be the last element in the list\n      // of active formatting elements that: is between the end of\n      // the list and the last scope marker in the list, if any, or\n      // the start of the list otherwise, and has the same tag name\n      // as the token.\n      var fmtelt = afe.findElementByTag(tag);\n\n      // If there is no such node, then abort these steps and instead\n      // act as described in the \"any other end tag\" entry below.\n      if (!fmtelt) {\n        return false; // false means handle by the default case\n      }\n\n      // Otherwise, if there is such a node, but that node is not in\n      // the stack of open elements, then this is a parse error;\n      // remove the element from the list, and abort these steps.\n      var index = stack.elements.lastIndexOf(fmtelt);\n      if (index === -1) {\n        afe.remove(fmtelt);\n        return true;   // true means no more handling required\n      }\n\n      // Otherwise, if there is such a node, and that node is also in\n      // the stack of open elements, but the element is not in scope,\n      // then this is a parse error; ignore the token, and abort\n      // these steps.\n      if (!stack.elementInScope(fmtelt)) {\n        return true;\n      }\n\n      // Let the furthest block be the topmost node in the stack of\n      // open elements that is lower in the stack than the formatting\n      // element, and is an element in the special category. There\n      // might not be one.\n      var furthestblock = null, furthestblockindex;\n      for(var i = index+1; i < stack.elements.length; i++) {\n        if (isA(stack.elements[i], specialSet)) {\n          furthestblock = stack.elements[i];\n          furthestblockindex = i;\n          break;\n        }\n      }\n\n      // If there is no furthest block, then the UA must skip the\n      // subsequent steps and instead just pop all the nodes from the\n      // bottom of the stack of open elements, from the current node\n      // up to and including the formatting element, and remove the\n      // formatting element from the list of active formatting\n      // elements.\n      if (!furthestblock) {\n        stack.popElement(fmtelt);\n        afe.remove(fmtelt);\n        return true;\n      }\n      else {\n        // Let the common ancestor be the element immediately above\n        // the formatting element in the stack of open elements.\n        var ancestor = stack.elements[index-1];\n\n        // Let a bookmark note the position of the formatting\n        // element in the list of active formatting elements\n        // relative to the elements on either side of it in the\n        // list.\n        afe.insertAfter(fmtelt, BOOKMARK);\n\n        // Let node and last node be the furthest block.\n        var node = furthestblock;\n        var lastnode = furthestblock;\n        var nodeindex = furthestblockindex;\n        var nodeafeindex;\n\n        // Let inner loop counter be zero.\n        var inner = 0;\n\n        while (true) {\n\n          // Increment inner loop counter by one.\n          inner++;\n\n          // Let node be the element immediately above node in\n          // the stack of open elements, or if node is no longer\n          // in the stack of open elements (e.g. because it got\n          // removed by this algorithm), the element that was\n          // immediately above node in the stack of open elements\n          // before node was removed.\n          node = stack.elements[--nodeindex];\n\n          // If node is the formatting element, then go\n          // to the next step in the overall algorithm.\n          if (node === fmtelt) break;\n\n          // If the inner loop counter is greater than three and node\n          // is in the list of active formatting elements, then remove\n          // node from the list of active formatting elements.\n          nodeafeindex = afe.indexOf(node);\n          if (inner > 3 && nodeafeindex !== -1) {\n            afe.remove(node);\n            nodeafeindex = -1;\n          }\n\n          // If node is not in the list of active formatting\n          // elements, then remove node from the stack of open\n          // elements and then go back to the step labeled inner\n          // loop.\n          if (nodeafeindex === -1) {\n            stack.removeElement(node);\n            continue;\n          }\n\n          // Create an element for the token for which the\n          // element node was created with common ancestor as\n          // the intended parent, replace the entry for node\n          // in the list of active formatting elements with an\n          // entry for the new element, replace the entry for\n          // node in the stack of open elements with an entry for\n          // the new element, and let node be the new element.\n          var newelt = afeclone(ancestor.ownerDocument, nodeafeindex);\n          afe.replace(node, newelt.elt, newelt.attrs);\n          stack.elements[nodeindex] = newelt.elt;\n          node = newelt.elt;\n\n          // If last node is the furthest block, then move the\n          // aforementioned bookmark to be immediately after the\n          // new node in the list of active formatting elements.\n          if (lastnode === furthestblock) {\n            afe.remove(BOOKMARK);\n            afe.insertAfter(newelt.elt, BOOKMARK);\n          }\n\n          // Insert last node into node, first removing it from\n          // its previous parent node if any.\n          node._appendChild(lastnode);\n\n          // Let last node be node.\n          lastnode = node;\n        }\n\n        // If the common ancestor node is a table, tbody, tfoot,\n        // thead, or tr element, then, foster parent whatever last\n        // node ended up being in the previous step, first removing\n        // it from its previous parent node if any.\n        if (foster_parent_mode && isA(ancestor, tablesectionrowSet)) {\n          fosterParent(function() { return lastnode; });\n        }\n        // Otherwise, append whatever last node ended up being in\n        // the previous step to the common ancestor node, first\n        // removing it from its previous parent node if any.\n        else if (ancestor instanceof impl.HTMLTemplateElement) {\n          ancestor.content._appendChild(lastnode);\n        } else {\n          ancestor._appendChild(lastnode);\n        }\n\n        // Create an element for the token for which the\n        // formatting element was created, with furthest block\n        // as the intended parent.\n        var newelt2 = afeclone(furthestblock.ownerDocument, afe.indexOf(fmtelt));\n\n        // Take all of the child nodes of the furthest block and\n        // append them to the element created in the last step.\n        while(furthestblock.hasChildNodes()) {\n          newelt2.elt._appendChild(furthestblock.firstChild);\n        }\n\n        // Append that new element to the furthest block.\n        furthestblock._appendChild(newelt2.elt);\n\n        // Remove the formatting element from the list of active\n        // formatting elements, and insert the new element into the\n        // list of active formatting elements at the position of\n        // the aforementioned bookmark.\n        afe.remove(fmtelt);\n        afe.replace(BOOKMARK, newelt2.elt, newelt2.attrs);\n\n        // Remove the formatting element from the stack of open\n        // elements, and insert the new element into the stack of\n        // open elements immediately below the position of the\n        // furthest block in that stack.\n        stack.removeElement(fmtelt);\n        var pos = stack.elements.lastIndexOf(furthestblock);\n        stack.elements.splice(pos+1, 0, newelt2.elt);\n      }\n    }\n\n    return true;\n  }\n\n  // We do this when we get /script in in_text_mode\n  function handleScriptEnd() {\n    // XXX:\n    // This is just a stub implementation right now and doesn't run scripts.\n    // Getting this method right involves the event loop, URL resolution\n    // script fetching etc. For now I just want to be able to parse\n    // documents and test the parser.\n\n    //var script = stack.top;\n    stack.pop();\n    parser = originalInsertionMode;\n    //script._prepare();\n    return;\n\n    // XXX: here is what this method is supposed to do\n\n    // Provide a stable state.\n\n    // Let script be the current node (which will be a script\n    // element).\n\n    // Pop the current node off the stack of open elements.\n\n    // Switch the insertion mode to the original insertion mode.\n\n    // Let the old insertion point have the same value as the current\n    // insertion point. Let the insertion point be just before the\n    // next input character.\n\n    // Increment the parser's script nesting level by one.\n\n    // Prepare the script. This might cause some script to execute,\n    // which might cause new characters to be inserted into the\n    // tokenizer, and might cause the tokenizer to output more tokens,\n    // resulting in a reentrant invocation of the parser.\n\n    // Decrement the parser's script nesting level by one. If the\n    // parser's script nesting level is zero, then set the parser\n    // pause flag to false.\n\n    // Let the insertion point have the value of the old insertion\n    // point. (In other words, restore the insertion point to its\n    // previous value. This value might be the \"undefined\" value.)\n\n    // At this stage, if there is a pending parsing-blocking script,\n    // then:\n\n    // If the script nesting level is not zero:\n\n    //   Set the parser pause flag to true, and abort the processing\n    //   of any nested invocations of the tokenizer, yielding\n    //   control back to the caller. (Tokenization will resume when\n    //   the caller returns to the \"outer\" tree construction stage.)\n\n    //   The tree construction stage of this particular parser is\n    //   being called reentrantly, say from a call to\n    //   document.write().\n\n    // Otherwise:\n\n    //     Run these steps:\n\n    //       Let the script be the pending parsing-blocking\n    //       script. There is no longer a pending\n    //       parsing-blocking script.\n\n    //       Block the tokenizer for this instance of the HTML\n    //       parser, such that the event loop will not run tasks\n    //       that invoke the tokenizer.\n\n    //       If the parser's Document has a style sheet that is\n    //       blocking scripts or the script's \"ready to be\n    //       parser-executed\" flag is not set: spin the event\n    //       loop until the parser's Document has no style sheet\n    //       that is blocking scripts and the script's \"ready to\n    //       be parser-executed\" flag is set.\n\n    //       Unblock the tokenizer for this instance of the HTML\n    //       parser, such that tasks that invoke the tokenizer\n    //       can again be run.\n\n    //       Let the insertion point be just before the next\n    //       input character.\n\n    //       Increment the parser's script nesting level by one\n    //       (it should be zero before this step, so this sets\n    //       it to one).\n\n    //       Execute the script.\n\n    //       Decrement the parser's script nesting level by\n    //       one. If the parser's script nesting level is zero\n    //       (which it always should be at this point), then set\n    //       the parser pause flag to false.\n\n    //       Let the insertion point be undefined again.\n\n    //       If there is once again a pending parsing-blocking\n    //       script, then repeat these steps from step 1.\n\n\n  }\n\n  function stopParsing() {\n    // XXX This is just a temporary implementation to get the parser working.\n    // A full implementation involves scripts and events and the event loop.\n\n    // Remove the link from document to parser.\n    // This is instead of \"set the insertion point to undefined\".\n    // It means that document.write() can't write into the doc anymore.\n    delete doc._parser;\n\n    stack.elements.length = 0; // pop everything off\n\n    // If there is a window object associated with the document\n    // then trigger an load event on it\n    if (doc.defaultView) {\n      doc.defaultView.dispatchEvent(new impl.Event(\"load\",{}));\n    }\n\n  }\n\n  /****\n   * Tokenizer states\n   */\n\n  /**\n   * This file was partially mechanically generated from\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html\n   *\n   * After mechanical conversion, it was further converted from\n   * prose to JS by hand, but the intent is that it is a very\n   * faithful rendering of the HTML tokenization spec in\n   * JavaScript.\n   *\n   * It is not a goal of this tokenizer to detect or report\n   * parse errors.\n   *\n   * XXX The tokenizer is supposed to work with straight UTF32\n   * codepoints. But I don't think it has any dependencies on\n   * any character outside of the BMP so I think it is safe to\n   * pass it UTF16 characters. I don't think it will ever change\n   * state in the middle of a surrogate pair.\n   */\n\n  /*\n   * Each state is represented by a function.  For most states, the\n   * scanner simply passes the next character (as an integer\n   * codepoint) to the current state function and automatically\n   * consumes the character.  If the state function can't process\n   * the character it can call pushback() to push it back to the\n   * scanner.\n   *\n   * Some states require lookahead, though.  If a state function has\n   * a lookahead property, then it is invoked differently.  In this\n   * case, the scanner invokes the function with 3 arguments: 1) the\n   * next codepoint 2) a string of lookahead text 3) a boolean that\n   * is true if the lookahead goes all the way to the EOF. (XXX\n   * actually maybe this third is not necessary... the lookahead\n   * could just include \\uFFFF?)\n   *\n   * If the lookahead property of a state function is an integer, it\n   * specifies the number of characters required. If it is a string,\n   * then the scanner will scan for that string and return all\n   * characters up to and including that sequence, or up to EOF.  If\n   * the lookahead property is a regexp, then the scanner will match\n   * the regexp at the current point and return the matching string.\n   *\n   * States that require lookahead are responsible for explicitly\n   * consuming the characters they process. They do this by\n   * incrementing nextchar by the number of processed characters.\n   */\n  function reconsume(c, new_state) {\n    tokenizer = new_state;\n    nextchar--; // pushback\n  }\n\n  function data_state(c) {\n    switch(c) {\n    case 0x0026: // AMPERSAND\n      return_state = data_state;\n      tokenizer = character_reference_state;\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      if (emitSimpleTag()) // Shortcut for <p>, <dl>, </div> etc.\n        break;\n      tokenizer = tag_open_state;\n      break;\n    case 0x0000: // NULL\n      // Usually null characters emitted by the tokenizer will be\n      // ignored by the tree builder, but sometimes they'll be\n      // converted to \\uFFFD.  I don't want to have the search every\n      // string emitted to replace NULs, so I'll set a flag\n      // if I've emitted a NUL.\n      textrun.push(c);\n      textIncludesNUL = true;\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      // Instead of just pushing a single character and then\n      // coming back to the very same place, lookahead and\n      // emit everything we can at once.\n      /*jshint -W030 */\n      emitCharsWhile(DATATEXT) || textrun.push(c);\n      break;\n    }\n  }\n\n  function rcdata_state(c) {\n    // Save the open tag so we can find a matching close tag\n    switch(c) {\n    case 0x0026: // AMPERSAND\n      return_state = rcdata_state;\n      tokenizer = character_reference_state;\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = rcdata_less_than_sign_state;\n      break;\n    case 0x0000: // NULL\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      textIncludesNUL = true;\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      textrun.push(c);\n      break;\n    }\n  }\n\n  function rawtext_state(c) {\n    switch(c) {\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = rawtext_less_than_sign_state;\n      break;\n    case 0x0000: // NULL\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      /*jshint -W030 */\n      emitCharsWhile(RAWTEXT) || textrun.push(c);\n      break;\n    }\n  }\n\n  function script_data_state(c) {\n    switch(c) {\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = script_data_less_than_sign_state;\n      break;\n    case 0x0000: // NULL\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      /*jshint -W030 */\n      emitCharsWhile(RAWTEXT) || textrun.push(c);\n      break;\n    }\n  }\n\n  function plaintext_state(c) {\n    switch(c) {\n    case 0x0000: // NULL\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      /*jshint -W030 */\n      emitCharsWhile(PLAINTEXT) || textrun.push(c);\n      break;\n    }\n  }\n\n  function tag_open_state(c) {\n    switch(c) {\n    case 0x0021: // EXCLAMATION MARK\n      tokenizer = markup_declaration_open_state;\n      break;\n    case 0x002F: // SOLIDUS\n      tokenizer = end_tag_open_state;\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      beginTagName();\n      reconsume(c, tag_name_state);\n      break;\n    case 0x003F: // QUESTION MARK\n      reconsume(c, bogus_comment_state);\n      break;\n    default:\n      textrun.push(0x003C); // LESS-THAN SIGN\n      reconsume(c, data_state);\n      break;\n    }\n  }\n\n  function end_tag_open_state(c) {\n    switch(c) {\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      beginEndTagName();\n      reconsume(c, tag_name_state);\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      break;\n    case -1: // EOF\n      textrun.push(0x003C); // LESS-THAN SIGN\n      textrun.push(0x002F); // SOLIDUS\n      emitEOF();\n      break;\n    default:\n      reconsume(c, bogus_comment_state);\n      break;\n    }\n  }\n\n  function tag_name_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      tokenizer = before_attribute_name_state;\n      break;\n    case 0x002F: // SOLIDUS\n      tokenizer = self_closing_start_tag_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      emitTag();\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n      tagnamebuf += String.fromCharCode(c + 0x0020);\n      break;\n    case 0x0000: // NULL\n      tagnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      tagnamebuf += getMatchingChars(TAGNAME);\n      break;\n    }\n  }\n\n  function rcdata_less_than_sign_state(c) {\n    /* identical to the RAWTEXT less-than sign state, except s/RAWTEXT/RCDATA/g */\n    if (c === 0x002F) {  // SOLIDUS\n      beginTempBuf();\n      tokenizer = rcdata_end_tag_open_state;\n    }\n    else {\n      textrun.push(0x003C); // LESS-THAN SIGN\n      reconsume(c, rcdata_state);\n    }\n  }\n\n  function rcdata_end_tag_open_state(c) {\n    /* identical to the RAWTEXT (and Script data) end tag open state, except s/RAWTEXT/RCDATA/g */\n    switch(c) {\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      beginEndTagName();\n      reconsume(c, rcdata_end_tag_name_state);\n      break;\n    default:\n      textrun.push(0x003C); // LESS-THAN SIGN\n      textrun.push(0x002F); // SOLIDUS\n      reconsume(c, rcdata_state);\n      break;\n    }\n  }\n\n  function rcdata_end_tag_name_state(c) {\n    /* identical to the RAWTEXT (and Script data) end tag name state, except s/RAWTEXT/RCDATA/g */\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = before_attribute_name_state;\n        return;\n      }\n      break;\n    case 0x002F: // SOLIDUS\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = self_closing_start_tag_state;\n        return;\n      }\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = data_state;\n        emitTag();\n        return;\n      }\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n\n      tagnamebuf += String.fromCharCode(c + 0x0020);\n      tempbuf.push(c);\n      return;\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n\n      tagnamebuf += String.fromCharCode(c);\n      tempbuf.push(c);\n      return;\n    default:\n      break;\n    }\n\n    // If we don't return in one of the cases above, then this was not\n    // an appropriately matching close tag, so back out by emitting all\n    // the characters as text\n    textrun.push(0x003C); // LESS-THAN SIGN\n    textrun.push(0x002F); // SOLIDUS\n    pushAll(textrun, tempbuf);\n    reconsume(c, rcdata_state);\n  }\n\n  function rawtext_less_than_sign_state(c) {\n    /* identical to the RCDATA less-than sign state, except s/RCDATA/RAWTEXT/g\n     */\n    if (c === 0x002F) { // SOLIDUS\n      beginTempBuf();\n      tokenizer = rawtext_end_tag_open_state;\n    }\n    else {\n      textrun.push(0x003C); // LESS-THAN SIGN\n      reconsume(c, rawtext_state);\n    }\n  }\n\n  function rawtext_end_tag_open_state(c) {\n    /* identical to the RCDATA (and Script data) end tag open state, except s/RCDATA/RAWTEXT/g */\n    switch(c) {\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      beginEndTagName();\n      reconsume(c, rawtext_end_tag_name_state);\n      break;\n    default:\n      textrun.push(0x003C); // LESS-THAN SIGN\n      textrun.push(0x002F); // SOLIDUS\n      reconsume(c, rawtext_state);\n      break;\n    }\n  }\n\n  function rawtext_end_tag_name_state(c) {\n    /* identical to the RCDATA (and Script data) end tag name state, except s/RCDATA/RAWTEXT/g */\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = before_attribute_name_state;\n        return;\n      }\n      break;\n    case 0x002F: // SOLIDUS\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = self_closing_start_tag_state;\n        return;\n      }\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = data_state;\n        emitTag();\n        return;\n      }\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n      tagnamebuf += String.fromCharCode(c + 0x0020);\n      tempbuf.push(c);\n      return;\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      tagnamebuf += String.fromCharCode(c);\n      tempbuf.push(c);\n      return;\n    default:\n      break;\n    }\n\n    // If we don't return in one of the cases above, then this was not\n    // an appropriately matching close tag, so back out by emitting all\n    // the characters as text\n    textrun.push(0x003C); // LESS-THAN SIGN\n    textrun.push(0x002F); // SOLIDUS\n    pushAll(textrun,tempbuf);\n    reconsume(c, rawtext_state);\n  }\n\n  function script_data_less_than_sign_state(c) {\n    switch(c) {\n    case 0x002F: // SOLIDUS\n      beginTempBuf();\n      tokenizer = script_data_end_tag_open_state;\n      break;\n    case 0x0021: // EXCLAMATION MARK\n      tokenizer = script_data_escape_start_state;\n      textrun.push(0x003C); // LESS-THAN SIGN\n      textrun.push(0x0021); // EXCLAMATION MARK\n      break;\n    default:\n      textrun.push(0x003C); // LESS-THAN SIGN\n      reconsume(c, script_data_state);\n      break;\n    }\n  }\n\n  function script_data_end_tag_open_state(c) {\n    /* identical to the RCDATA (and RAWTEXT) end tag open state, except s/RCDATA/Script data/g */\n    switch(c) {\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      beginEndTagName();\n      reconsume(c, script_data_end_tag_name_state);\n      break;\n    default:\n      textrun.push(0x003C); // LESS-THAN SIGN\n      textrun.push(0x002F); // SOLIDUS\n      reconsume(c, script_data_state);\n      break;\n    }\n  }\n\n  function script_data_end_tag_name_state(c) {\n    /* identical to the RCDATA (and RAWTEXT) end tag name state, except s/RCDATA/Script data/g */\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = before_attribute_name_state;\n        return;\n      }\n      break;\n    case 0x002F: // SOLIDUS\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = self_closing_start_tag_state;\n        return;\n      }\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = data_state;\n        emitTag();\n        return;\n      }\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n\n      tagnamebuf += String.fromCharCode(c + 0x0020);\n      tempbuf.push(c);\n      return;\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n\n      tagnamebuf += String.fromCharCode(c);\n      tempbuf.push(c);\n      return;\n    default:\n      break;\n    }\n\n    // If we don't return in one of the cases above, then this was not\n    // an appropriately matching close tag, so back out by emitting all\n    // the characters as text\n    textrun.push(0x003C); // LESS-THAN SIGN\n    textrun.push(0x002F); // SOLIDUS\n    pushAll(textrun,tempbuf);\n    reconsume(c, script_data_state);\n  }\n\n  function script_data_escape_start_state(c) {\n    if (c === 0x002D) { // HYPHEN-MINUS\n      tokenizer = script_data_escape_start_dash_state;\n      textrun.push(0x002D); // HYPHEN-MINUS\n    }\n    else {\n      reconsume(c, script_data_state);\n    }\n  }\n\n  function script_data_escape_start_dash_state(c) {\n    if (c === 0x002D) { // HYPHEN-MINUS\n      tokenizer = script_data_escaped_dash_dash_state;\n      textrun.push(0x002D); // HYPHEN-MINUS\n    }\n    else {\n      reconsume(c, script_data_state);\n    }\n  }\n\n  function script_data_escaped_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = script_data_escaped_dash_state;\n      textrun.push(0x002D); // HYPHEN-MINUS\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = script_data_escaped_less_than_sign_state;\n      break;\n    case 0x0000: // NULL\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      textrun.push(c);\n      break;\n    }\n  }\n\n  function script_data_escaped_dash_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = script_data_escaped_dash_dash_state;\n      textrun.push(0x002D); // HYPHEN-MINUS\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = script_data_escaped_less_than_sign_state;\n      break;\n    case 0x0000: // NULL\n      tokenizer = script_data_escaped_state;\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      tokenizer = script_data_escaped_state;\n      textrun.push(c);\n      break;\n    }\n  }\n\n  function script_data_escaped_dash_dash_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      textrun.push(0x002D); // HYPHEN-MINUS\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = script_data_escaped_less_than_sign_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = script_data_state;\n      textrun.push(0x003E); // GREATER-THAN SIGN\n      break;\n    case 0x0000: // NULL\n      tokenizer = script_data_escaped_state;\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      tokenizer = script_data_escaped_state;\n      textrun.push(c);\n      break;\n    }\n  }\n\n  function script_data_escaped_less_than_sign_state(c) {\n    switch(c) {\n    case 0x002F: // SOLIDUS\n      beginTempBuf();\n      tokenizer = script_data_escaped_end_tag_open_state;\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      beginTempBuf();\n      textrun.push(0x003C); // LESS-THAN SIGN\n      reconsume(c, script_data_double_escape_start_state);\n      break;\n    default:\n      textrun.push(0x003C); // LESS-THAN SIGN\n      reconsume(c, script_data_escaped_state);\n      break;\n    }\n  }\n\n  function script_data_escaped_end_tag_open_state(c) {\n    switch(c) {\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      beginEndTagName();\n      reconsume(c, script_data_escaped_end_tag_name_state);\n      break;\n    default:\n      textrun.push(0x003C); // LESS-THAN SIGN\n      textrun.push(0x002F); // SOLIDUS\n      reconsume(c, script_data_escaped_state);\n      break;\n    }\n  }\n\n  function script_data_escaped_end_tag_name_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = before_attribute_name_state;\n        return;\n      }\n      break;\n    case 0x002F: // SOLIDUS\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = self_closing_start_tag_state;\n        return;\n      }\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      if (appropriateEndTag(tagnamebuf)) {\n        tokenizer = data_state;\n        emitTag();\n        return;\n      }\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n      tagnamebuf += String.fromCharCode(c + 0x0020);\n      tempbuf.push(c);\n      return;\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      tagnamebuf += String.fromCharCode(c);\n      tempbuf.push(c);\n      return;\n    default:\n      break;\n    }\n\n    // We get here in the default case, and if the closing tagname\n    // is not an appropriate tagname.\n    textrun.push(0x003C); // LESS-THAN SIGN\n    textrun.push(0x002F); // SOLIDUS\n    pushAll(textrun,tempbuf);\n    reconsume(c, script_data_escaped_state);\n  }\n\n  function script_data_double_escape_start_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n    case 0x002F: // SOLIDUS\n    case 0x003E: // GREATER-THAN SIGN\n      if (buf2str(tempbuf) === \"script\") {\n        tokenizer = script_data_double_escaped_state;\n      }\n      else {\n        tokenizer = script_data_escaped_state;\n      }\n      textrun.push(c);\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n      tempbuf.push(c + 0x0020);\n      textrun.push(c);\n      break;\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      tempbuf.push(c);\n      textrun.push(c);\n      break;\n    default:\n      reconsume(c, script_data_escaped_state);\n      break;\n    }\n  }\n\n  function script_data_double_escaped_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = script_data_double_escaped_dash_state;\n      textrun.push(0x002D); // HYPHEN-MINUS\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = script_data_double_escaped_less_than_sign_state;\n      textrun.push(0x003C); // LESS-THAN SIGN\n      break;\n    case 0x0000: // NULL\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      textrun.push(c);\n      break;\n    }\n  }\n\n  function script_data_double_escaped_dash_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = script_data_double_escaped_dash_dash_state;\n      textrun.push(0x002D); // HYPHEN-MINUS\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = script_data_double_escaped_less_than_sign_state;\n      textrun.push(0x003C); // LESS-THAN SIGN\n      break;\n    case 0x0000: // NULL\n      tokenizer = script_data_double_escaped_state;\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      tokenizer = script_data_double_escaped_state;\n      textrun.push(c);\n      break;\n    }\n  }\n\n  function script_data_double_escaped_dash_dash_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      textrun.push(0x002D); // HYPHEN-MINUS\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      tokenizer = script_data_double_escaped_less_than_sign_state;\n      textrun.push(0x003C); // LESS-THAN SIGN\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = script_data_state;\n      textrun.push(0x003E); // GREATER-THAN SIGN\n      break;\n    case 0x0000: // NULL\n      tokenizer = script_data_double_escaped_state;\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      tokenizer = script_data_double_escaped_state;\n      textrun.push(c);\n      break;\n    }\n  }\n\n  function script_data_double_escaped_less_than_sign_state(c) {\n    if (c === 0x002F) { // SOLIDUS\n      beginTempBuf();\n      tokenizer = script_data_double_escape_end_state;\n      textrun.push(0x002F); // SOLIDUS\n    }\n    else {\n      reconsume(c, script_data_double_escaped_state);\n    }\n  }\n\n  function script_data_double_escape_end_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n    case 0x002F: // SOLIDUS\n    case 0x003E: // GREATER-THAN SIGN\n      if (buf2str(tempbuf) === \"script\") {\n        tokenizer = script_data_escaped_state;\n      }\n      else {\n        tokenizer = script_data_double_escaped_state;\n      }\n      textrun.push(c);\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n      tempbuf.push(c + 0x0020);\n      textrun.push(c);\n      break;\n    case 0x0061:  // [a-z]\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\n      tempbuf.push(c);\n      textrun.push(c);\n      break;\n    default:\n      reconsume(c, script_data_double_escaped_state);\n      break;\n    }\n  }\n\n  function before_attribute_name_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      /* Ignore the character. */\n      break;\n    // For SOLIDUS, GREATER-THAN SIGN, and EOF, spec says \"reconsume in\n    // the after attribute name state\", but in our implementation that\n    // state always has an active attribute in attrnamebuf.  Just clone\n    // the rules here, without the addAttribute business.\n    case 0x002F: // SOLIDUS\n      tokenizer = self_closing_start_tag_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      emitTag();\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    case 0x003D: // EQUALS SIGN\n      beginAttrName();\n      attrnamebuf += String.fromCharCode(c);\n      tokenizer = attribute_name_state;\n      break;\n    default:\n      if (handleSimpleAttribute()) break;\n      beginAttrName();\n      reconsume(c, attribute_name_state);\n      break;\n    }\n  }\n\n  // beginAttrName() must have been called before this point\n  // There is an active attribute in attrnamebuf (but not attrvaluebuf)\n  function attribute_name_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n    case 0x002F: // SOLIDUS\n    case 0x003E: // GREATER-THAN SIGN\n    case -1: // EOF\n      reconsume(c, after_attribute_name_state);\n      break;\n    case 0x003D: // EQUALS SIGN\n      tokenizer = before_attribute_value_state;\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n      attrnamebuf += String.fromCharCode(c + 0x0020);\n      break;\n    case 0x0000: // NULL\n      attrnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case 0x0022: // QUOTATION MARK\n    case 0x0027: // APOSTROPHE\n    case 0x003C: // LESS-THAN SIGN\n      /* falls through */\n    default:\n      attrnamebuf += getMatchingChars(ATTRNAME);\n      break;\n    }\n  }\n\n  // There is an active attribute in attrnamebuf, but not yet in attrvaluebuf.\n  function after_attribute_name_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      /* Ignore the character. */\n      break;\n    case 0x002F: // SOLIDUS\n      // Keep in sync with before_attribute_name_state.\n      addAttribute(attrnamebuf);\n      tokenizer = self_closing_start_tag_state;\n      break;\n    case 0x003D: // EQUALS SIGN\n      tokenizer = before_attribute_value_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      // Keep in sync with before_attribute_name_state.\n      tokenizer = data_state;\n      addAttribute(attrnamebuf);\n      emitTag();\n      break;\n    case -1: // EOF\n      // Keep in sync with before_attribute_name_state.\n      addAttribute(attrnamebuf);\n      emitEOF();\n      break;\n    default:\n      addAttribute(attrnamebuf);\n      beginAttrName();\n      reconsume(c, attribute_name_state);\n      break;\n    }\n  }\n\n  function before_attribute_value_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      /* Ignore the character. */\n      break;\n    case 0x0022: // QUOTATION MARK\n      beginAttrValue();\n      tokenizer = attribute_value_double_quoted_state;\n      break;\n    case 0x0027: // APOSTROPHE\n      beginAttrValue();\n      tokenizer = attribute_value_single_quoted_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      /* falls through */\n    default:\n      beginAttrValue();\n      reconsume(c, attribute_value_unquoted_state);\n      break;\n    }\n  }\n\n  function attribute_value_double_quoted_state(c) {\n    switch(c) {\n    case 0x0022: // QUOTATION MARK\n      addAttribute(attrnamebuf, attrvaluebuf);\n      tokenizer = after_attribute_value_quoted_state;\n      break;\n    case 0x0026: // AMPERSAND\n      return_state = attribute_value_double_quoted_state;\n      tokenizer = character_reference_state;\n      break;\n    case 0x0000: // NULL\n      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    case 0x000A: // LF\n      // this could be a converted \\r, so don't use getMatchingChars\n      attrvaluebuf += String.fromCharCode(c);\n      break;\n    default:\n      attrvaluebuf += getMatchingChars(DBLQUOTEATTRVAL);\n      break;\n    }\n  }\n\n  function attribute_value_single_quoted_state(c) {\n    switch(c) {\n    case 0x0027: // APOSTROPHE\n      addAttribute(attrnamebuf, attrvaluebuf);\n      tokenizer = after_attribute_value_quoted_state;\n      break;\n    case 0x0026: // AMPERSAND\n      return_state = attribute_value_single_quoted_state;\n      tokenizer = character_reference_state;\n      break;\n    case 0x0000: // NULL\n      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    case 0x000A: // LF\n      // this could be a converted \\r, so don't use getMatchingChars\n      attrvaluebuf += String.fromCharCode(c);\n      break;\n    default:\n      attrvaluebuf += getMatchingChars(SINGLEQUOTEATTRVAL);\n      break;\n    }\n  }\n\n  function attribute_value_unquoted_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      addAttribute(attrnamebuf, attrvaluebuf);\n      tokenizer = before_attribute_name_state;\n      break;\n    case 0x0026: // AMPERSAND\n      return_state = attribute_value_unquoted_state;\n      tokenizer = character_reference_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      addAttribute(attrnamebuf, attrvaluebuf);\n      tokenizer = data_state;\n      emitTag();\n      break;\n    case 0x0000: // NULL\n      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case -1: // EOF\n      nextchar--; // pushback\n      tokenizer = data_state;\n      break;\n    case 0x0022: // QUOTATION MARK\n    case 0x0027: // APOSTROPHE\n    case 0x003C: // LESS-THAN SIGN\n    case 0x003D: // EQUALS SIGN\n    case 0x0060: // GRAVE ACCENT\n      /* falls through */\n    default:\n      attrvaluebuf += getMatchingChars(UNQUOTEDATTRVAL);\n      break;\n    }\n  }\n\n  function after_attribute_value_quoted_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      tokenizer = before_attribute_name_state;\n      break;\n    case 0x002F: // SOLIDUS\n      tokenizer = self_closing_start_tag_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      emitTag();\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      reconsume(c, before_attribute_name_state);\n      break;\n    }\n  }\n\n  function self_closing_start_tag_state(c) {\n    switch(c) {\n    case 0x003E: // GREATER-THAN SIGN\n      // Set the <i>self-closing flag</i> of the current tag token.\n      tokenizer = data_state;\n      emitSelfClosingTag(true);\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    default:\n      reconsume(c, before_attribute_name_state);\n      break;\n    }\n  }\n\n  function bogus_comment_state(c, lookahead, eof) {\n    var len = lookahead.length;\n\n    if (eof) {\n      nextchar += len-1; // don't consume the eof\n    }\n    else {\n      nextchar += len;\n    }\n\n    var comment = lookahead.substring(0, len-1);\n\n    comment = comment.replace(/\\u0000/g,\"\\uFFFD\");\n    comment = comment.replace(/\\u000D\\u000A/g,\"\\u000A\");\n    comment = comment.replace(/\\u000D/g,\"\\u000A\");\n\n    insertToken(COMMENT, comment);\n    tokenizer = data_state;\n  }\n  bogus_comment_state.lookahead = \">\";\n\n  function markup_declaration_open_state(c, lookahead, eof) {\n    if (lookahead[0] === \"-\" && lookahead[1] === \"-\") {\n      nextchar += 2;\n      beginComment();\n      tokenizer = comment_start_state;\n      return;\n    }\n\n    if (lookahead.toUpperCase() === \"DOCTYPE\") {\n      nextchar += 7;\n      tokenizer = doctype_state;\n    }\n    else if (lookahead === \"[CDATA[\" && cdataAllowed()) {\n      nextchar += 7;\n      tokenizer = cdata_section_state;\n    }\n    else {\n      tokenizer = bogus_comment_state;\n    }\n  }\n  markup_declaration_open_state.lookahead = 7;\n\n  function comment_start_state(c) {\n    beginComment();\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = comment_start_dash_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      insertToken(COMMENT, buf2str(commentbuf));\n      break; /* see comment in comment end state */\n    default:\n      reconsume(c, comment_state);\n      break;\n    }\n  }\n\n  function comment_start_dash_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = comment_end_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      insertToken(COMMENT, buf2str(commentbuf));\n      break;\n    case -1: // EOF\n      insertToken(COMMENT, buf2str(commentbuf));\n      emitEOF();\n      break; /* see comment in comment end state */\n    default:\n      commentbuf.push(0x002D /* HYPHEN-MINUS */);\n      reconsume(c, comment_state);\n      break;\n    }\n  }\n\n  function comment_state(c) {\n    switch(c) {\n    case 0x003C: // LESS-THAN SIGN\n      commentbuf.push(c);\n      tokenizer = comment_less_than_sign_state;\n      break;\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = comment_end_dash_state;\n      break;\n    case 0x0000: // NULL\n      commentbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case -1: // EOF\n      insertToken(COMMENT, buf2str(commentbuf));\n      emitEOF();\n      break; /* see comment in comment end state */\n    default:\n      commentbuf.push(c);\n      break;\n    }\n  }\n\n  function comment_less_than_sign_state(c) {\n    switch(c) {\n    case 0x0021: // EXCLAMATION MARK\n      commentbuf.push(c);\n      tokenizer = comment_less_than_sign_bang_state;\n      break;\n    case 0x003C: // LESS-THAN SIGN\n      commentbuf.push(c);\n      break;\n    default:\n      reconsume(c, comment_state);\n      break;\n    }\n  }\n\n  function comment_less_than_sign_bang_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = comment_less_than_sign_bang_dash_state;\n      break;\n    default:\n      reconsume(c, comment_state);\n      break;\n    }\n  }\n\n  function comment_less_than_sign_bang_dash_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = comment_less_than_sign_bang_dash_dash_state;\n      break;\n    default:\n      reconsume(c, comment_end_dash_state);\n      break;\n    }\n  }\n\n  function comment_less_than_sign_bang_dash_dash_state(c) {\n    switch(c) {\n    case 0x003E: // GREATER-THAN SIGN\n    case -1: // EOF\n      reconsume(c, comment_end_state);\n      break;\n    default:\n      // parse error\n      reconsume(c, comment_end_state);\n      break;\n    }\n  }\n\n  function comment_end_dash_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      tokenizer = comment_end_state;\n      break;\n    case -1: // EOF\n      insertToken(COMMENT, buf2str(commentbuf));\n      emitEOF();\n      break; /* see comment in comment end state */\n    default:\n      commentbuf.push(0x002D /* HYPHEN-MINUS */);\n      reconsume(c, comment_state);\n      break;\n    }\n  }\n\n  function comment_end_state(c) {\n    switch(c) {\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      insertToken(COMMENT, buf2str(commentbuf));\n      break;\n    case 0x0021: // EXCLAMATION MARK\n      tokenizer = comment_end_bang_state;\n      break;\n    case 0x002D: // HYPHEN-MINUS\n      commentbuf.push(0x002D);\n      break;\n    case -1: // EOF\n      insertToken(COMMENT, buf2str(commentbuf));\n      emitEOF();\n      break; /* For security reasons: otherwise, hostile user could put a script in a comment e.g. in a blog comment and then DOS the server so that the end tag isn't read, and then the commented script tag would be treated as live code */\n    default:\n      commentbuf.push(0x002D);\n      commentbuf.push(0x002D);\n      reconsume(c, comment_state);\n      break;\n    }\n  }\n\n  function comment_end_bang_state(c) {\n    switch(c) {\n    case 0x002D: // HYPHEN-MINUS\n      commentbuf.push(0x002D);\n      commentbuf.push(0x002D);\n      commentbuf.push(0x0021);\n      tokenizer = comment_end_dash_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      insertToken(COMMENT, buf2str(commentbuf));\n      break;\n    case -1: // EOF\n      insertToken(COMMENT, buf2str(commentbuf));\n      emitEOF();\n      break; /* see comment in comment end state */\n    default:\n      commentbuf.push(0x002D);\n      commentbuf.push(0x002D);\n      commentbuf.push(0x0021);\n      reconsume(c, comment_state);\n      break;\n    }\n  }\n\n  function doctype_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      tokenizer = before_doctype_name_state;\n      break;\n    case -1: // EOF\n      beginDoctype();\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      reconsume(c, before_doctype_name_state);\n      break;\n    }\n  }\n\n  function before_doctype_name_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      /* Ignore the character. */\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n      beginDoctype();\n      doctypenamebuf.push(c + 0x0020);\n      tokenizer = doctype_name_state;\n      break;\n    case 0x0000: // NULL\n      beginDoctype();\n      doctypenamebuf.push(0xFFFD);\n      tokenizer = doctype_name_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      beginDoctype();\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      beginDoctype();\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      beginDoctype();\n      doctypenamebuf.push(c);\n      tokenizer = doctype_name_state;\n      break;\n    }\n  }\n\n  function doctype_name_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      tokenizer = after_doctype_name_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case 0x0041:  // [A-Z]\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\n      doctypenamebuf.push(c + 0x0020);\n      break;\n    case 0x0000: // NULL\n      doctypenamebuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      doctypenamebuf.push(c);\n      break;\n    }\n  }\n\n  function after_doctype_name_state(c, lookahead, eof) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      /* Ignore the character. */\n      nextchar += 1;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      nextchar += 1;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      lookahead = lookahead.toUpperCase();\n      if (lookahead === \"PUBLIC\") {\n        nextchar += 6;\n        tokenizer = after_doctype_public_keyword_state;\n      }\n      else if (lookahead === \"SYSTEM\") {\n        nextchar += 6;\n        tokenizer = after_doctype_system_keyword_state;\n      }\n      else {\n        forcequirks();\n        tokenizer = bogus_doctype_state;\n      }\n      break;\n    }\n  }\n  after_doctype_name_state.lookahead = 6;\n\n  function after_doctype_public_keyword_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      tokenizer = before_doctype_public_identifier_state;\n      break;\n    case 0x0022: // QUOTATION MARK\n      beginDoctypePublicId();\n      tokenizer = doctype_public_identifier_double_quoted_state;\n      break;\n    case 0x0027: // APOSTROPHE\n      beginDoctypePublicId();\n      tokenizer = doctype_public_identifier_single_quoted_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      forcequirks();\n      tokenizer = bogus_doctype_state;\n      break;\n    }\n  }\n\n  function before_doctype_public_identifier_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      /* Ignore the character. */\n      break;\n    case 0x0022: // QUOTATION MARK\n      beginDoctypePublicId();\n      tokenizer = doctype_public_identifier_double_quoted_state;\n      break;\n    case 0x0027: // APOSTROPHE\n      beginDoctypePublicId();\n      tokenizer = doctype_public_identifier_single_quoted_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      forcequirks();\n      tokenizer = bogus_doctype_state;\n      break;\n    }\n  }\n\n  function doctype_public_identifier_double_quoted_state(c) {\n    switch(c) {\n    case 0x0022: // QUOTATION MARK\n      tokenizer = after_doctype_public_identifier_state;\n      break;\n    case 0x0000: // NULL\n      doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      doctypepublicbuf.push(c);\n      break;\n    }\n  }\n\n  function doctype_public_identifier_single_quoted_state(c) {\n    switch(c) {\n    case 0x0027: // APOSTROPHE\n      tokenizer = after_doctype_public_identifier_state;\n      break;\n    case 0x0000: // NULL\n      doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      doctypepublicbuf.push(c);\n      break;\n    }\n  }\n\n  function after_doctype_public_identifier_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      tokenizer = between_doctype_public_and_system_identifiers_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case 0x0022: // QUOTATION MARK\n      beginDoctypeSystemId();\n      tokenizer = doctype_system_identifier_double_quoted_state;\n      break;\n    case 0x0027: // APOSTROPHE\n      beginDoctypeSystemId();\n      tokenizer = doctype_system_identifier_single_quoted_state;\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      forcequirks();\n      tokenizer = bogus_doctype_state;\n      break;\n    }\n  }\n\n  function between_doctype_public_and_system_identifiers_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE Ignore the character.\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case 0x0022: // QUOTATION MARK\n      beginDoctypeSystemId();\n      tokenizer = doctype_system_identifier_double_quoted_state;\n      break;\n    case 0x0027: // APOSTROPHE\n      beginDoctypeSystemId();\n      tokenizer = doctype_system_identifier_single_quoted_state;\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      forcequirks();\n      tokenizer = bogus_doctype_state;\n      break;\n    }\n  }\n\n  function after_doctype_system_keyword_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      tokenizer = before_doctype_system_identifier_state;\n      break;\n    case 0x0022: // QUOTATION MARK\n      beginDoctypeSystemId();\n      tokenizer = doctype_system_identifier_double_quoted_state;\n      break;\n    case 0x0027: // APOSTROPHE\n      beginDoctypeSystemId();\n      tokenizer = doctype_system_identifier_single_quoted_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      forcequirks();\n      tokenizer = bogus_doctype_state;\n      break;\n    }\n  }\n\n  function before_doctype_system_identifier_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE Ignore the character.\n      break;\n    case 0x0022: // QUOTATION MARK\n      beginDoctypeSystemId();\n      tokenizer = doctype_system_identifier_double_quoted_state;\n      break;\n    case 0x0027: // APOSTROPHE\n      beginDoctypeSystemId();\n      tokenizer = doctype_system_identifier_single_quoted_state;\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      forcequirks();\n      tokenizer = bogus_doctype_state;\n      break;\n    }\n  }\n\n  function doctype_system_identifier_double_quoted_state(c) {\n    switch(c) {\n    case 0x0022: // QUOTATION MARK\n      tokenizer = after_doctype_system_identifier_state;\n      break;\n    case 0x0000: // NULL\n      doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      doctypesystembuf.push(c);\n      break;\n    }\n  }\n\n  function doctype_system_identifier_single_quoted_state(c) {\n    switch(c) {\n    case 0x0027: // APOSTROPHE\n      tokenizer = after_doctype_system_identifier_state;\n      break;\n    case 0x0000: // NULL\n      doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      forcequirks();\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      doctypesystembuf.push(c);\n      break;\n    }\n  }\n\n  function after_doctype_system_identifier_state(c) {\n    switch(c) {\n    case 0x0009: // CHARACTER TABULATION (tab)\n    case 0x000A: // LINE FEED (LF)\n    case 0x000C: // FORM FEED (FF)\n    case 0x0020: // SPACE\n      /* Ignore the character. */\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      forcequirks();\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      tokenizer = bogus_doctype_state;\n      /* This does *not* set the DOCTYPE token's force-quirks flag. */\n      break;\n    }\n  }\n\n  function bogus_doctype_state(c) {\n    switch(c) {\n    case 0x003E: // GREATER-THAN SIGN\n      tokenizer = data_state;\n      emitDoctype();\n      break;\n    case -1: // EOF\n      emitDoctype();\n      emitEOF();\n      break;\n    default:\n      /* Ignore the character. */\n      break;\n    }\n  }\n\n  function cdata_section_state(c) {\n    switch(c) {\n    case 0x005D: // RIGHT SQUARE BRACKET\n      tokenizer = cdata_section_bracket_state;\n      break;\n    case -1: // EOF\n      emitEOF();\n      break;\n    case 0x0000: // NULL\n      textIncludesNUL = true;\n      /* fall through */\n    default:\n      // Instead of just pushing a single character and then\n      // coming back to the very same place, lookahead and\n      // emit everything we can at once.\n      /*jshint -W030 */\n      emitCharsWhile(CDATATEXT) || textrun.push(c);\n      break;\n    }\n  }\n\n  function cdata_section_bracket_state(c) {\n    switch(c) {\n    case 0x005D: // RIGHT SQUARE BRACKET\n      tokenizer = cdata_section_end_state;\n      break;\n    default:\n      textrun.push(0x005D);\n      reconsume(c, cdata_section_state);\n      break;\n    }\n  }\n\n  function cdata_section_end_state(c) {\n    switch(c) {\n    case 0x005D: // RIGHT SQUARE BRACKET\n      textrun.push(0x005D);\n      break;\n    case 0x003E: // GREATER-THAN SIGN\n      flushText();\n      tokenizer = data_state;\n      break;\n    default:\n      textrun.push(0x005D);\n      textrun.push(0x005D);\n      reconsume(c, cdata_section_state);\n      break;\n    }\n  }\n\n  function character_reference_state(c) {\n    beginTempBuf();\n    tempbuf.push(0x0026);\n    switch(c) {\n    case 0x0009: // TAB\n    case 0x000A: // LINE FEED\n    case 0x000C: // FORM FEED\n    case 0x0020: // SPACE\n    case 0x003C: // LESS-THAN SIGN\n    case 0x0026: // AMPERSAND\n    case -1: // EOF\n      reconsume(c, character_reference_end_state);\n      break;\n    case 0x0023: // NUMBER SIGN\n      tempbuf.push(c);\n      tokenizer = numeric_character_reference_state;\n      break;\n    default:\n      reconsume(c, named_character_reference_state);\n      break;\n    }\n  }\n\n  function named_character_reference_state(c) {\n    NAMEDCHARREF.lastIndex = nextchar; // w/ lookahead no char has been consumed\n    var matched = NAMEDCHARREF.exec(chars);\n    if (!matched) throw new Error(\"should never happen\");\n    var name = matched[1];\n    if (!name) {\n      // If no match can be made, switch to the character reference end state\n      tokenizer = character_reference_end_state;\n      return;\n    }\n\n    // Consume the matched characters and append them to temporary buffer\n    nextchar += name.length;\n    pushAll(tempbuf, str2buf(name));\n\n    switch(return_state) {\n    case attribute_value_double_quoted_state:\n    case attribute_value_single_quoted_state:\n    case attribute_value_unquoted_state:\n      // If the character reference was consumed as part of an attribute...\n      if (name[name.length-1] !== ';') { // ...and the last char is not ;\n        if (/[=A-Za-z0-9]/.test(chars[nextchar])) {\n          tokenizer = character_reference_end_state;\n          return;\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    beginTempBuf();\n    var rv = namedCharRefs[name];\n    if (typeof rv === 'number') {\n      tempbuf.push(rv);\n    } else {\n      pushAll(tempbuf, rv);\n    }\n    tokenizer = character_reference_end_state;\n  }\n  // We might need to pause tokenization until we have enough characters\n  // in the buffer for longest possible character reference.\n  named_character_reference_state.lookahead = -NAMEDCHARREF_MAXLEN;\n\n  function numeric_character_reference_state(c) {\n    character_reference_code = 0;\n    switch(c) {\n    case 0x0078: // x\n    case 0x0058: // X\n      tempbuf.push(c);\n      tokenizer = hexadecimal_character_reference_start_state;\n      break;\n    default:\n      reconsume(c, decimal_character_reference_start_state);\n      break;\n    }\n  }\n\n  function hexadecimal_character_reference_start_state(c) {\n    switch(c) {\n    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:\n    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]\n    case 0x0041: case 0x0042: case 0x0043: case 0x0044: case 0x0045:\n    case 0x0046: // [A-F]\n    case 0x0061: case 0x0062: case 0x0063: case 0x0064: case 0x0065:\n    case 0x0066: // [a-f]\n      reconsume(c, hexadecimal_character_reference_state);\n      break;\n    default:\n      reconsume(c, character_reference_end_state);\n      break;\n    }\n  }\n\n  function decimal_character_reference_start_state(c) {\n    switch(c) {\n    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:\n    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]\n      reconsume(c, decimal_character_reference_state);\n      break;\n    default:\n      reconsume(c, character_reference_end_state);\n      break;\n    }\n  }\n\n  function hexadecimal_character_reference_state(c) {\n    switch(c) {\n    case 0x0041: case 0x0042: case 0x0043: case 0x0044: case 0x0045:\n    case 0x0046: // [A-F]\n      character_reference_code *= 16;\n      character_reference_code += (c - 0x0037);\n      break;\n    case 0x0061: case 0x0062: case 0x0063: case 0x0064: case 0x0065:\n    case 0x0066: // [a-f]\n      character_reference_code *= 16;\n      character_reference_code += (c - 0x0057);\n      break;\n    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:\n    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]\n      character_reference_code *= 16;\n      character_reference_code += (c - 0x0030);\n      break;\n    case 0x003B: // SEMICOLON\n      tokenizer = numeric_character_reference_end_state;\n      break;\n    default:\n      reconsume(c, numeric_character_reference_end_state);\n      break;\n    }\n  }\n\n  function decimal_character_reference_state(c) {\n    switch(c) {\n    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:\n    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]\n      character_reference_code *= 10;\n      character_reference_code += (c - 0x0030);\n      break;\n    case 0x003B: // SEMICOLON\n      tokenizer = numeric_character_reference_end_state;\n      break;\n    default:\n      reconsume(c, numeric_character_reference_end_state);\n      break;\n    }\n  }\n\n  function numeric_character_reference_end_state(c) {\n    if (character_reference_code in numericCharRefReplacements) {\n      character_reference_code = numericCharRefReplacements[character_reference_code];\n    } else if (character_reference_code > 0x10FFFF || (character_reference_code >= 0xD800 && character_reference_code < 0xE000)) {\n      character_reference_code = 0xFFFD;\n    }\n\n    beginTempBuf();\n    if (character_reference_code <= 0xFFFF) {\n      tempbuf.push(character_reference_code);\n    } else {\n      character_reference_code = character_reference_code - 0x10000;\n      /* jshint bitwise: false */\n      tempbuf.push(0xD800 + (character_reference_code >> 10));\n      tempbuf.push(0xDC00 + (character_reference_code & 0x03FF));\n    }\n    reconsume(c, character_reference_end_state);\n  }\n\n  function character_reference_end_state(c) {\n    switch(return_state) {\n    case attribute_value_double_quoted_state:\n    case attribute_value_single_quoted_state:\n    case attribute_value_unquoted_state:\n      // append each character to the current attribute's value\n      attrvaluebuf += buf2str(tempbuf);\n      break;\n    default:\n      pushAll(textrun, tempbuf);\n      break;\n    }\n    reconsume(c, return_state);\n  }\n\n  /***\n   * The tree builder insertion modes\n   */\n\n  // 11.2.5.4.1 The \"initial\" insertion mode\n  function initial_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      value = value.replace(LEADINGWS, \"\"); // Ignore spaces\n      if (value.length === 0) return; // Are we done?\n      break; // Handle anything non-space text below\n    case 4: // COMMENT\n      doc._appendChild(doc.createComment(value));\n      return;\n    case 5: // DOCTYPE\n      var name = value;\n      var publicid = arg3;\n      var systemid = arg4;\n      // Use the constructor directly instead of\n      // implementation.createDocumentType because the create\n      // function throws errors on invalid characters, and\n      // we don't want the parser to throw them.\n      doc.appendChild(new DocumentType(doc, name, publicid, systemid));\n\n      // Note that there is no public API for setting quirks mode We can\n      // do this here because we have access to implementation details\n      if (force_quirks ||\n        name.toLowerCase() !== \"html\" ||\n        quirkyPublicIds.test(publicid) ||\n        (systemid && systemid.toLowerCase() === quirkySystemId) ||\n        (systemid === undefined &&\n         conditionallyQuirkyPublicIds.test(publicid)))\n        doc._quirks = true;\n      else if (limitedQuirkyPublicIds.test(publicid) ||\n           (systemid !== undefined &&\n            conditionallyQuirkyPublicIds.test(publicid)))\n        doc._limitedQuirks = true;\n      parser = before_html_mode;\n      return;\n    }\n\n    // tags or non-whitespace text\n    doc._quirks = true;\n    parser = before_html_mode;\n    parser(t,value,arg3,arg4);\n  }\n\n  // 11.2.5.4.2 The \"before html\" insertion mode\n  function before_html_mode(t,value,arg3,arg4) {\n    var elt;\n    switch(t) {\n    case 1: // TEXT\n      value = value.replace(LEADINGWS, \"\"); // Ignore spaces\n      if (value.length === 0) return; // Are we done?\n      break; // Handle anything non-space text below\n    case 5: // DOCTYPE\n      /* ignore the token */\n      return;\n    case 4: // COMMENT\n      doc._appendChild(doc.createComment(value));\n      return;\n    case 2: // TAG\n      if (value === \"html\") {\n        elt = createHTMLElt(doc, value, arg3);\n        stack.push(elt);\n        doc.appendChild(elt);\n        // XXX: handle application cache here\n        parser = before_head_mode;\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"html\":\n      case \"head\":\n      case \"body\":\n      case \"br\":\n        break;  // fall through on these\n      default:\n        return; // ignore most end tags\n      }\n    }\n\n    // Anything that didn't get handled above is handled like this:\n    elt = createHTMLElt(doc, \"html\", null);\n    stack.push(elt);\n    doc.appendChild(elt);\n    // XXX: handle application cache here\n    parser = before_head_mode;\n    parser(t,value,arg3,arg4);\n  }\n\n  // 11.2.5.4.3 The \"before head\" insertion mode\n  function before_head_mode(t,value,arg3,arg4) {\n    switch(t) {\n    case 1: // TEXT\n      value = value.replace(LEADINGWS, \"\");  // Ignore spaces\n      if (value.length === 0) return; // Are we done?\n      break;  // Handle anything non-space text below\n    case 5: // DOCTYPE\n      /* ignore the token */\n      return;\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t,value,arg3,arg4);\n        return;\n      case \"head\":\n        var elt = insertHTMLElement(value, arg3);\n        head_element_pointer = elt;\n        parser = in_head_mode;\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"html\":\n      case \"head\":\n      case \"body\":\n      case \"br\":\n        break;\n      default:\n        return; // ignore most end tags\n      }\n    }\n\n    // If not handled explicitly above\n    before_head_mode(TAG, \"head\", null); // create a head tag\n    parser(t, value, arg3, arg4); // then try again with this token\n  }\n\n  function in_head_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      var ws = value.match(LEADINGWS);\n      if (ws) {\n        insertText(ws[0]);\n        value = value.substring(ws[0].length);\n      }\n      if (value.length === 0) return;\n      break; // Handle non-whitespace below\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 5: // DOCTYPE\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      case \"meta\":\n        // XXX:\n        // May need to change the encoding based on this tag\n        /* falls through */\n      case \"base\":\n      case \"basefont\":\n      case \"bgsound\":\n      case \"link\":\n        insertHTMLElement(value, arg3);\n        stack.pop();\n        return;\n      case \"title\":\n        parseRCDATA(value, arg3);\n        return;\n      case \"noscript\":\n        if (!scripting_enabled) {\n          insertHTMLElement(value, arg3);\n          parser = in_head_noscript_mode;\n          return;\n        }\n        // Otherwise, if scripting is enabled...\n        /* falls through */\n      case \"noframes\":\n      case \"style\":\n        parseRawText(value,arg3);\n        return;\n      case \"script\":\n        insertElement(function(doc) {\n          var elt = createHTMLElt(doc, value, arg3);\n          elt._parser_inserted = true;\n          elt._force_async = false;\n          if (fragment) elt._already_started = true;\n          flushText();\n          return elt;\n        });\n        tokenizer = script_data_state;\n        originalInsertionMode = parser;\n        parser = text_mode;\n        return;\n      case \"template\":\n        insertHTMLElement(value, arg3);\n        afe.insertMarker();\n        frameset_ok = false;\n        parser = in_template_mode;\n        templateInsertionModes.push(parser);\n        return;\n      case \"head\":\n        return; // ignore it\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"head\":\n        stack.pop();\n        parser = after_head_mode;\n        return;\n      case \"body\":\n      case \"html\":\n      case \"br\":\n        break; // handle these at the bottom of the function\n      case \"template\":\n        if (!stack.contains(\"template\")) {\n          return;\n        }\n        stack.generateImpliedEndTags(null, \"thorough\");\n        stack.popTag(\"template\");\n        afe.clearToMarker();\n        templateInsertionModes.pop();\n        resetInsertionMode();\n        return;\n      default:\n        // ignore any other end tag\n        return;\n      }\n      break;\n    }\n\n    // If not handled above\n    in_head_mode(ENDTAG, \"head\", null);   // synthetic </head>\n    parser(t, value, arg3, arg4);   // Then redo this one\n  }\n\n  // 13.2.5.4.5 The \"in head noscript\" insertion mode\n  function in_head_noscript_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 5: // DOCTYPE\n      return;\n    case 4: // COMMENT\n      in_head_mode(t, value);\n      return;\n    case 1: // TEXT\n      var ws = value.match(LEADINGWS);\n      if (ws) {\n        in_head_mode(t, ws[0]);\n        value = value.substring(ws[0].length);\n      }\n      if (value.length === 0) return; // no more text\n      break; // Handle non-whitespace below\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      case \"basefont\":\n      case \"bgsound\":\n      case \"link\":\n      case \"meta\":\n      case \"noframes\":\n      case \"style\":\n        in_head_mode(t, value, arg3);\n        return;\n      case \"head\":\n      case \"noscript\":\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"noscript\":\n        stack.pop();\n        parser = in_head_mode;\n        return;\n      case \"br\":\n        break;  // goes to the outer default\n      default:\n        return; // ignore other end tags\n      }\n      break;\n    }\n\n    // If not handled above\n    in_head_noscript_mode(ENDTAG, \"noscript\", null);\n    parser(t, value, arg3, arg4);\n  }\n\n  function after_head_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      var ws = value.match(LEADINGWS);\n      if (ws) {\n        insertText(ws[0]);\n        value = value.substring(ws[0].length);\n      }\n      if (value.length === 0) return;\n      break; // Handle non-whitespace below\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 5: // DOCTYPE\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      case \"body\":\n        insertHTMLElement(value, arg3);\n        frameset_ok = false;\n        parser = in_body_mode;\n        return;\n      case \"frameset\":\n        insertHTMLElement(value, arg3);\n        parser = in_frameset_mode;\n        return;\n      case \"base\":\n      case \"basefont\":\n      case \"bgsound\":\n      case \"link\":\n      case \"meta\":\n      case \"noframes\":\n      case \"script\":\n      case \"style\":\n      case \"template\":\n      case \"title\":\n        stack.push(head_element_pointer);\n        in_head_mode(TAG, value, arg3);\n        stack.removeElement(head_element_pointer);\n        return;\n      case \"head\":\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"template\":\n        return in_head_mode(t, value, arg3, arg4);\n      case \"body\":\n      case \"html\":\n      case \"br\":\n        break;\n      default:\n        return;  // ignore any other end tag\n      }\n      break;\n    }\n\n    after_head_mode(TAG, \"body\", null);\n    frameset_ok = true;\n    parser(t, value, arg3, arg4);\n  }\n\n  // 13.2.5.4.7 The \"in body\" insertion mode\n  function in_body_mode(t,value,arg3,arg4) {\n    var body, i, node, elt;\n    switch(t) {\n    case 1: // TEXT\n      if (textIncludesNUL) {\n        value = value.replace(NULCHARS, \"\");\n        if (value.length === 0) return;\n      }\n      // If any non-space characters\n      if (frameset_ok && NONWS.test(value))\n        frameset_ok = false;\n      afereconstruct();\n      insertText(value);\n      return;\n    case 5: // DOCTYPE\n      return;\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case -1: // EOF\n      if (templateInsertionModes.length) {\n        return in_template_mode(t);\n      }\n      stopParsing();\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        if (stack.contains(\"template\")) {\n          return;\n        }\n        transferAttributes(arg3, stack.elements[0]);\n        return;\n      case \"base\":\n      case \"basefont\":\n      case \"bgsound\":\n      case \"link\":\n      case \"meta\":\n      case \"noframes\":\n      case \"script\":\n      case \"style\":\n      case \"template\":\n      case \"title\":\n        in_head_mode(TAG, value, arg3);\n        return;\n      case \"body\":\n        body = stack.elements[1];\n        if (!body || !(body instanceof impl.HTMLBodyElement) ||\n            stack.contains(\"template\"))\n          return;\n        frameset_ok = false;\n        transferAttributes(arg3, body);\n        return;\n      case \"frameset\":\n        if (!frameset_ok) return;\n        body = stack.elements[1];\n        if (!body || !(body instanceof impl.HTMLBodyElement))\n          return;\n        if (body.parentNode) body.parentNode.removeChild(body);\n        while(!(stack.top instanceof impl.HTMLHtmlElement))\n          stack.pop();\n        insertHTMLElement(value, arg3);\n        parser = in_frameset_mode;\n        return;\n\n      case \"address\":\n      case \"article\":\n      case \"aside\":\n      case \"blockquote\":\n      case \"center\":\n      case \"details\":\n      case \"dialog\":\n      case \"dir\":\n      case \"div\":\n      case \"dl\":\n      case \"fieldset\":\n      case \"figcaption\":\n      case \"figure\":\n      case \"footer\":\n      case \"header\":\n      case \"hgroup\":\n      case \"main\":\n      case \"nav\":\n      case \"ol\":\n      case \"p\":\n      case \"section\":\n      case \"summary\":\n      case \"ul\":\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        insertHTMLElement(value, arg3);\n        return;\n\n      case \"menu\":\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        if (isA(stack.top, 'menuitem')) {\n          stack.pop();\n        }\n        insertHTMLElement(value, arg3);\n        return;\n\n      case \"h1\":\n      case \"h2\":\n      case \"h3\":\n      case \"h4\":\n      case \"h5\":\n      case \"h6\":\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        if (stack.top instanceof impl.HTMLHeadingElement)\n          stack.pop();\n        insertHTMLElement(value, arg3);\n        return;\n\n      case \"pre\":\n      case \"listing\":\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        insertHTMLElement(value, arg3);\n        ignore_linefeed = true;\n        frameset_ok = false;\n        return;\n\n      case \"form\":\n        if (form_element_pointer && !stack.contains(\"template\")) return;\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        elt = insertHTMLElement(value, arg3);\n        if (!stack.contains(\"template\"))\n          form_element_pointer = elt;\n        return;\n\n      case \"li\":\n        frameset_ok = false;\n        for(i = stack.elements.length-1; i >= 0; i--) {\n          node = stack.elements[i];\n          if (node instanceof impl.HTMLLIElement) {\n            in_body_mode(ENDTAG, \"li\");\n            break;\n          }\n          if (isA(node, specialSet) && !isA(node, addressdivpSet))\n            break;\n        }\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        insertHTMLElement(value, arg3);\n        return;\n\n      case \"dd\":\n      case \"dt\":\n        frameset_ok = false;\n        for(i = stack.elements.length-1; i >= 0; i--) {\n          node = stack.elements[i];\n          if (isA(node, dddtSet)) {\n            in_body_mode(ENDTAG, node.localName);\n            break;\n          }\n          if (isA(node, specialSet) && !isA(node, addressdivpSet))\n            break;\n        }\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        insertHTMLElement(value, arg3);\n        return;\n\n      case \"plaintext\":\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        insertHTMLElement(value, arg3);\n        tokenizer = plaintext_state;\n        return;\n\n      case \"button\":\n        if (stack.inScope(\"button\")) {\n          in_body_mode(ENDTAG, \"button\");\n          parser(t, value, arg3, arg4);\n        }\n        else {\n          afereconstruct();\n          insertHTMLElement(value, arg3);\n          frameset_ok = false;\n        }\n        return;\n\n      case \"a\":\n        var activeElement = afe.findElementByTag(\"a\");\n        if (activeElement) {\n          in_body_mode(ENDTAG, value);\n          afe.remove(activeElement);\n          stack.removeElement(activeElement);\n        }\n        /* falls through */\n      case \"b\":\n      case \"big\":\n      case \"code\":\n      case \"em\":\n      case \"font\":\n      case \"i\":\n      case \"s\":\n      case \"small\":\n      case \"strike\":\n      case \"strong\":\n      case \"tt\":\n      case \"u\":\n        afereconstruct();\n        afe.push(insertHTMLElement(value,arg3), arg3);\n        return;\n\n      case \"nobr\":\n        afereconstruct();\n\n        if (stack.inScope(value)) {\n          in_body_mode(ENDTAG, value);\n          afereconstruct();\n        }\n        afe.push(insertHTMLElement(value,arg3), arg3);\n        return;\n\n      case \"applet\":\n      case \"marquee\":\n      case \"object\":\n        afereconstruct();\n        insertHTMLElement(value,arg3);\n        afe.insertMarker();\n        frameset_ok = false;\n        return;\n\n      case \"table\":\n        if (!doc._quirks && stack.inButtonScope(\"p\")) {\n          in_body_mode(ENDTAG, \"p\");\n        }\n        insertHTMLElement(value,arg3);\n        frameset_ok = false;\n        parser = in_table_mode;\n        return;\n\n      case \"area\":\n      case \"br\":\n      case \"embed\":\n      case \"img\":\n      case \"keygen\":\n      case \"wbr\":\n        afereconstruct();\n        insertHTMLElement(value,arg3);\n        stack.pop();\n        frameset_ok = false;\n        return;\n\n      case \"input\":\n        afereconstruct();\n        elt = insertHTMLElement(value,arg3);\n        stack.pop();\n        var type = elt.getAttribute(\"type\");\n        if (!type || type.toLowerCase() !== \"hidden\")\n          frameset_ok = false;\n        return;\n\n      case \"param\":\n      case \"source\":\n      case \"track\":\n        insertHTMLElement(value,arg3);\n        stack.pop();\n        return;\n\n      case \"hr\":\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        if (isA(stack.top, 'menuitem')) {\n          stack.pop();\n        }\n        insertHTMLElement(value,arg3);\n        stack.pop();\n        frameset_ok = false;\n        return;\n\n      case \"image\":\n        in_body_mode(TAG, \"img\", arg3, arg4);\n        return;\n\n      case \"textarea\":\n        insertHTMLElement(value,arg3);\n        ignore_linefeed = true;\n        frameset_ok = false;\n        tokenizer = rcdata_state;\n        originalInsertionMode = parser;\n        parser = text_mode;\n        return;\n\n      case \"xmp\":\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n        afereconstruct();\n        frameset_ok = false;\n        parseRawText(value, arg3);\n        return;\n\n      case \"iframe\":\n        frameset_ok = false;\n        parseRawText(value, arg3);\n        return;\n\n      case \"noembed\":\n        parseRawText(value,arg3);\n        return;\n\n      case \"noscript\":\n        if (scripting_enabled) {\n          parseRawText(value,arg3);\n          return;\n        }\n        break;  // XXX Otherwise treat it as any other open tag?\n\n      case \"select\":\n        afereconstruct();\n        insertHTMLElement(value,arg3);\n        frameset_ok = false;\n        if (parser === in_table_mode ||\n          parser === in_caption_mode ||\n          parser === in_table_body_mode ||\n          parser === in_row_mode ||\n          parser === in_cell_mode)\n          parser = in_select_in_table_mode;\n        else\n          parser = in_select_mode;\n        return;\n\n      case \"optgroup\":\n      case \"option\":\n        if (stack.top instanceof impl.HTMLOptionElement) {\n          in_body_mode(ENDTAG, \"option\");\n        }\n        afereconstruct();\n        insertHTMLElement(value,arg3);\n        return;\n\n      case \"menuitem\":\n        if (isA(stack.top, 'menuitem')) {\n          stack.pop();\n        }\n        afereconstruct();\n        insertHTMLElement(value, arg3);\n        return;\n\n      case \"rb\":\n      case \"rtc\":\n        if (stack.inScope(\"ruby\")) {\n          stack.generateImpliedEndTags();\n        }\n        insertHTMLElement(value,arg3);\n        return;\n\n      case \"rp\":\n      case \"rt\":\n        if (stack.inScope(\"ruby\")) {\n          stack.generateImpliedEndTags(\"rtc\");\n        }\n        insertHTMLElement(value,arg3);\n        return;\n\n      case \"math\":\n        afereconstruct();\n        adjustMathMLAttributes(arg3);\n        adjustForeignAttributes(arg3);\n        insertForeignElement(value, arg3, NAMESPACE.MATHML);\n        if (arg4) // self-closing flag\n          stack.pop();\n        return;\n\n      case \"svg\":\n        afereconstruct();\n        adjustSVGAttributes(arg3);\n        adjustForeignAttributes(arg3);\n        insertForeignElement(value, arg3, NAMESPACE.SVG);\n        if (arg4) // self-closing flag\n          stack.pop();\n        return;\n\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"frame\":\n      case \"head\":\n      case \"tbody\":\n      case \"td\":\n      case \"tfoot\":\n      case \"th\":\n      case \"thead\":\n      case \"tr\":\n        // Ignore table tags if we're not in_table mode\n        return;\n      }\n\n      // Handle any other start tag here\n      // (and also noscript tags when scripting is disabled)\n      afereconstruct();\n      insertHTMLElement(value,arg3);\n      return;\n\n    case 3: // ENDTAG\n      switch(value) {\n      case \"template\":\n        in_head_mode(ENDTAG, value, arg3);\n        return;\n      case \"body\":\n        if (!stack.inScope(\"body\")) return;\n        parser = after_body_mode;\n        return;\n      case \"html\":\n        if (!stack.inScope(\"body\")) return;\n        parser = after_body_mode;\n        parser(t, value, arg3);\n        return;\n\n      case \"address\":\n      case \"article\":\n      case \"aside\":\n      case \"blockquote\":\n      case \"button\":\n      case \"center\":\n      case \"details\":\n      case \"dialog\":\n      case \"dir\":\n      case \"div\":\n      case \"dl\":\n      case \"fieldset\":\n      case \"figcaption\":\n      case \"figure\":\n      case \"footer\":\n      case \"header\":\n      case \"hgroup\":\n      case \"listing\":\n      case \"main\":\n      case \"menu\":\n      case \"nav\":\n      case \"ol\":\n      case \"pre\":\n      case \"section\":\n      case \"summary\":\n      case \"ul\":\n        // Ignore if there is not a matching open tag\n        if (!stack.inScope(value)) return;\n        stack.generateImpliedEndTags();\n        stack.popTag(value);\n        return;\n\n      case \"form\":\n        if (!stack.contains(\"template\")) {\n          var openform = form_element_pointer;\n          form_element_pointer = null;\n          if (!openform || !stack.elementInScope(openform)) return;\n          stack.generateImpliedEndTags();\n          stack.removeElement(openform);\n        } else {\n          if (!stack.inScope(\"form\")) return;\n          stack.generateImpliedEndTags();\n          stack.popTag(\"form\");\n        }\n        return;\n\n      case \"p\":\n        if (!stack.inButtonScope(value)) {\n          in_body_mode(TAG, value, null);\n          parser(t, value, arg3, arg4);\n        }\n        else {\n          stack.generateImpliedEndTags(value);\n          stack.popTag(value);\n        }\n        return;\n\n      case \"li\":\n        if (!stack.inListItemScope(value)) return;\n        stack.generateImpliedEndTags(value);\n        stack.popTag(value);\n        return;\n\n      case \"dd\":\n      case \"dt\":\n        if (!stack.inScope(value)) return;\n        stack.generateImpliedEndTags(value);\n        stack.popTag(value);\n        return;\n\n      case \"h1\":\n      case \"h2\":\n      case \"h3\":\n      case \"h4\":\n      case \"h5\":\n      case \"h6\":\n        if (!stack.elementTypeInScope(impl.HTMLHeadingElement)) return;\n        stack.generateImpliedEndTags();\n        stack.popElementType(impl.HTMLHeadingElement);\n        return;\n\n      case \"sarcasm\":\n        // Take a deep breath, and then:\n        break;\n\n      case \"a\":\n      case \"b\":\n      case \"big\":\n      case \"code\":\n      case \"em\":\n      case \"font\":\n      case \"i\":\n      case \"nobr\":\n      case \"s\":\n      case \"small\":\n      case \"strike\":\n      case \"strong\":\n      case \"tt\":\n      case \"u\":\n        var result = adoptionAgency(value);\n        if (result) return;  // If we did something we're done\n        break;         // Go to the \"any other end tag\" case\n\n      case \"applet\":\n      case \"marquee\":\n      case \"object\":\n        if (!stack.inScope(value)) return;\n        stack.generateImpliedEndTags();\n        stack.popTag(value);\n        afe.clearToMarker();\n        return;\n\n      case \"br\":\n        in_body_mode(TAG, value, null);  // Turn </br> into <br>\n        return;\n      }\n\n      // Any other end tag goes here\n      for(i = stack.elements.length-1; i >= 0; i--) {\n        node = stack.elements[i];\n        if (isA(node, value)) {\n          stack.generateImpliedEndTags(value);\n          stack.popElement(node);\n          break;\n        }\n        else if (isA(node, specialSet)) {\n          return;\n        }\n      }\n\n      return;\n    }\n  }\n\n  function text_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      insertText(value);\n      return;\n    case -1: // EOF\n      if (stack.top instanceof impl.HTMLScriptElement)\n        stack.top._already_started = true;\n      stack.pop();\n      parser = originalInsertionMode;\n      parser(t);\n      return;\n    case 3: // ENDTAG\n      if (value === \"script\") {\n        handleScriptEnd();\n      }\n      else {\n        stack.pop();\n        parser = originalInsertionMode;\n      }\n      return;\n    default:\n      // We should never get any other token types\n      return;\n    }\n  }\n\n  function in_table_mode(t, value, arg3, arg4) {\n    function getTypeAttr(attrs) {\n      for(var i = 0, n = attrs.length; i < n; i++) {\n        if (attrs[i][0] === \"type\")\n          return attrs[i][1].toLowerCase();\n      }\n      return null;\n    }\n\n    switch(t) {\n    case 1: // TEXT\n      // XXX the text_integration_mode stuff is\n      // just a hack I made up\n      if (text_integration_mode) {\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      }\n      else if (isA(stack.top, tablesectionrowSet)) {\n        pending_table_text = [];\n        originalInsertionMode = parser;\n        parser = in_table_text_mode;\n        parser(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 5: // DOCTYPE\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"caption\":\n        stack.clearToContext(tableContextSet);\n        afe.insertMarker();\n        insertHTMLElement(value,arg3);\n        parser = in_caption_mode;\n        return;\n      case \"colgroup\":\n        stack.clearToContext(tableContextSet);\n        insertHTMLElement(value,arg3);\n        parser = in_column_group_mode;\n        return;\n      case \"col\":\n        in_table_mode(TAG, \"colgroup\", null);\n        parser(t, value, arg3, arg4);\n        return;\n      case \"tbody\":\n      case \"tfoot\":\n      case \"thead\":\n        stack.clearToContext(tableContextSet);\n        insertHTMLElement(value,arg3);\n        parser = in_table_body_mode;\n        return;\n      case \"td\":\n      case \"th\":\n      case \"tr\":\n        in_table_mode(TAG, \"tbody\", null);\n        parser(t, value, arg3, arg4);\n        return;\n\n      case \"table\":\n        if (!stack.inTableScope(value)) {\n          return; // Ignore the token\n        }\n        in_table_mode(ENDTAG, value);\n        parser(t, value, arg3, arg4);\n        return;\n\n      case \"style\":\n      case \"script\":\n      case \"template\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n\n      case \"input\":\n        var type = getTypeAttr(arg3);\n        if (type !== \"hidden\") break;  // to the anything else case\n        insertHTMLElement(value,arg3);\n        stack.pop();\n        return;\n\n      case \"form\":\n        if (form_element_pointer || stack.contains(\"template\")) return;\n        form_element_pointer = insertHTMLElement(value, arg3);\n        stack.popElement(form_element_pointer);\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"table\":\n        if (!stack.inTableScope(value)) return;\n        stack.popTag(value);\n        resetInsertionMode();\n        return;\n      case \"body\":\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"html\":\n      case \"tbody\":\n      case \"td\":\n      case \"tfoot\":\n      case \"th\":\n      case \"thead\":\n      case \"tr\":\n        return;\n      case \"template\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      }\n\n      break;\n    case -1: // EOF\n      in_body_mode(t, value, arg3, arg4);\n      return;\n    }\n\n    // This is the anything else case\n    foster_parent_mode = true;\n    in_body_mode(t, value, arg3, arg4);\n    foster_parent_mode = false;\n  }\n\n  function in_table_text_mode(t, value, arg3, arg4) {\n    if (t === TEXT) {\n      if (textIncludesNUL) {\n        value = value.replace(NULCHARS, \"\");\n        if (value.length === 0) return;\n      }\n      pending_table_text.push(value);\n    }\n    else {\n      var s = pending_table_text.join(\"\");\n      pending_table_text.length = 0;\n      if (NONWS.test(s)) { // If any non-whitespace characters\n        // This must be the same code as the \"anything else\"\n        // case of the in_table mode above.\n        foster_parent_mode = true;\n        in_body_mode(TEXT, s);\n        foster_parent_mode = false;\n      }\n      else {\n        insertText(s);\n      }\n      parser = originalInsertionMode;\n      parser(t, value, arg3, arg4);\n    }\n  }\n\n\n  function in_caption_mode(t, value, arg3, arg4) {\n    function end_caption() {\n      if (!stack.inTableScope(\"caption\")) return false;\n      stack.generateImpliedEndTags();\n      stack.popTag(\"caption\");\n      afe.clearToMarker();\n      parser = in_table_mode;\n      return true;\n    }\n\n    switch(t) {\n    case 2: // TAG\n      switch(value) {\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"tbody\":\n      case \"td\":\n      case \"tfoot\":\n      case \"th\":\n      case \"thead\":\n      case \"tr\":\n        if (end_caption()) parser(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"caption\":\n        end_caption();\n        return;\n      case \"table\":\n        if (end_caption()) parser(t, value, arg3, arg4);\n        return;\n      case \"body\":\n      case \"col\":\n      case \"colgroup\":\n      case \"html\":\n      case \"tbody\":\n      case \"td\":\n      case \"tfoot\":\n      case \"th\":\n      case \"thead\":\n      case \"tr\":\n        return;\n      }\n      break;\n    }\n\n    // The Anything Else case\n    in_body_mode(t, value, arg3, arg4);\n  }\n\n  function in_column_group_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      var ws = value.match(LEADINGWS);\n      if (ws) {\n        insertText(ws[0]);\n        value = value.substring(ws[0].length);\n      }\n      if (value.length === 0) return;\n      break; // Handle non-whitespace below\n\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 5: // DOCTYPE\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      case \"col\":\n        insertHTMLElement(value, arg3);\n        stack.pop();\n        return;\n      case \"template\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"colgroup\":\n        if (!isA(stack.top, 'colgroup')) {\n          return; // Ignore the token.\n        }\n        stack.pop();\n        parser = in_table_mode;\n        return;\n      case \"col\":\n        return;\n      case \"template\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    case -1: // EOF\n      in_body_mode(t, value, arg3, arg4);\n      return;\n    }\n\n    // Anything else\n    if (!isA(stack.top, 'colgroup')) {\n      return; // Ignore the token.\n    }\n    in_column_group_mode(ENDTAG, \"colgroup\");\n    parser(t, value, arg3, arg4);\n  }\n\n  function in_table_body_mode(t, value, arg3, arg4) {\n    function endsect() {\n      if (!stack.inTableScope(\"tbody\") &&\n        !stack.inTableScope(\"thead\") &&\n        !stack.inTableScope(\"tfoot\"))\n        return;\n      stack.clearToContext(tableBodyContextSet);\n      in_table_body_mode(ENDTAG, stack.top.localName, null);\n      parser(t, value, arg3, arg4);\n    }\n\n    switch(t) {\n    case 2: // TAG\n      switch(value) {\n      case \"tr\":\n        stack.clearToContext(tableBodyContextSet);\n        insertHTMLElement(value, arg3);\n        parser = in_row_mode;\n        return;\n      case \"th\":\n      case \"td\":\n        in_table_body_mode(TAG, \"tr\", null);\n        parser(t, value, arg3, arg4);\n        return;\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"tbody\":\n      case \"tfoot\":\n      case \"thead\":\n        endsect();\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"table\":\n        endsect();\n        return;\n      case \"tbody\":\n      case \"tfoot\":\n      case \"thead\":\n        if (stack.inTableScope(value)) {\n          stack.clearToContext(tableBodyContextSet);\n          stack.pop();\n          parser = in_table_mode;\n        }\n        return;\n      case \"body\":\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"html\":\n      case \"td\":\n      case \"th\":\n      case \"tr\":\n        return;\n      }\n      break;\n    }\n\n    // Anything else:\n    in_table_mode(t, value, arg3, arg4);\n  }\n\n  function in_row_mode(t, value, arg3, arg4) {\n    function endrow() {\n      if (!stack.inTableScope(\"tr\")) return false;\n      stack.clearToContext(tableRowContextSet);\n      stack.pop();\n      parser = in_table_body_mode;\n      return true;\n    }\n\n    switch(t) {\n    case 2: // TAG\n      switch(value) {\n      case \"th\":\n      case \"td\":\n        stack.clearToContext(tableRowContextSet);\n        insertHTMLElement(value, arg3);\n        parser = in_cell_mode;\n        afe.insertMarker();\n        return;\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"tbody\":\n      case \"tfoot\":\n      case \"thead\":\n      case \"tr\":\n        if (endrow()) parser(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"tr\":\n        endrow();\n        return;\n      case \"table\":\n        if (endrow()) parser(t, value, arg3, arg4);\n        return;\n      case \"tbody\":\n      case \"tfoot\":\n      case \"thead\":\n        if (stack.inTableScope(value)) {\n          if (endrow()) parser(t, value, arg3, arg4);\n        }\n        return;\n      case \"body\":\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"html\":\n      case \"td\":\n      case \"th\":\n        return;\n      }\n      break;\n    }\n\n    // anything else\n    in_table_mode(t, value, arg3, arg4);\n  }\n\n  function in_cell_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 2: // TAG\n      switch(value) {\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"tbody\":\n      case \"td\":\n      case \"tfoot\":\n      case \"th\":\n      case \"thead\":\n      case \"tr\":\n        if (stack.inTableScope(\"td\")) {\n          in_cell_mode(ENDTAG, \"td\");\n          parser(t, value, arg3, arg4);\n        }\n        else if (stack.inTableScope(\"th\")) {\n          in_cell_mode(ENDTAG, \"th\");\n          parser(t, value, arg3, arg4);\n        }\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"td\":\n      case \"th\":\n        if (!stack.inTableScope(value)) return;\n        stack.generateImpliedEndTags();\n        stack.popTag(value);\n        afe.clearToMarker();\n        parser = in_row_mode;\n        return;\n\n      case \"body\":\n      case \"caption\":\n      case \"col\":\n      case \"colgroup\":\n      case \"html\":\n        return;\n\n      case \"table\":\n      case \"tbody\":\n      case \"tfoot\":\n      case \"thead\":\n      case \"tr\":\n        if (!stack.inTableScope(value)) return;\n        in_cell_mode(ENDTAG, stack.inTableScope(\"td\") ? \"td\" : \"th\");\n        parser(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    }\n\n    // anything else\n    in_body_mode(t, value, arg3, arg4);\n  }\n\n  function in_select_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      if (textIncludesNUL) {\n        value = value.replace(NULCHARS, \"\");\n        if (value.length === 0) return;\n      }\n      insertText(value);\n      return;\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 5: // DOCTYPE\n      return;\n    case -1: // EOF\n      in_body_mode(t, value, arg3, arg4);\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      case \"option\":\n        if (stack.top instanceof impl.HTMLOptionElement)\n          in_select_mode(ENDTAG, value);\n        insertHTMLElement(value, arg3);\n        return;\n      case \"optgroup\":\n        if (stack.top instanceof impl.HTMLOptionElement)\n          in_select_mode(ENDTAG, \"option\");\n        if (stack.top instanceof impl.HTMLOptGroupElement)\n          in_select_mode(ENDTAG, value);\n        insertHTMLElement(value, arg3);\n        return;\n      case \"select\":\n        in_select_mode(ENDTAG, value); // treat it as a close tag\n        return;\n\n      case \"input\":\n      case \"keygen\":\n      case \"textarea\":\n        if (!stack.inSelectScope(\"select\")) return;\n        in_select_mode(ENDTAG, \"select\");\n        parser(t, value, arg3, arg4);\n        return;\n\n      case \"script\":\n      case \"template\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"optgroup\":\n        if (stack.top instanceof impl.HTMLOptionElement &&\n          stack.elements[stack.elements.length-2] instanceof\n          impl.HTMLOptGroupElement) {\n          in_select_mode(ENDTAG, \"option\");\n        }\n        if (stack.top instanceof impl.HTMLOptGroupElement)\n          stack.pop();\n\n        return;\n\n      case \"option\":\n        if (stack.top instanceof impl.HTMLOptionElement)\n          stack.pop();\n        return;\n\n      case \"select\":\n        if (!stack.inSelectScope(value)) return;\n        stack.popTag(value);\n        resetInsertionMode();\n        return;\n\n      case \"template\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      }\n\n      break;\n    }\n\n    // anything else: just ignore the token\n  }\n\n  function in_select_in_table_mode(t, value, arg3, arg4) {\n    switch(value) {\n    case \"caption\":\n    case \"table\":\n    case \"tbody\":\n    case \"tfoot\":\n    case \"thead\":\n    case \"tr\":\n    case \"td\":\n    case \"th\":\n      switch(t) {\n      case 2: // TAG\n        in_select_in_table_mode(ENDTAG, \"select\");\n        parser(t, value, arg3, arg4);\n        return;\n      case 3: // ENDTAG\n        if (stack.inTableScope(value)) {\n          in_select_in_table_mode(ENDTAG, \"select\");\n          parser(t, value, arg3, arg4);\n        }\n        return;\n      }\n    }\n\n    // anything else\n    in_select_mode(t, value, arg3, arg4);\n  }\n\n  function in_template_mode(t, value, arg3, arg4) {\n    function switchModeAndReprocess(mode) {\n      parser = mode;\n      templateInsertionModes[templateInsertionModes.length-1] = parser;\n      parser(t, value, arg3, arg4);\n    }\n    switch(t) {\n    case 1: // TEXT\n    case 4: // COMMENT\n    case 5: // DOCTYPE\n      in_body_mode(t, value, arg3, arg4);\n      return;\n    case -1: // EOF\n      if (!stack.contains(\"template\")) {\n        stopParsing();\n      } else {\n        stack.popTag(\"template\");\n        afe.clearToMarker();\n        templateInsertionModes.pop();\n        resetInsertionMode();\n        parser(t, value, arg3, arg4);\n      }\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"base\":\n      case \"basefont\":\n      case \"bgsound\":\n      case \"link\":\n      case \"meta\":\n      case \"noframes\":\n      case \"script\":\n      case \"style\":\n      case \"template\":\n      case \"title\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      case \"caption\":\n      case \"colgroup\":\n      case \"tbody\":\n      case \"tfoot\":\n      case \"thead\":\n        switchModeAndReprocess(in_table_mode);\n        return;\n      case \"col\":\n        switchModeAndReprocess(in_column_group_mode);\n        return;\n      case \"tr\":\n        switchModeAndReprocess(in_table_body_mode);\n        return;\n      case \"td\":\n      case \"th\":\n        switchModeAndReprocess(in_row_mode);\n        return;\n      }\n      switchModeAndReprocess(in_body_mode);\n      return;\n    case 3: // ENDTAG\n      switch(value) {\n      case \"template\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      default:\n        return;\n      }\n    }\n  }\n\n  function after_body_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      // If any non-space chars, handle below\n      if (NONWS.test(value)) break;\n      in_body_mode(t, value);\n      return;\n    case 4: // COMMENT\n      // Append it to the <html> element\n      stack.elements[0]._appendChild(doc.createComment(value));\n      return;\n    case 5: // DOCTYPE\n      return;\n    case -1: // EOF\n      stopParsing();\n      return;\n    case 2: // TAG\n      if (value === \"html\") {\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      }\n      break; // for any other tags\n    case 3: // ENDTAG\n      if (value === \"html\") {\n        if (fragment) return;\n        parser = after_after_body_mode;\n        return;\n      }\n      break; // for any other tags\n    }\n\n    // anything else\n    parser = in_body_mode;\n    parser(t, value, arg3, arg4);\n  }\n\n  function in_frameset_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      // Ignore any non-space characters\n      value = value.replace(ALLNONWS, \"\");\n      if (value.length > 0) insertText(value);\n      return;\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 5: // DOCTYPE\n      return;\n    case -1: // EOF\n      stopParsing();\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      case \"frameset\":\n        insertHTMLElement(value, arg3);\n        return;\n      case \"frame\":\n        insertHTMLElement(value, arg3);\n        stack.pop();\n        return;\n      case \"noframes\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      if (value === \"frameset\") {\n        if (fragment && stack.top instanceof impl.HTMLHtmlElement)\n          return;\n        stack.pop();\n        if (!fragment &&\n          !(stack.top instanceof impl.HTMLFrameSetElement))\n          parser = after_frameset_mode;\n        return;\n      }\n      break;\n    }\n\n    // ignore anything else\n  }\n\n  function after_frameset_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      // Ignore any non-space characters\n      value = value.replace(ALLNONWS, \"\");\n      if (value.length > 0) insertText(value);\n      return;\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 5: // DOCTYPE\n      return;\n    case -1: // EOF\n      stopParsing();\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      case \"noframes\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    case 3: // ENDTAG\n      if (value === \"html\") {\n        parser = after_after_frameset_mode;\n        return;\n      }\n      break;\n    }\n\n    // ignore anything else\n  }\n\n  function after_after_body_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      // If any non-space chars, handle below\n      if (NONWS.test(value)) break;\n      in_body_mode(t, value, arg3, arg4);\n      return;\n    case 4: // COMMENT\n      doc._appendChild(doc.createComment(value));\n      return;\n    case 5: // DOCTYPE\n      in_body_mode(t, value, arg3, arg4);\n      return;\n    case -1: // EOF\n      stopParsing();\n      return;\n    case 2: // TAG\n      if (value === \"html\") {\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    }\n\n    // anything else\n    parser = in_body_mode;\n    parser(t, value, arg3, arg4);\n  }\n\n  function after_after_frameset_mode(t, value, arg3, arg4) {\n    switch(t) {\n    case 1: // TEXT\n      // Ignore any non-space characters\n      value = value.replace(ALLNONWS, \"\");\n      if (value.length > 0)\n        in_body_mode(t, value, arg3, arg4);\n      return;\n    case 4: // COMMENT\n      doc._appendChild(doc.createComment(value));\n      return;\n    case 5: // DOCTYPE\n      in_body_mode(t, value, arg3, arg4);\n      return;\n    case -1: // EOF\n      stopParsing();\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"html\":\n        in_body_mode(t, value, arg3, arg4);\n        return;\n      case \"noframes\":\n        in_head_mode(t, value, arg3, arg4);\n        return;\n      }\n      break;\n    }\n\n    // ignore anything else\n  }\n\n\n  // 13.2.5.5 The rules for parsing tokens in foreign content\n  //\n  // This is like one of the insertion modes above, but is\n  // invoked somewhat differently when the current token is not HTML.\n  // See the insertToken() function.\n  function insertForeignToken(t, value, arg3, arg4) {\n    // A <font> tag is an HTML font tag if it has a color, font, or size\n    // attribute.  Otherwise we assume it is foreign content\n    function isHTMLFont(attrs) {\n      for(var i = 0, n = attrs.length; i < n; i++) {\n        switch(attrs[i][0]) {\n        case \"color\":\n        case \"face\":\n        case \"size\":\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var current;\n\n    switch(t) {\n    case 1: // TEXT\n      // If any non-space, non-nul characters\n      if (frameset_ok && NONWSNONNUL.test(value))\n        frameset_ok = false;\n      if (textIncludesNUL) {\n        value = value.replace(NULCHARS, \"\\uFFFD\");\n      }\n      insertText(value);\n      return;\n    case 4: // COMMENT\n      insertComment(value);\n      return;\n    case 5: // DOCTYPE\n      // ignore it\n      return;\n    case 2: // TAG\n      switch(value) {\n      case \"font\":\n        if (!isHTMLFont(arg3)) break;\n        /* falls through */\n      case \"b\":\n      case \"big\":\n      case \"blockquote\":\n      case \"body\":\n      case \"br\":\n      case \"center\":\n      case \"code\":\n      case \"dd\":\n      case \"div\":\n      case \"dl\":\n      case \"dt\":\n      case \"em\":\n      case \"embed\":\n      case \"h1\":\n      case \"h2\":\n      case \"h3\":\n      case \"h4\":\n      case \"h5\":\n      case \"h6\":\n      case \"head\":\n      case \"hr\":\n      case \"i\":\n      case \"img\":\n      case \"li\":\n      case \"listing\":\n      case \"menu\":\n      case \"meta\":\n      case \"nobr\":\n      case \"ol\":\n      case \"p\":\n      case \"pre\":\n      case \"ruby\":\n      case \"s\":\n      case \"small\":\n      case \"span\":\n      case \"strong\":\n      case \"strike\":\n      case \"sub\":\n      case \"sup\":\n      case \"table\":\n      case \"tt\":\n      case \"u\":\n      case \"ul\":\n      case \"var\":\n        if (fragment) {\n          break;\n        }\n        do {\n          stack.pop();\n          current = stack.top;\n        } while(current.namespaceURI !== NAMESPACE.HTML &&\n            !isMathmlTextIntegrationPoint(current) &&\n            !isHTMLIntegrationPoint(current));\n\n        insertToken(t, value, arg3, arg4);  // reprocess\n        return;\n      }\n\n      // Any other start tag case goes here\n      current = (stack.elements.length===1 && fragment) ? fragmentContext :\n        stack.top;\n      if (current.namespaceURI === NAMESPACE.MATHML) {\n        adjustMathMLAttributes(arg3);\n      }\n      else if (current.namespaceURI === NAMESPACE.SVG) {\n        value = adjustSVGTagName(value);\n        adjustSVGAttributes(arg3);\n      }\n      adjustForeignAttributes(arg3);\n\n      insertForeignElement(value, arg3, current.namespaceURI);\n      if (arg4) { // the self-closing flag\n        if (value === 'script' && current.namespaceURI === NAMESPACE.SVG) {\n          // XXX deal with SVG scripts here\n        }\n        stack.pop();\n      }\n      return;\n\n    case 3: // ENDTAG\n      current = stack.top;\n      if (value === \"script\" &&\n        current.namespaceURI === NAMESPACE.SVG &&\n        current.localName === \"script\") {\n\n        stack.pop();\n\n        // XXX\n        // Deal with SVG scripts here\n      }\n      else {\n        // The any other end tag case\n        var i = stack.elements.length-1;\n        var node = stack.elements[i];\n        for(;;) {\n          if (node.localName.toLowerCase() === value) {\n            stack.popElement(node);\n            break;\n          }\n          node = stack.elements[--i];\n          // If non-html, keep looping\n          if (node.namespaceURI !== NAMESPACE.HTML)\n            continue;\n          // Otherwise process the end tag as html\n          parser(t, value, arg3, arg4);\n          break;\n        }\n      }\n      return;\n    }\n  }\n\n  /***\n   * Finally, this is the end of the HTMLParser() factory function.\n   * It returns the htmlparser object with the append() and end() methods.\n   */\n\n  // Sneak another method into the htmlparser object to allow us to run\n  // tokenizer tests.  This can be commented out in production code.\n  // This is a hook for testing the tokenizer. It has to be here\n  // because the tokenizer details are all hidden away within the closure.\n  // It should return an array of tokens generated while parsing the\n  // input string.\n  htmlparser.testTokenizer = function(input, initialState, lastStartTag, charbychar) {\n    var tokens = [];\n\n    switch(initialState) {\n    case \"PCDATA state\":\n      tokenizer = data_state;\n      break;\n    case \"RCDATA state\":\n      tokenizer = rcdata_state;\n      break;\n    case \"RAWTEXT state\":\n      tokenizer = rawtext_state;\n      break;\n    case \"PLAINTEXT state\":\n      tokenizer = plaintext_state;\n      break;\n    }\n\n    if (lastStartTag) {\n      lasttagname = lastStartTag;\n    }\n\n    insertToken = function(t, value, arg3, arg4) {\n      flushText();\n      switch(t) {\n      case 1: // TEXT\n        if (tokens.length > 0 &&\n          tokens[tokens.length-1][0] === \"Character\") {\n          tokens[tokens.length-1][1] += value;\n        }\n        else tokens.push([\"Character\", value]);\n        break;\n      case 4: // COMMENT\n        tokens.push([\"Comment\", value]);\n        break;\n      case 5: // DOCTYPE\n        tokens.push([\"DOCTYPE\", value,\n               arg3 === undefined ? null : arg3,\n               arg4 === undefined ? null : arg4,\n               !force_quirks]);\n        break;\n      case 2: // TAG\n        var attrs = Object.create(null);\n        for(var i = 0; i < arg3.length; i++) {\n          // XXX: does attribute order matter?\n          var a = arg3[i];\n          if (a.length === 1) {\n            attrs[a[0]] = \"\";\n          }\n          else {\n            attrs[a[0]] = a[1];\n          }\n        }\n        var token = [\"StartTag\", value, attrs];\n        if (arg4) token.push(true);\n        tokens.push(token);\n        break;\n      case 3: // ENDTAG\n        tokens.push([\"EndTag\", value]);\n        break;\n      case -1: // EOF\n        break;\n      }\n    };\n\n    if (!charbychar) {\n      this.parse(input, true);\n    }\n    else {\n      for(var i = 0; i < input.length; i++) {\n        this.parse(input[i]);\n      }\n      this.parse(\"\", true);\n    }\n    return tokens;\n  };\n\n  // Return the parser object from the HTMLParser() factory function\n  return htmlparser;\n}\n"]},"metadata":{},"sourceType":"script"}